<?php /** @noinspection ALL */

/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Connection
 */
class Connection extends \ObjectModel
{
    /** @var int $id_guest */
    public $id_guest;
    /** @var int $id_page */
    public $id_page;
    /** @var string $ip_address */
    public $ip_address;
    /** @var string $http_referer */
    public $http_referer;
    /** @var int $id_shop */
    public $id_shop;
    /** @var int $id_shop_group */
    public $id_shop_group;
    /** @var string $date_add */
    public $date_add;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'connections', 'primary' => 'id_connections', 'fields' => array('id_guest' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_page' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'ip_address' => array('type' => self::TYPE_INT, 'validate' => 'isInt'), 'http_referer' => array('type' => self::TYPE_STRING, 'validate' => 'isAbsoluteUrl'), 'id_shop' => array('type' => self::TYPE_INT, 'required' => \true), 'id_shop_group' => array('type' => self::TYPE_INT, 'required' => \true), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate')));
    /**
     * @see ObjectModel::getFields()
     * @return array
     */
    public function getFields()
    {
    }
    /**
     * @param Cookie $cookie
     * @param bool   $full
     *
     * @return array
     */
    public static function setPageConnection($cookie, $full = \true)
    {
    }
    /**
     * @param Cookie $cookie
     *
     * @return int|bool Connection ID
     *                  `false` if failure
     */
    public static function setNewConnection($cookie)
    {
    }
    /**
     * @param int    $idConnections
     * @param int    $idPage
     * @param string $timeStart
     * @param int    $time
     */
    public static function setPageTime($idConnections, $idPage, $timeStart, $time)
    {
    }
    /**
     * Clean connections page
     */
    public static function cleanConnectionsPages()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class OrderCarrier extends \ObjectModel
{
    /** @var int */
    public $id_order_carrier;
    /** @var int */
    public $id_order;
    /** @var int */
    public $id_carrier;
    /** @var int */
    public $id_order_invoice;
    /** @var float */
    public $weight;
    /** @var float */
    public $shipping_cost_tax_excl;
    /** @var float */
    public $shipping_cost_tax_incl;
    /** @var string */
    public $tracking_number;
    /** @var string Object creation date */
    public $date_add;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'order_carrier', 'primary' => 'id_order_carrier', 'fields' => array('id_order' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_carrier' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_order_invoice' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'weight' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat'), 'shipping_cost_tax_excl' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat'), 'shipping_cost_tax_incl' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat'), 'tracking_number' => array('type' => self::TYPE_STRING, 'validate' => 'isTrackingNumber'), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate')));
    protected $webserviceParameters = array('objectMethods' => array('update' => 'updateWs'), 'fields' => array('id_order' => array('xlink_resource' => 'orders'), 'id_carrier' => array('xlink_resource' => 'carriers')));
    /**
     * @param Order $order Required
     * @return bool
     */
    public function sendInTransitEmail($order)
    {
    }
    public function updateWs()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @deprecated 1.5.0
 */
class OrderDiscount extends \OrderCartRule
{
    public function __get($key)
    {
    }
    public function __set($key, $value)
    {
    }
    public function __call($method, $args)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class OrderReturnState extends \ObjectModel
{
    /** @var string Name */
    public $name;
    /** @var string Display state in the specified color */
    public $color;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'order_return_state', 'primary' => 'id_order_return_state', 'multilang' => \true, 'fields' => array(
        'color' => array('type' => self::TYPE_STRING, 'validate' => 'isColor'),
        /* Lang fields */
        'name' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'required' => \true, 'size' => 64),
    ));
    /**
     * Get all available order statuses
     *
     * @param int $id_lang Language id for status name
     * @return array Order statuses
     */
    public static function getOrderReturnStates($id_lang)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class OrderPayment extends \ObjectModel
{
    public $order_reference;
    public $id_currency;
    public $amount;
    public $payment_method;
    public $conversion_rate;
    public $transaction_id;
    public $card_number;
    public $card_brand;
    public $card_expiration;
    public $card_holder;
    public $date_add;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'order_payment', 'primary' => 'id_order_payment', 'fields' => array('order_reference' => array('type' => self::TYPE_STRING, 'validate' => 'isAnything', 'size' => 9), 'id_currency' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'amount' => array('type' => self::TYPE_FLOAT, 'validate' => 'isNegativePrice', 'required' => \true), 'payment_method' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName'), 'conversion_rate' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat'), 'transaction_id' => array('type' => self::TYPE_STRING, 'validate' => 'isAnything', 'size' => 254), 'card_number' => array('type' => self::TYPE_STRING, 'validate' => 'isAnything', 'size' => 254), 'card_brand' => array('type' => self::TYPE_STRING, 'validate' => 'isAnything', 'size' => 254), 'card_expiration' => array('type' => self::TYPE_STRING, 'validate' => 'isAnything', 'size' => 254), 'card_holder' => array('type' => self::TYPE_STRING, 'validate' => 'isAnything', 'size' => 254), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate')));
    public function add($autodate = \true, $nullValues = \false)
    {
    }
    /**
     * Get the detailed payment of an order
     *
     * @deprecated 1.5.3.0
     * @param int $id_order
     * @return array
     */
    public static function getByOrderId($id_order)
    {
    }
    /**
     * Get the detailed payment of an order
     * @param int $order_reference
     * @return array
     * @since 1.5.0.13
     */
    public static function getByOrderReference($order_reference)
    {
    }
    /**
     * Get Order Payments By Invoice ID
     *
     * @param int $id_invoice Invoice ID
     * @return PrestaShopCollection Collection of OrderPayment
     */
    public static function getByInvoiceId($id_invoice)
    {
    }
    /**
     * Return order invoice object linked to the payment
     *
     * @param int $id_order Order Id
     *
     * @since 1.5.0.13
     */
    public function getOrderInvoice($id_order)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class OrderDetail extends \ObjectModel
{
    /** @var int */
    public $id_order_detail;
    /** @var int */
    public $id_order;
    /** @var int */
    public $id_order_invoice;
    /** @var int */
    public $product_id;
    /** @var int */
    public $id_shop;
    /** @var int */
    public $product_attribute_id;
    /** @var int */
    public $id_customization;
    /** @var string */
    public $product_name;
    /** @var int */
    public $product_quantity;
    /** @var int */
    public $product_quantity_in_stock;
    /** @var int */
    public $product_quantity_return;
    /** @var int */
    public $product_quantity_refunded;
    /** @var int */
    public $product_quantity_reinjected;
    /** @var float */
    public $product_price;
    /** @var float */
    public $original_product_price;
    /** @var float */
    public $unit_price_tax_incl;
    /** @var float */
    public $unit_price_tax_excl;
    /** @var float */
    public $total_price_tax_incl;
    /** @var float */
    public $total_price_tax_excl;
    /** @var float */
    public $reduction_percent;
    /** @var float */
    public $reduction_amount;
    /** @var float */
    public $reduction_amount_tax_excl;
    /** @var float */
    public $reduction_amount_tax_incl;
    /** @var float */
    public $group_reduction;
    /** @var float */
    public $product_quantity_discount;
    /** @var string */
    public $product_ean13;
    /** @var string */
    public $product_isbn;
    /** @var string */
    public $product_upc;
    /** @var string */
    public $product_reference;
    /** @var string */
    public $product_supplier_reference;
    /** @var float */
    public $product_weight;
    /** @var float */
    public $ecotax;
    /** @var float */
    public $ecotax_tax_rate;
    /** @var int */
    public $discount_quantity_applied;
    /** @var string */
    public $download_hash;
    /** @var int */
    public $download_nb;
    /** @var datetime */
    public $download_deadline;
    /** @var string $tax_name **/
    public $tax_name;
    /** @var float $tax_rate **/
    public $tax_rate;
    /** @var float $tax_computation_method **/
    public $tax_computation_method;
    /** @var int Id tax rules group */
    public $id_tax_rules_group;
    /** @var int Id warehouse */
    public $id_warehouse;
    /** @var float additional shipping price tax excl */
    public $total_shipping_price_tax_excl;
    /** @var float additional shipping price tax incl */
    public $total_shipping_price_tax_incl;
    /** @var float */
    public $purchase_supplier_price;
    /** @var float */
    public $original_wholesale_price;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'order_detail', 'primary' => 'id_order_detail', 'fields' => array('id_order' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_order_invoice' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_warehouse' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_shop' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'product_id' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'product_attribute_id' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_customization' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'product_name' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'required' => \true), 'product_quantity' => array('type' => self::TYPE_INT, 'validate' => 'isInt', 'required' => \true), 'product_quantity_in_stock' => array('type' => self::TYPE_INT, 'validate' => 'isInt'), 'product_quantity_return' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'), 'product_quantity_refunded' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'), 'product_quantity_reinjected' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'), 'product_price' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice', 'required' => \true), 'reduction_percent' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat'), 'reduction_amount' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'reduction_amount_tax_incl' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'reduction_amount_tax_excl' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'group_reduction' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat'), 'product_quantity_discount' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat'), 'product_ean13' => array('type' => self::TYPE_STRING, 'validate' => 'isEan13'), 'product_isbn' => array('type' => self::TYPE_STRING, 'validate' => 'isIsbn'), 'product_upc' => array('type' => self::TYPE_STRING, 'validate' => 'isUpc'), 'product_reference' => array('type' => self::TYPE_STRING, 'validate' => 'isReference'), 'product_supplier_reference' => array('type' => self::TYPE_STRING, 'validate' => 'isReference'), 'product_weight' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat'), 'tax_name' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName'), 'tax_rate' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat'), 'tax_computation_method' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_tax_rules_group' => array('type' => self::TYPE_INT, 'validate' => 'isInt'), 'ecotax' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat'), 'ecotax_tax_rate' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat'), 'discount_quantity_applied' => array('type' => self::TYPE_INT, 'validate' => 'isInt'), 'download_hash' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName'), 'download_nb' => array('type' => self::TYPE_INT, 'validate' => 'isInt'), 'download_deadline' => array('type' => self::TYPE_DATE, 'validate' => 'isDateFormat'), 'unit_price_tax_incl' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'unit_price_tax_excl' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'total_price_tax_incl' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'total_price_tax_excl' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'total_shipping_price_tax_excl' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'total_shipping_price_tax_incl' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'purchase_supplier_price' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'original_product_price' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'original_wholesale_price' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice')));
    protected $webserviceParameters = array('fields' => array('id_order' => array('xlink_resource' => 'orders'), 'product_id' => array('xlink_resource' => 'products'), 'product_attribute_id' => array('xlink_resource' => 'combinations'), 'product_quantity_reinjected' => array(), 'group_reduction' => array(), 'discount_quantity_applied' => array(), 'download_hash' => array(), 'download_deadline' => array()), 'hidden_fields' => array('tax_rate', 'tax_name'), 'associations' => array('taxes' => array('resource' => 'tax', 'getter' => 'getWsTaxes', 'setter' => \false, 'fields' => array('id' => array()))));
    /** @var bool */
    protected $outOfStock = \false;
    /** @var TaxCalculator object */
    protected $tax_calculator = \null;
    /** @var Address object */
    protected $vat_address = \null;
    /** @var Address object */
    protected $specificPrice = \null;
    /** @var Customer object */
    protected $customer = \null;
    /** @var Context object */
    protected $context = \null;
    public function __construct($id = \null, $id_lang = \null, $context = \null)
    {
    }
    public function delete()
    {
    }
    protected function setContext($id_shop)
    {
    }
    public static function getDownloadFromHash($hash)
    {
    }
    public static function incrementDownload($id_order_detail, $increment = 1)
    {
    }
    /**
     * Returns the tax calculator associated to this order detail.
     * @since 1.5.0.1
     * @return TaxCalculator
     */
    public function getTaxCalculator()
    {
    }
    /**
     * Return the tax calculator associated to this order_detail
     * @since 1.5.0.1
     * @param int $id_order_detail
     * @return TaxCalculator
     */
    public static function getTaxCalculatorStatic($id_order_detail)
    {
    }
    /**
     * Save the tax calculator
     * @since 1.5.0.1
     * @deprecated Functionality moved to Order::updateOrderDetailTax
     *             because we need the full order object to do a good job here.
     *             Will no longer be supported after 1.6.1
     * @return bool
     */
    public function saveTaxCalculator(\Order $order, $replace = \false)
    {
    }
    public function updateTaxAmount($order)
    {
    }
    /**
     * Get a detailed order list of an id_order
     * @param int $id_order
     * @return array
     */
    public static function getList($id_order)
    {
    }
    public function getTaxList()
    {
    }
    public static function getTaxListStatic($id_order_detail)
    {
    }
    /*
     * Set virtual product information
     * @param array $product
     */
    protected function setVirtualProductInformation($product)
    {
    }
    /**
     * Check the order status
     * @param array $product
     * @param int $id_order_state
     */
    protected function checkProductStock($product, $id_order_state)
    {
    }
    /**
     * Apply tax to the product
     * @param object $order
     * @param array $product
     */
    protected function setProductTax(\Order $order, $product)
    {
    }
    /**
     * Set specific price of the product
     * @param object $order
     */
    protected function setSpecificPrice(\Order $order, $product = \null)
    {
    }
    /**
     * Set detailed product price to the order detail
     * @param object $order
     * @param object $cart
     * @param array $product
     */
    protected function setDetailProductPrice(\Order $order, \Cart $cart, $product)
    {
    }
    /**
     * Create an order detail liable to an id_order
     * @param object $order
     * @param object $cart
     * @param array $product
     * @param int $id_order_status
     * @param int $id_order_invoice
     * @param bool $use_taxes set to false if you don't want to use taxes
     */
    protected function create(\Order $order, \Cart $cart, $product, $id_order_state, $id_order_invoice, $use_taxes = \true, $id_warehouse = 0)
    {
    }
    /**
     * Create a list of order detail for a specified id_order using cart
     * @param object $order
     * @param object $cart
     * @param int $id_order_status
     * @param int $id_order_invoice
     * @param bool $use_taxes set to false if you don't want to use taxes
     */
    public function createList(\Order $order, \Cart $cart, $id_order_state, $product_list, $id_order_invoice = 0, $use_taxes = \true, $id_warehouse = 0)
    {
    }
    /**
     * Get the state of the current stock product
     * @return array
     */
    public function getStockState()
    {
    }
    /**
     * Set the additional shipping information
     *
     * @param Order $order
     * @param $product
     */
    public function setShippingCost(\Order $order, $product)
    {
    }
    public function getWsTaxes()
    {
    }
    public static function getCrossSells($id_product, $id_lang, $limit = 12)
    {
    }
    public function add($autodate = \true, $null_values = \false)
    {
    }
    //return the product OR product attribute whole sale price
    public function getWholeSalePrice()
    {
    }
}
class Order extends \ObjectModel
{
    const ROUND_ITEM = 1;
    const ROUND_LINE = 2;
    const ROUND_TOTAL = 3;
    /** @var int Delivery address id */
    public $id_address_delivery;
    /** @var int Invoice address id */
    public $id_address_invoice;
    public $id_shop_group;
    public $id_shop;
    /** @var int Cart id */
    public $id_cart;
    /** @var int Currency id */
    public $id_currency;
    /** @var int Language id */
    public $id_lang;
    /** @var int Customer id */
    public $id_customer;
    /** @var int Carrier id */
    public $id_carrier;
    /** @var int Order Status id */
    public $current_state;
    /** @var string Secure key */
    public $secure_key;
    /** @var string Payment method */
    public $payment;
    /** @var string Payment module */
    public $module;
    /** @var float Currency exchange rate */
    public $conversion_rate;
    /** @var bool Customer is ok for a recyclable package */
    public $recyclable = 1;
    /** @var bool True if the customer wants a gift wrapping */
    public $gift = 0;
    /** @var string Gift message if specified */
    public $gift_message;
    /** @var bool Mobile Theme */
    public $mobile_theme;
    /**
     * @var string Shipping number
     * @deprecated 1.5.0.4
     * @see OrderCarrier->tracking_number
     */
    public $shipping_number;
    /** @var float Discounts total */
    public $total_discounts;
    public $total_discounts_tax_incl;
    public $total_discounts_tax_excl;
    /** @var float Total to pay */
    public $total_paid;
    /** @var float Total to pay tax included */
    public $total_paid_tax_incl;
    /** @var float Total to pay tax excluded */
    public $total_paid_tax_excl;
    /** @var float Total really paid @deprecated 1.5.0.1 */
    public $total_paid_real;
    /** @var float Products total */
    public $total_products;
    /** @var float Products total tax included */
    public $total_products_wt;
    /** @var float Shipping total */
    public $total_shipping;
    /** @var float Shipping total tax included */
    public $total_shipping_tax_incl;
    /** @var float Shipping total tax excluded */
    public $total_shipping_tax_excl;
    /** @var float Shipping tax rate */
    public $carrier_tax_rate;
    /** @var float Wrapping total */
    public $total_wrapping;
    /** @var float Wrapping total tax included */
    public $total_wrapping_tax_incl;
    /** @var float Wrapping total tax excluded */
    public $total_wrapping_tax_excl;
    /** @var int Invoice number */
    public $invoice_number;
    /** @var int Delivery number */
    public $delivery_number;
    /** @var string Invoice creation date */
    public $invoice_date;
    /** @var string Delivery creation date */
    public $delivery_date;
    /** @var bool Order validity: current order status is logable (usually paid and not canceled) */
    public $valid;
    /** @var string Object creation date */
    public $date_add;
    /** @var string Object last modification date */
    public $date_upd;
    /**
     * @var string Order reference, this reference is not unique, but unique for a payment
     */
    public $reference;
    /**
     * @var int Round mode method used for this order
     */
    public $round_mode;
    /**
     * @var int Round type method used for this order
     */
    public $round_type;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'orders', 'primary' => 'id_order', 'fields' => array('id_address_delivery' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_address_invoice' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_cart' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_currency' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_shop_group' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_shop' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_lang' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_customer' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_carrier' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'current_state' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'secure_key' => array('type' => self::TYPE_STRING, 'validate' => 'isMd5'), 'payment' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'required' => \true), 'module' => array('type' => self::TYPE_STRING, 'validate' => 'isModuleName', 'required' => \true), 'recyclable' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'gift' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'gift_message' => array('type' => self::TYPE_STRING, 'validate' => 'isMessage'), 'mobile_theme' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'total_discounts' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'total_discounts_tax_incl' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'total_discounts_tax_excl' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'total_paid' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice', 'required' => \true), 'total_paid_tax_incl' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'total_paid_tax_excl' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'total_paid_real' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice', 'required' => \true), 'total_products' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice', 'required' => \true), 'total_products_wt' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice', 'required' => \true), 'total_shipping' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'total_shipping_tax_incl' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'total_shipping_tax_excl' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'carrier_tax_rate' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat'), 'total_wrapping' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'total_wrapping_tax_incl' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'total_wrapping_tax_excl' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'round_mode' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'round_type' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'shipping_number' => array('type' => self::TYPE_STRING, 'validate' => 'isTrackingNumber'), 'conversion_rate' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat', 'required' => \true), 'invoice_number' => array('type' => self::TYPE_INT), 'delivery_number' => array('type' => self::TYPE_INT), 'invoice_date' => array('type' => self::TYPE_DATE), 'delivery_date' => array('type' => self::TYPE_DATE), 'valid' => array('type' => self::TYPE_BOOL), 'reference' => array('type' => self::TYPE_STRING), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'), 'date_upd' => array('type' => self::TYPE_DATE, 'validate' => 'isDate')));
    protected $webserviceParameters = array('objectMethods' => array('add' => 'addWs'), 'objectNodeName' => 'order', 'objectsNodeName' => 'orders', 'fields' => array('id_address_delivery' => array('xlink_resource' => 'addresses'), 'id_address_invoice' => array('xlink_resource' => 'addresses'), 'id_cart' => array('xlink_resource' => 'carts'), 'id_currency' => array('xlink_resource' => 'currencies'), 'id_lang' => array('xlink_resource' => 'languages'), 'id_customer' => array('xlink_resource' => 'customers'), 'id_carrier' => array('xlink_resource' => 'carriers'), 'current_state' => array('xlink_resource' => 'order_states', 'setter' => 'setWsCurrentState'), 'module' => array('required' => \true), 'invoice_number' => array(), 'invoice_date' => array(), 'delivery_number' => array(), 'delivery_date' => array(), 'valid' => array(), 'date_add' => array(), 'date_upd' => array(), 'shipping_number' => array('getter' => 'getWsShippingNumber', 'setter' => 'setWsShippingNumber')), 'associations' => array('order_rows' => array('resource' => 'order_row', 'setter' => \false, 'virtual_entity' => \true, 'fields' => array('id' => array(), 'product_id' => array('required' => \true), 'product_attribute_id' => array('required' => \true), 'product_quantity' => array('required' => \true), 'product_name' => array('setter' => \false), 'product_reference' => array('setter' => \false), 'product_ean13' => array('setter' => \false), 'product_isbn' => array('setter' => \false), 'product_upc' => array('setter' => \false), 'product_price' => array('setter' => \false), 'unit_price_tax_incl' => array('setter' => \false), 'unit_price_tax_excl' => array('setter' => \false)))));
    protected $_taxCalculationMethod = \PS_TAX_EXC;
    protected static $_historyCache = array();
    public function __construct($id = \null, $id_lang = \null)
    {
    }
    /**
     * @see ObjectModel::getFields()
     * @return array
     */
    public function getFields()
    {
    }
    public function add($autodate = \true, $null_values = \true)
    {
    }
    public function getTaxCalculationMethod()
    {
    }
    /**
     * Does NOT delete a product but "cancel" it (which means return/refund/delete it depending of the case)
     *
     * @param $order
     * @param OrderDetail $order_detail
     * @param int $quantity
     * @return bool
     * @throws PrestaShopException
     */
    public function deleteProduct($order, $order_detail, $quantity)
    {
    }
    /**
     * This function return products of the orders
     * It's similar to Order::getProducts but with similar outputs of Cart::getProducts
     *
     * @return array
     */
    public function getCartProducts()
    {
    }
    /**
     * DOES delete the product
     *
     * @param OrderDetail $order_detail
     * @param int $quantity
     * @return bool
     * @throws PrestaShopException
     */
    protected function _deleteProduct($order_detail, $quantity)
    {
    }
    public function deleteCustomization($id_customization, $quantity, $order_detail)
    {
    }
    /**
     * Get order history
     *
     * @param int $id_lang Language id
     * @param int $id_order_state Filter a specific order status
     * @param int $no_hidden Filter no hidden status
     * @param int $filters Flag to use specific field filter
     *
     * @return array History entries ordered by date DESC
     */
    public function getHistory($id_lang, $id_order_state = \false, $no_hidden = \false, $filters = 0)
    {
    }
    public function getProductsDetail()
    {
    }
    public function getFirstMessage()
    {
    }
    /**
     * Marked as deprecated but should not throw any "deprecated" message
     * This function is used in order to keep front office backward compatibility 14 -> 1.5
     * (Order History)
     *
     * @deprecated
     */
    public function setProductPrices(&$row)
    {
    }
    /**
     * Get order products
     *
     * @return array Products with price, quantity (with taxe and without)
     */
    public function getProducts($products = \false, $selected_products = \false, $selected_qty = \false)
    {
    }
    public static function getIdOrderProduct($id_customer, $id_product)
    {
    }
    protected function setProductCustomizedDatas(&$product, $customized_datas)
    {
    }
    /**
     *
     * This method allow to add stock information on a product detail
     *
     * If advanced stock management is active, get physical stock of this product in the warehouse associated to the ptoduct for the current order
     * Else get the available quantity of the product in fucntion of the shop associated to the order
     *
     * @param array &$product
     */
    protected function setProductCurrentStock(&$product)
    {
    }
    /**
     *
     * This method allow to add image information on a product detail
     * @param array &$product
     */
    protected function setProductImageInformations(&$product)
    {
    }
    public function getTaxesAverageUsed()
    {
    }
    /**
     * Count virtual products in order
     *
     * @return int number of virtual products
     */
    public function getVirtualProducts()
    {
    }
    /**
     * Check if order contains (only) virtual products
     *
     * @param bool $strict If false return true if there are at least one product virtual
     * @return bool true if is a virtual order or false
     *
     */
    public function isVirtual($strict = \true)
    {
    }
    /**
     * @deprecated 1.5.0.1 use Order::getCartRules() instead
     */
    public function getDiscounts($details = \false)
    {
    }
    public function getCartRules()
    {
    }
    public static function getDiscountsCustomer($id_customer, $id_cart_rule)
    {
    }
    /**
     * Get current order status (eg. Awaiting payment, Delivered...)
     *
     * @return int Order status id
     */
    public function getCurrentState()
    {
    }
    /**
     * Get current order status name (eg. Awaiting payment, Delivered...)
     *
     * @return array Order status details
     */
    public function getCurrentStateFull($id_lang)
    {
    }
    public function hasBeenDelivered()
    {
    }
    /**
     * Has products returned by the merchant or by the customer?
     */
    public function hasProductReturned()
    {
    }
    public function hasBeenPaid()
    {
    }
    public function hasBeenShipped()
    {
    }
    public function isInPreparation()
    {
    }
    /**
     * Checks if the current order status is paid and shipped
     *
     * @return bool
     */
    public function isPaidAndShipped()
    {
    }
    /**
     * Get customer orders
     *
     * @param int $id_customer Customer id
     * @param bool $show_hidden_status Display or not hidden order statuses
     * @return array Customer orders
     */
    public static function getCustomerOrders($id_customer, $show_hidden_status = \false, \Context $context = \null)
    {
    }
    public static function getOrdersIdByDate($date_from, $date_to, $id_customer = \null, $type = \null)
    {
    }
    public static function getOrdersWithInformations($limit = \null, \Context $context = \null)
    {
    }
    /**
     * @deprecated since 1.5.0.2
     *
     * @param $date_from
     * @param $date_to
     * @param $id_customer
     * @param $type
     *
     * @return array
     */
    public static function getOrdersIdInvoiceByDate($date_from, $date_to, $id_customer = \null, $type = \null)
    {
    }
    /**
     * @deprecated 1.5.0.3
     *
     * @param $id_order_state
     * @return array
     */
    public static function getOrderIdsByStatus($id_order_state)
    {
    }
    /**
     * Get product total without taxes
     *
     * @return Product total without taxes
     */
    public function getTotalProductsWithoutTaxes($products = \false)
    {
    }
    /**
     * Get product total with taxes
     *
     * @return Product total with taxes
     */
    public function getTotalProductsWithTaxes($products = \false)
    {
    }
    /**
     * used to cache order customer
     */
    protected $cacheCustomer = \null;
    /**
     * Get order customer
     *
     * @return Customer $customer
     */
    public function getCustomer()
    {
    }
    /**
     * Get customer orders number
     *
     * @param int $id_customer Customer id
     * @return array Customer orders number
     */
    public static function getCustomerNbOrders($id_customer)
    {
    }
    /**
     * Get an order id by its cart id
     *
     * @param int $id_cart Cart id
     * @return int Order id
     *
     * @deprecated since 1.7.1.0 Use getIdByCartId() instead
     */
    public static function getOrderByCartId($id_cart)
    {
    }
    /**
     * Get an order object by its cart id
     *
     * @param int $id_cart Cart id
     * @return OrderCore
     */
    public static function getByCartId($id_cart)
    {
    }
    /**
     * Get the order id by its cart id
     *
     * @param int $id_cart Cart id
     * @return int $id_order
     */
    public static function getIdByCartId($id_cart)
    {
    }
    /**
     * @deprecated 1.5.0.1
     * @see Order::addCartRule()
     * @param int $id_cart_rule
     * @param string $name
     * @param float $value
     * @return bool
     */
    public function addDiscount($id_cart_rule, $name, $value)
    {
    }
    /**
     * @since 1.5.0.1
     * @param int $id_cart_rule
     * @param string $name
     * @param array $values
     * @param int $id_order_invoice
     * @return bool
     */
    public function addCartRule($id_cart_rule, $name, $values, $id_order_invoice = 0, $free_shipping = \null)
    {
    }
    public function getNumberOfDays()
    {
    }
    /**
     * Can this order be returned by the client?
     *
     * @return bool
     */
    public function isReturnable()
    {
    }
    public static function getLastInvoiceNumber()
    {
    }
    public static function setLastInvoiceNumber($order_invoice_id, $id_shop)
    {
    }
    public function getInvoiceNumber($order_invoice_id)
    {
    }
    /**
     * This method allows to generate first invoice of the current order
     */
    public function setInvoice($use_existing_payment = \false)
    {
    }
    /**
     * This method allows to fulfill the object order_invoice with sales figures
     */
    protected function setInvoiceDetails($order_invoice)
    {
    }
    /**
     * This method allows to generate first delivery slip of the current order
     */
    public function setDeliverySlip()
    {
    }
    public function setDeliveryNumber($order_invoice_id, $id_shop)
    {
    }
    public function getDeliveryNumber($order_invoice_id)
    {
    }
    public function setDelivery()
    {
    }
    public static function getByDelivery($id_delivery)
    {
    }
    /**
     * Get a collection of orders using reference
     *
     * @since 1.5.0.14
     *
     * @param string $reference
     * @return PrestaShopCollection Collection of Order
     */
    public static function getByReference($reference)
    {
    }
    /**
     * The combination (reference, email) should be unique, of multiple entries are found, then we take the first one.
     * @param $reference Order reference
     * @param $email customer email address
     *
     * @return Order The first order found
     */
    public static function getByReferenceAndEmail($reference, $email)
    {
    }
    public function getTotalWeight()
    {
    }
    /**
     *
     * @param int $id_invoice
     * @deprecated 1.5.0.1
     */
    public static function getInvoice($id_invoice)
    {
    }
    public function isAssociatedAtGuest($email)
    {
    }
    /**
     * @param int $id_order
     * @param int $id_customer optionnal
     * @return int id_cart
     */
    public static function getCartIdStatic($id_order, $id_customer = 0)
    {
    }
    public function getWsOrderRows()
    {
    }
    /** Set current order status
     * @param int $id_order_state
     * @param int $id_employee (/!\ not optional except for Webservice.
     */
    public function setCurrentState($id_order_state, $id_employee = 0)
    {
    }
    public function addWs($autodate = \true, $null_values = \false)
    {
    }
    public function deleteAssociations()
    {
    }
    /**
     * This method return the ID of the previous order
     * @since 1.5.0.1
     * @return int
     */
    public function getPreviousOrderId()
    {
    }
    /**
     * This method return the ID of the next order
     * @since 1.5.0.1
     * @return int
     */
    public function getNextOrderId()
    {
    }
    /**
     * Get the an order detail list of the current order
     * @return array
     */
    public function getOrderDetailList()
    {
    }
    /**
     * Gennerate a unique reference for orders generated with the same cart id
     * This references, is usefull for check payment
     *
     * @return String
     */
    public static function generateReference()
    {
    }
    public function orderContainProduct($id_product)
    {
    }
    /**
     * This method returns true if at least one order details uses the
     * One After Another tax computation method.
     *
     * @since 1.5.0.1
     * @return bool
     */
    public function useOneAfterAnotherTaxComputationMethod()
    {
    }
    /**
     * This method allows to get all Order Payment for the current order
     * @since 1.5.0.1
     * @return PrestaShopCollection Collection of OrderPayment
     */
    public function getOrderPaymentCollection()
    {
    }
    /**
     *
     * This method allows to add a payment to the current order
     * @since 1.5.0.1
     * @param float $amount_paid
     * @param string $payment_method
     * @param string $payment_transaction_id
     * @param Currency $currency
     * @param string $date
     * @param OrderInvoice $order_invoice
     * @return bool
     */
    public function addOrderPayment($amount_paid, $payment_method = \null, $payment_transaction_id = \null, $currency = \null, $date = \null, $order_invoice = \null)
    {
    }
    /**
     * Returns the correct product taxes breakdown.
     *
     * Get all documents linked to the current order
     *
     * @since 1.5.0.1
     * @return array
     */
    public function getDocuments()
    {
    }
    public function getReturn()
    {
    }
    /**
     * @return array return all shipping method for the current order
     * state_name sql var is now deprecated - use order_state_name for the state name and carrier_name for the carrier_name
     */
    public function getShipping()
    {
    }
    /**
     *
     * Get all order_slips for the current order
     * @since 1.5.0.2
     * @return PrestaShopCollection Collection of OrderSlip
     */
    public function getOrderSlipsCollection()
    {
    }
    /**
     *
     * Get all invoices for the current order
     * @since 1.5.0.1
     * @return PrestaShopCollection Collection of OrderInvoice
     */
    public function getInvoicesCollection()
    {
    }
    /**
     *
     * Get all delivery slips for the current order
     * @since 1.5.0.2
     * @return PrestaShopCollection Collection of OrderInvoice
     */
    public function getDeliverySlipsCollection()
    {
    }
    /**
     * Get all not paid invoices for the current order
     * @since 1.5.0.2
     * @return PrestaShopCollection Collection of Order invoice not paid
     */
    public function getNotPaidInvoicesCollection()
    {
    }
    /**
     * Get total paid
     *
     * @since 1.5.0.1
     * @param Currency $currency currency used for the total paid of the current order
     * @return float amount in the $currency
     */
    public function getTotalPaid($currency = \null)
    {
    }
    /**
     * Get the sum of total_paid_tax_incl of the orders with similar reference
     *
     * @since 1.5.0.1
     * @return float
     */
    public function getOrdersTotalPaid()
    {
    }
    /**
     *
     * This method allows to change the shipping cost of the current order
     * @since 1.5.0.1
     * @param float $amount
     * @return bool
     */
    public function updateShippingCost($amount)
    {
    }
    /**
     * Returns the correct product taxes breakdown.
     *
     * @since 1.5.0.1
     * @return array
     */
    public function getProductTaxesBreakdown()
    {
    }
    /**
     * Returns the shipping taxes breakdown
     *
     * @since 1.5.0.1
     * @return array
     */
    public function getShippingTaxesBreakdown()
    {
    }
    /**
     * Returns the wrapping taxes breakdown
     * @todo
     * @since 1.5.0.1
     * @return array
     */
    public function getWrappingTaxesBreakdown()
    {
    }
    /**
     * Returns the ecotax taxes breakdown
     *
     * @since 1.5.0.1
     * @return array
     */
    public function getEcoTaxTaxesBreakdown()
    {
    }
    /**
     * Has invoice return true if this order has already an invoice
     *
     * @return bool
     */
    public function hasInvoice()
    {
    }
    /**
     * Has Delivery return true if this order has already a delivery slip
     *
     * @return bool
     */
    public function hasDelivery()
    {
    }
    /**
     * Get order invoice id if has delivery return id_order_invoice if this order has already a delivery slip
     *
     * @return int
     */
    public function getOrderInvoiceIdIfHasDelivery()
    {
    }
    /**
     * Get warehouse associated to the order
     *
     * return array List of warehouse
     */
    public function getWarehouseList()
    {
    }
    /**
     * @since 1.5.0.4
     * @return OrderState or null if Order haven't a state
     */
    public function getCurrentOrderState()
    {
    }
    /**
     * @see ObjectModel::getWebserviceObjectList()
     */
    public function getWebserviceObjectList($sql_join, $sql_filter, $sql_sort, $sql_limit)
    {
    }
    /**
     * Get all other orders with the same reference
     *
     * @since 1.5.0.13
     */
    public function getBrother()
    {
    }
    /**
     * Get a collection of order payments
     *
     * @since 1.5.0.13
     */
    public function getOrderPayments()
    {
    }
    /**
     * Return a unique reference like : GWJTHMZUN#2
     *
     * With multishipping, order reference are the same for all orders made with the same cart
     * in this case this method suffix the order reference by a # and the order number
     *
     * @since 1.5.0.14
     */
    public function getUniqReference()
    {
    }
    /**
     * Return a unique reference like : GWJTHMZUN#2
     *
     * With multishipping, order reference are the same for all orders made with the same cart
     * in this case this method suffix the order reference by a # and the order number
     *
     * @since 1.5.0.14
     */
    public static function getUniqReferenceOf($id_order)
    {
    }
    /**
     * Return id of carrier
     *
     * Get id of the carrier used in order
     *
     * @since 1.5.5.0
     */
    public function getIdOrderCarrier()
    {
    }
    public static function sortDocuments($a, $b)
    {
    }
    public function getWsShippingNumber()
    {
    }
    public function setWsShippingNumber($shipping_number)
    {
    }
    /**
     * @deprecated since 1.6.1
     */
    public function getWsCurrentState()
    {
    }
    public function setWsCurrentState($state)
    {
    }
    /**
     * By default this function was made for invoice, to compute tax amounts and balance delta (because of computation made on round values).
     * If you provide $limitToOrderDetails, only these item will be taken into account. This option is usefull for order slip for example,
     * where only sublist of the order is refunded.
     *
     * @param $limitToOrderDetails Optional array of OrderDetails to take into account. False by default to take all OrderDetails from the current Order.
     * @return array A list of tax rows applied to the given OrderDetails (or all OrderDetails linked to the current Order).
     */
    public function getProductTaxesDetails($limitToOrderDetails = \false)
    {
    }
    /**
     * The primary purpose of this method is to be
     * called at the end of the generation of each order
     * in PaymentModule::validateOrder, to fill in
     * the order_detail_tax table with taxes
     * that will add up in such a way that
     * the sum of the tax amounts in the product tax breakdown
     * is equal to the difference between products with tax and
     * products without tax.
     */
    public function updateOrderDetailTax()
    {
    }
    public function getOrderDetailTaxes()
    {
    }
    /**
     * Re calculate shipping cost
     * @return object $order
     */
    public function refreshShippingCost()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class OrderState extends \ObjectModel
{
    /** @var string Name */
    public $name;
    /** @var string Template name if there is any e-mail to send */
    public $template;
    /** @var bool Send an e-mail to customer ? */
    public $send_email;
    public $module_name;
    /** @var bool Allow customer to view and download invoice when order is at this state */
    public $invoice;
    /** @var string Display state in the specified color */
    public $color;
    public $unremovable;
    /** @var bool Log authorization */
    public $logable;
    /** @var bool Delivery */
    public $delivery;
    /** @var bool Hidden */
    public $hidden;
    /** @var bool Shipped */
    public $shipped;
    /** @var bool Paid */
    public $paid;
    /** @var bool Attach PDF Invoice */
    public $pdf_invoice;
    /** @var bool Attach PDF Delivery Slip */
    public $pdf_delivery;
    /** @var bool True if carrier has been deleted (staying in database as deleted) */
    public $deleted = 0;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'order_state', 'primary' => 'id_order_state', 'multilang' => \true, 'fields' => array(
        'send_email' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'module_name' => array('type' => self::TYPE_STRING, 'validate' => 'isModuleName'),
        'invoice' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'color' => array('type' => self::TYPE_STRING, 'validate' => 'isColor'),
        'logable' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'shipped' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'unremovable' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'delivery' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'hidden' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'paid' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'pdf_delivery' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'pdf_invoice' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'deleted' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        /* Lang fields */
        'name' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'required' => \true, 'size' => 64),
        'template' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isTplName', 'size' => 64),
    ));
    protected $webserviceParameters = array('fields' => array('unremovable' => array(), 'delivery' => array(), 'hidden' => array()));
    const FLAG_NO_HIDDEN = 1;
    /* 00001 */
    const FLAG_LOGABLE = 2;
    /* 00010 */
    const FLAG_DELIVERY = 4;
    /* 00100 */
    const FLAG_SHIPPED = 8;
    /* 01000 */
    const FLAG_PAID = 16;
    /* 10000 */
    /**
     * Get all available order statuses
     *
     * @param int $id_lang Language id for status name
     * @return array Order statuses
     */
    public static function getOrderStates($id_lang)
    {
    }
    /**
     * Check if we can make a invoice when order is in this state
     *
     * @param int $id_order_state State ID
     * @return bool availability
     */
    public static function invoiceAvailable($id_order_state)
    {
    }
    public function isRemovable()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class OrderMessage extends \ObjectModel
{
    /** @var string name name */
    public $name;
    /** @var string message content */
    public $message;
    /** @var string Object creation date */
    public $date_add;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'order_message', 'primary' => 'id_order_message', 'multilang' => \true, 'fields' => array(
        'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'),
        /* Lang fields */
        'name' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'required' => \true, 'size' => 128),
        'message' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isMessage', 'required' => \true, 'size' => 1200),
    ));
    protected $webserviceParameters = array('fields' => array('id' => array('sqlId' => 'id_discount_type', 'xlink_resource' => 'order_message_lang'), 'date_add' => array('sqlId' => 'date_add')));
    public static function getOrderMessages($id_lang)
    {
    }
}
class OrderHistory extends \ObjectModel
{
    /** @var int Order id */
    public $id_order;
    /** @var int Order status id */
    public $id_order_state;
    /** @var int Employee id for this history entry */
    public $id_employee;
    /** @var string Object creation date */
    public $date_add;
    /** @var string Object last modification date */
    public $date_upd;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'order_history', 'primary' => 'id_order_history', 'fields' => array('id_order' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_order_state' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_employee' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate')));
    /**
     * @see  ObjectModel::$webserviceParameters
     */
    protected $webserviceParameters = array('objectsNodeName' => 'order_histories', 'fields' => array('id_employee' => array('xlink_resource' => 'employees'), 'id_order_state' => array('required' => \true, 'xlink_resource' => 'order_states'), 'id_order' => array('xlink_resource' => 'orders')), 'objectMethods' => array('add' => 'addWs'));
    /**
     * Sets the new state of the given order
     *
     * @param int $new_order_state
     * @param int/object $id_order
     * @param bool $use_existing_payment
     */
    public function changeIdOrderState($new_order_state, $id_order, $use_existing_payment = \false)
    {
    }
    /**
     * Returns the last order status
     * @param int $id_order
     * @return OrderState|bool
     * @deprecated 1.5.0.4
     * @see Order->current_state
     */
    public static function getLastOrderState($id_order)
    {
    }
    /**
     * @param bool $autodate Optional
     * @param array $template_vars Optional
     * @param Context $context Deprecated
     * @return bool
     */
    public function addWithemail($autodate = \true, $template_vars = \false, \Context $context = \null)
    {
    }
    public function sendEmail($order, $template_vars = \false)
    {
    }
    public function add($autodate = \true, $null_values = \false)
    {
    }
    /**
     * @return int
     */
    public function isValidated()
    {
    }
    /**
     * Add method for webservice create resource Order History
     * If sendemail=1 GET parameter is present sends email to customer otherwise does not
     * @return bool
     */
    public function addWs()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class OrderSlip extends \ObjectModel
{
    /** @var int */
    public $id;
    /** @var int */
    public $id_customer;
    /** @var int */
    public $id_order;
    /** @var float */
    public $conversion_rate;
    /** @var float */
    public $total_products_tax_excl;
    /** @var float */
    public $total_products_tax_incl;
    /** @var float */
    public $total_shipping_tax_excl;
    /** @var float */
    public $total_shipping_tax_incl;
    /** @var int */
    public $amount;
    /** @var int */
    public $shipping_cost;
    /** @var int */
    public $shipping_cost_amount;
    /** @var int */
    public $partial;
    /** @var string Object creation date */
    public $date_add;
    /** @var string Object last modification date */
    public $date_upd;
    /** @var int */
    public $order_slip_type = 0;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'order_slip', 'primary' => 'id_order_slip', 'fields' => array('id_customer' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_order' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'conversion_rate' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat', 'required' => \true), 'total_products_tax_excl' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat', 'required' => \true), 'total_products_tax_incl' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat', 'required' => \true), 'total_shipping_tax_excl' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat', 'required' => \true), 'total_shipping_tax_incl' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat', 'required' => \true), 'amount' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat'), 'shipping_cost' => array('type' => self::TYPE_INT), 'shipping_cost_amount' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat'), 'partial' => array('type' => self::TYPE_INT), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'), 'date_upd' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'), 'order_slip_type' => array('type' => self::TYPE_INT, 'validate' => 'isInt')));
    protected $webserviceParameters = array('objectNodeName' => 'order_slip', 'objectsNodeName' => 'order_slips', 'fields' => array('id_customer' => array('xlink_resource' => 'customers'), 'id_order' => array('xlink_resource' => 'orders')), 'associations' => array('order_slip_details' => array('resource' => 'order_slip_detail', 'setter' => \false, 'virtual_entity' => \true, 'fields' => array('id' => array(), 'id_order_detail' => array('required' => \true), 'product_quantity' => array('required' => \true), 'amount_tax_excl' => array('required' => \true), 'amount_tax_incl' => array('required' => \true)))));
    public function addSlipDetail($orderDetailList, $productQtyList)
    {
    }
    public static function getOrdersSlip($customer_id, $order_id = \false)
    {
    }
    public static function getOrdersSlipDetail($id_order_slip = \false, $id_order_detail = \false)
    {
    }
    /**
     * @param int $orderSlipId
     * @param Order $order
     * @return array
     */
    public static function getOrdersSlipProducts($orderSlipId, $order)
    {
    }
    /**
     *
     * Get resume of all refund for one product line
     * @param $id_order_detail
     */
    public static function getProductSlipResume($id_order_detail)
    {
    }
    /**
     *
     * Get refund details for one product line
     * @param $id_order_detail
     */
    public static function getProductSlipDetail($id_order_detail)
    {
    }
    public function getProducts()
    {
    }
    public static function getSlipsIdByDate($dateFrom, $dateTo)
    {
    }
    /**
     * @deprecated since 1.6.0.10 use OrderSlip::create() instead
     *
     */
    public static function createOrderSlip($order, $productList, $qtyList, $shipping_cost = \false)
    {
    }
    public static function create(\Order $order, $product_list, $shipping_cost = \false, $amount = 0, $amount_choosen = \false, $add_tax = \true)
    {
    }
    protected function addProductOrderSlip($product)
    {
    }
    public static function createPartialOrderSlip($order, $amount, $shipping_cost_amount, $order_detail_list)
    {
    }
    public function addPartialSlipDetail($order_detail_list)
    {
    }
    public function getEcoTaxTaxesBreakdown()
    {
    }
    public function getWsOrderSlipDetails()
    {
    }
    public function setWsOrderSlipDetails($values)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class OrderInvoice extends \ObjectModel
{
    const TAX_EXCL = 0;
    const TAX_INCL = 1;
    const DETAIL = 2;
    /** @var int */
    public $id_order;
    /** @var int */
    public $number;
    /** @var int */
    public $delivery_number;
    /** @var int */
    public $delivery_date = '0000-00-00 00:00:00';
    /** @var float */
    public $total_discount_tax_excl;
    /** @var float */
    public $total_discount_tax_incl;
    /** @var float */
    public $total_paid_tax_excl;
    /** @var float */
    public $total_paid_tax_incl;
    /** @var float */
    public $total_products;
    /** @var float */
    public $total_products_wt;
    /** @var float */
    public $total_shipping_tax_excl;
    /** @var float */
    public $total_shipping_tax_incl;
    /** @var int */
    public $shipping_tax_computation_method;
    /** @var float */
    public $total_wrapping_tax_excl;
    /** @var float */
    public $total_wrapping_tax_incl;
    /** @var string shop address */
    public $shop_address;
    /** @var string note */
    public $note;
    /** @var int */
    public $date_add;
    /** @var array Total paid cache */
    protected static $_total_paid_cache = array();
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'order_invoice', 'primary' => 'id_order_invoice', 'fields' => array('id_order' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'number' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'delivery_number' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'delivery_date' => array('type' => self::TYPE_DATE, 'validate' => 'isDateFormat'), 'total_discount_tax_excl' => array('type' => self::TYPE_FLOAT), 'total_discount_tax_incl' => array('type' => self::TYPE_FLOAT), 'total_paid_tax_excl' => array('type' => self::TYPE_FLOAT), 'total_paid_tax_incl' => array('type' => self::TYPE_FLOAT), 'total_products' => array('type' => self::TYPE_FLOAT), 'total_products_wt' => array('type' => self::TYPE_FLOAT), 'total_shipping_tax_excl' => array('type' => self::TYPE_FLOAT), 'total_shipping_tax_incl' => array('type' => self::TYPE_FLOAT), 'shipping_tax_computation_method' => array('type' => self::TYPE_INT), 'total_wrapping_tax_excl' => array('type' => self::TYPE_FLOAT), 'total_wrapping_tax_incl' => array('type' => self::TYPE_FLOAT), 'shop_address' => array('type' => self::TYPE_HTML, 'validate' => 'isCleanHtml', 'size' => 1000), 'note' => array('type' => self::TYPE_STRING, 'validate' => 'isCleanHtml', 'size' => 65000), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate')));
    public function add($autodate = \true, $null_values = \false)
    {
    }
    public function getProductsDetail()
    {
    }
    public static function getInvoiceByNumber($id_invoice)
    {
    }
    /**
     * Get order products
     *
     * @return array Products with price, quantity (with taxe and without)
     */
    public function getProducts($products = \false, $selected_products = \false, $selected_qty = \false)
    {
    }
    protected function setProductCustomizedDatas(&$product, $customized_datas)
    {
    }
    /**
     *
     * This method allow to add stock information on a product detail
     * @param array &$product
     */
    protected function setProductCurrentStock(&$product)
    {
    }
    /**
     *
     * This method allow to add image information on a product detail
     * @param array &$product
     */
    protected function setProductImageInformations(&$product)
    {
    }
    /**
     * This method returns true if at least one order details uses the
     * One After Another tax computation method.
     *
     * @since 1.5
     * @return bool
     */
    public function useOneAfterAnotherTaxComputationMethod()
    {
    }
    public function displayTaxBasesInProductTaxesBreakdown()
    {
    }
    public function getOrder()
    {
    }
    public function getProductTaxesBreakdown($order = \null)
    {
    }
    /**
     * Returns the shipping taxes breakdown
     *
     * @since 1.5
     * @param Order $order
     * @return array
     */
    public function getShippingTaxesBreakdown($order)
    {
    }
    /**
     * Returns the wrapping taxes breakdown
     *
     * @return array
     */
    public function getWrappingTaxesBreakdown()
    {
    }
    /**
     * Returns the ecotax taxes breakdown
     *
     * @since 1.5
     * @return array
     */
    public function getEcoTaxTaxesBreakdown()
    {
    }
    /**
     * Returns all the order invoice that match the date interval
     *
     * @since 1.5
     * @param $date_from
     * @param $date_to
     * @return array collection of OrderInvoice
     */
    public static function getByDateInterval($date_from, $date_to)
    {
    }
    /**
     * @since 1.5.0.3
     * @param $id_order_state
     * @return array collection of OrderInvoice
     */
    public static function getByStatus($id_order_state)
    {
    }
    /**
     * @since 1.5.0.3
     * @param $date_from
     * @param $date_to
     * @return array collection of invoice
     */
    public static function getByDeliveryDateInterval($date_from, $date_to)
    {
    }
    /**
     * @since 1.5
     * @param $id_order_invoice
     */
    public static function getCarrier($id_order_invoice)
    {
    }
    /**
     * @since 1.5
     * @param $id_order_invoice
     */
    public static function getCarrierId($id_order_invoice)
    {
    }
    /**
     * @param int $id
     * @return OrderInvoice
     * @throws PrestaShopException
     */
    public static function retrieveOneById($id)
    {
    }
    /**
     * Amounts of payments
     * @since 1.5.0.2
     * @return float Total paid
     */
    public function getTotalPaid()
    {
    }
    /**
     * Rest Paid
     * @since 1.5.0.2
     * @return float Rest Paid
     */
    public function getRestPaid()
    {
    }
    /**
     * Return collection of order invoice object linked to the payments of the current order invoice object
     *
     * @since 1.5.0.14
     * @return PrestaShopCollection|array Collection of OrderInvoice or empty array
     */
    public function getSibling()
    {
    }
    /**
     * Return total to paid of sibling invoices
     *
     * @param int $mod TAX_EXCL, TAX_INCL, DETAIL
     *
     * @since 1.5.0.14
     */
    public function getSiblingTotal($mod = \OrderInvoice::TAX_INCL)
    {
    }
    /**
     * Get global rest to paid
     *    This method will return something different of the method getRestPaid if
     *    there is an other invoice linked to the payments of the current invoice
     * @since 1.5.0.13
     */
    public function getGlobalRestPaid()
    {
    }
    /**
     * @since 1.5.0.2
     * @return bool Is paid ?
     */
    public function isPaid()
    {
    }
    /**
     * @since 1.5.0.2
     * @return PrestaShopCollection Collection of Order payment
     */
    public function getOrderPaymentCollection()
    {
    }
    /**
     * Get the formatted number of invoice
     * @since 1.5.0.2
     * @param int $id_lang for invoice_prefix
     * @return string
     */
    public function getInvoiceNumberFormatted($id_lang, $id_shop = \null)
    {
    }
    public function saveCarrierTaxCalculator(array $taxes_amount)
    {
    }
    public function saveWrappingTaxCalculator(array $taxes_amount)
    {
    }
    public static function getCurrentFormattedShopAddress($id_shop = \null)
    {
    }
    /**
     * This method is used to fix shop addresses that cannot be fixed during upgrade process
     * (because uses the whole environnement of PS classes that is not available during upgrade).
     * This method should execute once on an upgraded PrestaShop to fix all OrderInvoices in one shot.
     * This method is triggered once during a (non bulk) creation of a PDF from an OrderInvoice that is not fixed yet.
     *
     * @since 1.6.1.1
     */
    public static function fixAllShopAddresses()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class OrderReturn extends \ObjectModel
{
    /** @var int */
    public $id;
    /** @var int */
    public $id_customer;
    /** @var int */
    public $id_order;
    /** @var int */
    public $state;
    /** @var string message content */
    public $question;
    /** @var string Object creation date */
    public $date_add;
    /** @var string Object last modification date */
    public $date_upd;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'order_return', 'primary' => 'id_order_return', 'fields' => array('id_customer' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_order' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'question' => array('type' => self::TYPE_HTML, 'validate' => 'isCleanHtml'), 'state' => array('type' => self::TYPE_STRING), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'), 'date_upd' => array('type' => self::TYPE_DATE, 'validate' => 'isDate')));
    public function addReturnDetail($order_detail_list, $product_qty_list, $customization_ids, $customization_qty_input)
    {
    }
    public function checkEnoughProduct($order_detail_list, $product_qty_list, $customization_ids, $customization_qty_input)
    {
    }
    public function countProduct()
    {
    }
    public static function getOrdersReturn($customer_id, $order_id = \false, $no_denied = \false, \Context $context = \null)
    {
    }
    public static function getOrdersReturnDetail($id_order_return)
    {
    }
    /**
     * @param int $order_return_id
     * @param Order $order
     * @return array
     */
    public static function getOrdersReturnProducts($order_return_id, $order)
    {
    }
    public static function getReturnedCustomizedProducts($id_order)
    {
    }
    public static function deleteOrderReturnDetail($id_order_return, $id_order_detail, $id_customization = 0)
    {
    }
    /**
     *
     * Get return details for one product line
     * @param $id_order_detail
     */
    public static function getProductReturnDetail($id_order_detail)
    {
    }
    /**
     *
     * Add returned quantity to products list
     * @param array $products
     * @param int $id_order
     */
    public static function addReturnedQuantity(&$products, $id_order)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class OrderCartRule extends \ObjectModel
{
    /** @var int */
    public $id_order_cart_rule;
    /** @var int */
    public $id_order;
    /** @var int */
    public $id_cart_rule;
    /** @var int */
    public $id_order_invoice;
    /** @var string */
    public $name;
    /** @var float value (tax incl.) of voucher */
    public $value;
    /** @var float value (tax excl.) of voucher */
    public $value_tax_excl;
    /** @var bool value : voucher gives free shipping or not */
    public $free_shipping;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'order_cart_rule', 'primary' => 'id_order_cart_rule', 'fields' => array('id_order' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_cart_rule' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_order_invoice' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'name' => array('type' => self::TYPE_STRING, 'validate' => 'isCleanHtml', 'required' => \true), 'value' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat', 'required' => \true), 'value_tax_excl' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat', 'required' => \true), 'free_shipping' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool')));
    protected $webserviceParameters = array('fields' => array('id_order' => array('xlink_resource' => 'orders')));
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
interface ITreeToolbarButtonCore
{
    public function __toString();
    public function setAttribute($name, $value);
    public function getAttribute($name);
    public function setAttributes($value);
    public function getAttributes();
    public function setClass($value);
    public function getClass();
    public function setContext($value);
    public function getContext();
    public function setId($value);
    public function getId();
    public function setLabel($value);
    public function getLabel();
    public function setName($value);
    public function getName();
    public function setTemplate($value);
    public function getTemplate();
    public function setTemplateDirectory($value);
    public function getTemplateDirectory();
    public function hasAttribute($name);
    public function render();
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
abstract class TreeToolbarButton
{
    const DEFAULT_TEMPLATE_DIRECTORY = 'helpers/tree';
    protected $_attributes;
    protected $_template;
    protected $_template_directory;
    public function __construct($label, $id = \null, $name = \null, $class = \null)
    {
    }
    public function __toString()
    {
    }
    public function setAttribute($name, $value)
    {
    }
    public function getAttribute($name)
    {
    }
    public function setAttributes($value)
    {
    }
    public function getAttributes()
    {
    }
    public function setClass($value)
    {
    }
    public function getClass()
    {
    }
    public function setContext($value)
    {
    }
    public function getContext()
    {
    }
    public function setId($value)
    {
    }
    public function getId()
    {
    }
    public function setLabel($value)
    {
    }
    public function getLabel()
    {
    }
    public function setName($value)
    {
    }
    public function getName()
    {
    }
    public function setTemplate($value)
    {
    }
    public function getTemplate()
    {
    }
    public function setTemplateDirectory($value)
    {
    }
    public function getTemplateDirectory()
    {
    }
    public function getTemplateFile($template)
    {
    }
    public function hasAttribute($name)
    {
    }
    public function render()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class TreeToolbarSearchCore extends \TreeToolbarButtonCore implements \ITreeToolbarButton
{
    protected $_template = 'tree_toolbar_search.tpl';
    public function __construct($label, $id, $name = \null, $class = \null)
    {
    }
    public function render()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
interface ITreeToolbarCore
{
    public function __toString();
    public function setActions($value);
    public function getActions();
    public function setContext($value);
    public function getContext();
    public function setData($value);
    public function getData();
    public function setTemplate($value);
    public function getTemplate();
    public function setTemplateDirectory($value);
    public function getTemplateDirectory();
    public function addAction($action);
    public function removeActions();
    public function render();
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class TreeToolbarCore implements \ITreeToolbar
{
    const DEFAULT_TEMPLATE_DIRECTORY = 'helpers/tree';
    const DEFAULT_TEMPLATE = 'tree_toolbar.tpl';
    public function __toString()
    {
    }
    public function setActions($actions)
    {
    }
    public function getActions()
    {
    }
    public function setContext($value)
    {
    }
    public function getContext()
    {
    }
    public function setData($value)
    {
    }
    public function getData()
    {
    }
    public function setTemplate($value)
    {
    }
    public function getTemplate()
    {
    }
    public function setTemplateDirectory($value)
    {
    }
    public function getTemplateDirectory()
    {
    }
    public function getTemplateFile($template)
    {
    }
    /**
     * @param ITreeToolbarButton $action
     *
     * @return TreeToolbar
     * @throws PrestaShopException
     */
    public function addAction($action)
    {
    }
    public function removeActions()
    {
    }
    public function render()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class TreeToolbarLinkCore extends \TreeToolbarButtonCore implements \ITreeToolbarButton
{
    protected $_template = 'tree_toolbar_link.tpl';
    public function __construct($label, $link, $action = \null, $iconClass = \null)
    {
    }
    public function setAction($value)
    {
    }
    public function getAction()
    {
    }
    public function setIconClass($value)
    {
    }
    public function getIconClass()
    {
    }
    public function setLink($value)
    {
    }
    public function getLink()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class Tree
{
    const DEFAULT_TEMPLATE_DIRECTORY = 'helpers/tree';
    const DEFAULT_TEMPLATE = 'tree.tpl';
    const DEFAULT_HEADER_TEMPLATE = 'tree_header.tpl';
    const DEFAULT_NODE_FOLDER_TEMPLATE = 'tree_node_folder.tpl';
    const DEFAULT_NODE_ITEM_TEMPLATE = 'tree_node_item.tpl';
    protected $_attributes;
    protected $_data;
    protected $_data_search;
    protected $_headerTemplate;
    protected $_id_tree;
    protected $_node_folder_template;
    protected $_node_item_template;
    protected $_template;
    public function __construct($id, $data = \null)
    {
    }
    public function __toString()
    {
    }
    public function setActions($value)
    {
    }
    public function getActions()
    {
    }
    public function setAttribute($name, $value)
    {
    }
    public function getAttribute($name)
    {
    }
    public function setAttributes($value)
    {
    }
    public function setIdTree($id_tree)
    {
    }
    public function getIdTree()
    {
    }
    public function getAttributes()
    {
    }
    public function setContext($value)
    {
    }
    public function getContext()
    {
    }
    public function setDataSearch($value)
    {
    }
    public function getDataSearch()
    {
    }
    public function setData($value)
    {
    }
    public function getData()
    {
    }
    public function setHeaderTemplate($value)
    {
    }
    public function getHeaderTemplate()
    {
    }
    public function setId($value)
    {
    }
    public function getId()
    {
    }
    public function setNodeFolderTemplate($value)
    {
    }
    public function getNodeFolderTemplate()
    {
    }
    public function setNodeItemTemplate($value)
    {
    }
    public function getNodeItemTemplate()
    {
    }
    public function setTemplate($value)
    {
    }
    public function getTemplate()
    {
    }
    /**
     * @param $value
     *
     * @return Tree
     */
    public function setTemplateDirectory($value)
    {
    }
    /**
     * @return string
     */
    public function getTemplateDirectory()
    {
    }
    public function getTemplateFile($template)
    {
    }
    public function setNoJS($value)
    {
    }
    public function setTitle($value)
    {
    }
    public function getTitle()
    {
    }
    public function setToolbar($value)
    {
    }
    public function getToolbar()
    {
    }
    public function addAction($action)
    {
    }
    public function removeActions()
    {
    }
    public function render($data = \null)
    {
    }
    public function renderNodes($data = \null)
    {
    }
    public function renderToolbar()
    {
    }
    public function useInput()
    {
    }
    public function useToolbar()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class TreeToolbarSearchCategoriesCore extends \TreeToolbarButtonCore implements \ITreeToolbarButton
{
    protected $_template = 'tree_toolbar_search.tpl';
    public function __construct($label, $id, $name = \null, $class = \null)
    {
    }
    public function render()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class ImageManager
 *
 * This class includes functions for image manipulation
 *
 * @since 1.5.0
 */
class ImageManager
{
    const ERROR_FILE_NOT_EXIST = 1;
    const ERROR_FILE_WIDTH = 2;
    const ERROR_MEMORY_LIMIT = 3;
    /**
    * Generate a cached thumbnail for object lists (eg. carrier, order statuses...etc)
    *
    * @param string $image        Real image filename
    * @param string $cacheImage   Cached filename
    * @param int    $size         Desired size
    * @param string $imageType    Image type
    * @param bool   $disableCache When turned on a timestamp will be added to the image URI to disable the HTTP cache
    * @param bool   $regenerate   When turned on and the file already exist, the file will be regenerated
    *
    *@return string
    */
    public static function thumbnail($image, $cacheImage, $size, $imageType = 'jpg', $disableCache = \true, $regenerate = \false)
    {
    }
    /**
     * @param $cacheImage
     * @param $disableCache
     * @return string
     */
    public static function getThumbnailPath($cacheImage, $disableCache)
    {
    }
    /**
     * Check if memory limit is too long or not
     *
     * @param mixed $image
     *
     * @return bool
     */
    public static function checkImageMemoryLimit($image)
    {
    }
    /**
    * Resize, cut and optimize image
    *
    * @param string $sourceFile        Image object from $_FILE
    * @param string $destinationFile   Destination filename
    * @param int    $destinationWidth  Desired width (optional)
    * @param int    $destinationHeight Desired height (optional)
    * @param string $fileType          Desired file_type (may be override by PS_IMAGE_QUALITY)
    * @param bool   $forceType         Don't override $file_type
    * @param int    $error             Out error code
    * @param int    $targetWidth       Needed by AdminImportController to speed up the import process
    * @param int    $targetHeight      Needed by AdminImportController to speed up the import process
    * @param int    $quality           Needed by AdminImportController to speed up the import process
    * @param int    $sourceWidth       Needed by AdminImportController to speed up the import process
    * @param int    $sourceHeight      Needed by AdminImportController to speed up the import process
    *
    *@return bool Operation result
    */
    public static function resize($sourceFile, $destinationFile, $destinationWidth = \null, $destinationHeight = \null, $fileType = 'jpg', $forceType = \false, &$error = 0, &$targetWidth = \null, &$targetHeight = \null, $quality = 5, &$sourceWidth = \null, &$sourceHeight = \null)
    {
    }
    /**
     * @param     $dstImage
     * @param     $srcImage
     * @param     $dstX
     * @param     $dstY
     * @param     $srcX
     * @param     $srcY
     * @param     $dstW
     * @param     $dstH
     * @param     $srcW
     * @param     $srcH
     * @param int $quality
     *
     * @return bool
     */
    public static function imagecopyresampled(&$dstImage, $srcImage, $dstX, $dstY, $srcX, $srcY, $dstW, $dstH, $srcW, $srcH, $quality = 3)
    {
    }
    /**
     * Check if file is a real image
     *
     * @param string $filename     File path to check
     * @param string $fileMimeType File known mime type (generally from $_FILES)
     * @param array  $mimeTypeList Allowed MIME types
     *
     * @return bool
     */
    public static function isRealImage($filename, $fileMimeType = \null, $mimeTypeList = \null)
    {
    }
    /**
     * Check if image file extension is correct
     *
     * @param string     $filename Real filename
     * @param array|null $authorizedExtensions
     *
     * @return bool True if it's correct
     */
    public static function isCorrectImageFileExt($filename, $authorizedExtensions = \null)
    {
    }
    /**
     * Validate image upload (check image type and weight)
     *
     * @param array $file        Upload $_FILE value
     * @param int   $maxFileSize Maximum upload size
     *
     * @return bool|string Return false if no error encountered
     */
    public static function validateUpload($file, $maxFileSize = 0, $types = \null)
    {
    }
    /**
     * Validate icon upload
     *
     * @param array $file        Upload $_FILE value
     * @param int   $maxFileSize Maximum upload size
     *
     * @return bool|string Return false if no error encountered
     */
    public static function validateIconUpload($file, $maxFileSize = 0)
    {
    }
    /**
     * Cut image
     *
     * @param array  $srcFile   Origin filename
     * @param string $dstFile   Destination filename
     * @param int    $dstWidth  Desired width
     * @param int    $dstHeight Desired height
     * @param string $fileType
     * @param int    $dstX
     * @param int    $dstY
     *
     * @return bool Operation result
     */
    public static function cut($srcFile, $dstFile, $dstWidth = \null, $dstHeight = \null, $fileType = 'jpg', $dstX = 0, $dstY = 0)
    {
    }
    /**
     * Create an image with GD extension from a given type
     *
     * @param string $type
     * @param string $filename
     * @return resource
     */
    public static function create($type, $filename)
    {
    }
    /**
     * Create an empty image with white background
     *
     * @param int $width
     * @param int $height
     * @return resource
     */
    public static function createWhiteImage($width, $height)
    {
    }
    /**
     * Generate and write image
     *
     * @param string $type
     * @param resource $resource
     * @param string $filename
     *
     * @return bool
     */
    public static function write($type, $resource, $filename)
    {
    }
    /**
     * Return the mime type by the file extension
     *
     * @param string $fileName
     *
     * @return string
     */
    public static function getMimeTypeByExtension($fileName)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Category
 */
class Category extends \ObjectModel
{
    public $id;
    /** @var int category ID */
    public $id_category;
    /** @var string Name */
    public $name;
    /** @var bool Status for display */
    public $active = 1;
    /** @var  int category position */
    public $position;
    /** @var string Description */
    public $description;
    /** @var int Parent category ID */
    public $id_parent;
    /** @var int default Category id */
    public $id_category_default;
    /** @var int Parents number */
    public $level_depth;
    /** @var int Nested tree model "left" value */
    public $nleft;
    /** @var int Nested tree model "right" value */
    public $nright;
    /** @var string string used in rewrited URL */
    public $link_rewrite;
    /** @var string Meta title */
    public $meta_title;
    /** @var string Meta keywords */
    public $meta_keywords;
    /** @var string Meta description */
    public $meta_description;
    /** @var string Object creation date */
    public $date_add;
    /** @var string Object last modification date */
    public $date_upd;
    /** @var bool is Category Root */
    public $is_root_category;
    /** @var int */
    public $id_shop_default;
    public $groupBox;
    protected static $_links = array();
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'category', 'primary' => 'id_category', 'multilang' => \true, 'multilang_shop' => \true, 'fields' => array(
        'nleft' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'),
        'nright' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'),
        'level_depth' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'),
        'active' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool', 'required' => \true),
        'id_parent' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'),
        'id_shop_default' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'),
        'is_root_category' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'position' => array('type' => self::TYPE_INT),
        'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'),
        'date_upd' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'),
        /* Lang fields */
        'name' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isCatalogName', 'required' => \true, 'size' => 128),
        'link_rewrite' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isLinkRewrite', 'required' => \true, 'size' => 128),
        'description' => array('type' => self::TYPE_HTML, 'lang' => \true, 'validate' => 'isCleanHtml'),
        'meta_title' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'size' => 128),
        'meta_description' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'size' => 255),
        'meta_keywords' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'size' => 255),
    ));
    /** @var string id_image is the category ID when an image exists and 'default' otherwise */
    public $id_image = 'default';
    protected $webserviceParameters = array('objectsNodeName' => 'categories', 'hidden_fields' => array('nleft', 'nright', 'groupBox'), 'fields' => array('id_parent' => array('xlink_resource' => 'categories'), 'level_depth' => array('setter' => \false), 'nb_products_recursive' => array('getter' => 'getWsNbProductsRecursive', 'setter' => \false)), 'associations' => array('categories' => array('getter' => 'getChildrenWs', 'resource' => 'category'), 'products' => array('getter' => 'getProductsWs', 'resource' => 'product')));
    /**
     * CategoryCore constructor.
     *
     * @param null $idCategory
     * @param null $idLang
     * @param null $idShop
     */
    public function __construct($idCategory = \null, $idLang = \null, $idShop = \null)
    {
    }
    /**
     * Get the clean description without HTML tags and slashes
     *
     * @param string $description Category description with HTML
     *
     * @return string Category description without HTML
     */
    public static function getDescriptionClean($description)
    {
    }
    /**
     * Adds current Category as a new Object to the database
     *
     * @param bool $autoDate   Automatically set `date_upd` and `date_add` columns
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Indicates whether the Category has been successfully added
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function add($autoDate = \true, $nullValues = \false)
    {
    }
    /**
     * Updates the current object in the database
     *
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Indicates whether the CartRule has been successfully updated
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function update($nullValues = \false)
    {
    }
    /**
     * Toggles the `active` flag
     *
     * @return bool Indicates whether the status was successfully toggled
     */
    public function toggleStatus()
    {
    }
    /**
     * Recursive scan of subcategories
     *
     * @param int    $maxDepth         Maximum depth of the tree (i.e. 2 => 3 levels depth)
     * @param int    $currentDepth     specify the current depth in the tree (don't use it, only for recursive calls!)
     * @param int    $idLang           Specify the id of the language used
     * @param array  $excludedIdsArray Specify a list of IDs to exclude of results
     *
     * @param string $format
     *
     * @return array Subcategories lite tree
     */
    public function recurseLiteCategTree($maxDepth = 3, $currentDepth = 0, $idLang = \null, $excludedIdsArray = \null, $format = 'default')
    {
    }
    /**
     * Recursively add specified category childs to $to_delete array
     *
     * @param array &$toDelete  Array reference where categories ID will be saved
     * @param int   $idCategory Parent category ID
     */
    protected function recursiveDelete(&$toDelete, $idCategory)
    {
    }
    /**
     * Delete this object
     * Skips the deletion procedure of Category and directly calls
     * the delete() method of ObjectModel instead
     *
     * @return bool Indicates whether this Category was successfully deleted
     */
    public function deleteLite()
    {
    }
    /**
     * Deletes current CartRule from the database
     *
     * @return bool `true` if successfully deleted
     * @throws PrestaShopException
     */
    public function delete()
    {
    }
    /**
     * Delete selected categories from database
     *
     * @param array $idCategories Category IDs to delete
     *
     * @return bool Deletion result
     */
    public function deleteSelection($idCategories)
    {
    }
    /**
     * Get the depth level for the category
     *
     * @return int Depth level
     * @throws PrestaShopException
     */
    public function calcLevelDepth()
    {
    }
    /**
     * Re-calculate the values of all branches of the nested tree
     */
    public static function regenerateEntireNtree()
    {
    }
    /**
     * @param $categories
     * @param $idCategory
     * @param $n
     *
     * @return void
     *
     * @deprecated 1.7.0
     */
    protected static function _subTree(&$categories, $idCategory, &$n)
    {
    }
    /**
     *
     *
     * @param $categories
     * @param $idCategory
     * @param $n
     *
     * @return bool Indicates whether the sub tree of categories has been successfully updated
     */
    protected static function subTree(&$categories, $idCategory, &$n)
    {
    }
    /**
     * Updates `level_depth` for all children of the given `id_category`
     *
     * @param int $idParentCategory Parent Category ID
     *
     * @throws PrestaShopException
     */
    public function recalculateLevelDepth($idParentCategory)
    {
    }
    /**
     * Return available categories
     *
     * @param bool|int $idLang    Language ID
     * @param bool     $active    Only return active categories
     * @param bool     $order     Order the results
     * @param string   $sqlFilter Additional SQL clause(s) to filter results
     * @param string   $orderBy   Change the default order by
     * @param string   $limit     Set the limit
     *                            Both the offset and limit can be given
     *
     * @return array Categories
     */
    public static function getCategories($idLang = \false, $active = \true, $order = \true, $sqlFilter = '', $orderBy = '', $limit = '')
    {
    }
    /**
     * @param int      $idRootCategory     ID of root Category
     * @param int|bool $idLang             Language ID
     *                                     `false` if language filter should not be applied
     * @param bool     $active             Only return active categories
     * @param null     $groups
     * @param bool     $useShopRestriction Restrict to current Shop
     * @param string   $sqlFilter          Additional SQL clause(s) to filter results
     * @param string   $orderBy            Change the default order by
     * @param string   $limit              Set the limit
     *                                     Both the offset and limit can be given
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource Array with `id_category` and `name`
     */
    public static function getAllCategoriesName($idRootCategory = \null, $idLang = \false, $active = \true, $groups = \null, $useShopRestriction = \true, $sqlFilter = '', $orderBy = '', $limit = '')
    {
    }
    /**
     * Get nested categories
     *
     * @param int|null $idRootCategory     Root Category ID
     * @param int|bool $idLang             Language ID
     *                                     `false` if language filter should not be used
     * @param bool     $active             Whether the category must be active
     * @param null     $groups
     * @param bool     $useShopRestriction Restrict to current Shop
     * @param string   $sqlFilter          Additional SQL clause(s) to filter results
     * @param string   $orderBy            Change the default order by
     * @param string   $limit              Set the limit
     *                                     Both the offset and limit can be given
     *
     * @return array|null
     */
    public static function getNestedCategories($idRootCategory = \null, $idLang = \false, $active = \true, $groups = \null, $useShopRestriction = \true, $sqlFilter = '', $orderBy = '', $limit = '')
    {
    }
    /**
     * Get a simple list of categories
     *
     * @param int $idLang Language ID
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource Return array with `id_category` and `name` for every Category
     */
    public static function getSimpleCategories($idLang)
    {
    }
    /**
     * Get Shop ID
     *
     * @return int
     *
     * @deprecated 1.7.0
     */
    public function getShopID()
    {
    }
    /**
     * Return current category childs
     *
     * @param int  $idLang Language ID
     * @param bool $active return only active categories
     *
     * @return array Categories
     */
    public function getSubCategories($idLang, $active = \true)
    {
    }
    /**
     * Returns category products
     *
     * @param int          $idLang               Language ID
     * @param int          $p                    Page number
     * @param int          $n                    Number of products per page
     * @param string|null  $orderyBy             ORDER BY column
     * @param string|null  $orderWay             Order way
     * @param bool         $getTotal             If set to true, returns the total number of results only
     * @param bool         $active               If set to true, finds only active products
     * @param bool         $random               If true, sets a random filter for returned products
     * @param int          $randomNumberProducts Number of products to return if random is activated
     * @param bool         $checkAccess          If set to `true`, check if the current customer
     *                                           can see the products from this category
     * @param Context|null $context              Instance of Context
     *
     * @return array|int|false Products, number of products or false (no access)
     * @throws PrestaShopDatabaseException
     */
    public function getProducts($idLang, $p, $n, $orderyBy = \null, $orderWay = \null, $getTotal = \false, $active = \true, $random = \false, $randomNumberProducts = 1, $checkAccess = \true, \Context $context = \null)
    {
    }
    /**
     * Return main categories
     *
     * @param int  $idLang Language ID
     * @param bool $active return only active categories
     *
     * @return array categories
     */
    public static function getHomeCategories($idLang, $active = \true, $idShop = \false)
    {
    }
    /**
     * Get root Category object
     * Returns the top Category if there are multiple root Categories
     *
     * @param int|null  $idLang Language ID
     * @param Shop|null $shop   Shop object
     *
     * @return Category object
     */
    public static function getRootCategory($idLang = \null, \Shop $shop = \null)
    {
    }
    /**
     * Get children of the given Category
     *
     * @param int  $idParent Parent Category ID
     * @param int  $idLang   Language ID
     * @param bool $active   Active children only
     * @param bool $idShop   Shop ID
     *
     * @return array Children of given Category
     */
    public static function getChildren($idParent, $idLang, $active = \true, $idShop = \false)
    {
    }
    /**
     * Check if the given Category has child categories
     *
     * @param int  $idParent Parent Category ID
     * @param int  $idLang   Language ID
     * @param bool $active   Active children only
     * @param bool $idShop   Shop ID
     *
     * @return bool Indicates whether the given Category has children
     */
    public static function hasChildren($idParent, $idLang, $active = \true, $idShop = \false)
    {
    }
    /**
     * Return an array of all children of the current category
     *
     * @param int $idLang Language ID
     *
     * @return PrestaShopCollection Collection of Category
     */
    public function getAllChildren($idLang = \null)
    {
    }
    /**
     * Return an ordered array of all parents of the current category
     *
     * @param int $idLang
     *
     * @return PrestaShopCollection Collection of Category
     */
    public function getAllParents($idLang = \null)
    {
    }
    /**
     * This method allow to return children categories with the number of sub children selected for a product
     *
     * @param int  $idParent         Parent Category ID
     * @param int  $selectedCategory Selected SubCategory ID
     * @param int  $idLang           Language ID
     * @param Shop $shop             Shop ID
     * @param bool $useShopContext   Limit to current Shop
     *
     * @return array
     * @internal param int $id_product Product ID
     */
    public static function getChildrenWithNbSelectedSubCat($idParent, $selectedCategory, $idLang, \Shop $shop = \null, $useShopContext = \true)
    {
    }
    /**
     * Copy products from a category to another
     *
     * @param int  $idOld Source category ID
     * @param bool $idNew Destination category ID
     *
     * @return bool Duplication result
     */
    public static function duplicateProductCategories($idOld, $idNew)
    {
    }
    /**
     * Check if category can be moved in another one.
     * The category cannot be moved in a child category.
     *
     * @param int $idCategory Current category
     * @param int $idParent   Parent candidate
     *
     * @return bool Parent validity
     */
    public static function checkBeforeMove($idCategory, $idParent)
    {
    }
    /**
     * Get the rewrite link of the given Category
     *
     * @param int $idCategory Category ID
     * @param int $idLang     Language ID
     *
     * @return bool|mixed
     */
    public static function getLinkRewrite($idCategory, $idLang)
    {
    }
    /**
     * Get link to this category
     *
     * @param Link|null $link   Link instance
     * @param int|null  $idLang Language ID
     *
     * @return string FO URL to this Category
     */
    public function getLink(\Link $link = \null, $idLang = \null)
    {
    }
    /**
     * Get category name in given Language
     *
     * @param int|null $idLang Language ID
     *
     * @return string Category name
     */
    public function getName($idLang = \null)
    {
    }
    /**
     * Light back office search for categories
     *
     * @param int    $idLang       Language ID
     * @param string $query        Searched string
     * @param bool   $unrestricted Allows search without lang and includes first category and exact match
     * @param bool   $skipCache    Skip the Cache
     *
     * @return array Corresponding categories
     * @throws PrestaShopDatabaseException
     */
    public static function searchByName($idLang, $query, $unrestricted = \false, $skipCache = \false)
    {
    }
    /**
     * Retrieve category by name and parent category id
     *
     * @param int    $idLang           Language ID
     * @param string $categoryName     Searched category name
     * @param int    $idParentCategory parent category ID
     *
     * @return array Corresponding category
     */
    public static function searchByNameAndParentCategoryId($idLang, $categoryName, $idParentCategory)
    {
    }
    /**
     * Search with paths for Categories
     *
     * @param int    $idLang         Language ID
     * @param string $path           Path of category
     * @param bool   $objectToCreate a category
     * @param bool $methodToCreate   a category
     *
     * @return array Corresponding categories
     */
    public static function searchByPath($idLang, $path, $objectToCreate = \false, $methodToCreate = \false)
    {
    }
    /**
     * Get Each parent category of this category until the root category
     *
     * @param int $idLang Language ID
     *
     * @return array Corresponding categories
     */
    public function getParentsCategories($idLang = \null)
    {
    }
    /**
     * Specify if a category already in base
     *
     * @param int $idCategory Category id
     *
     * @return bool
     */
    public static function categoryExists($idCategory)
    {
    }
    /**
     * Clean Category Groups
     *
     * @return bool Indicated whether the cleanup was successful
     */
    public function cleanGroups()
    {
    }
    /**
     * Remove associated products
     *
     * @return bool Indicates whether the cleanup was successful
     */
    public function cleanAssoProducts()
    {
    }
    /**
     * Add Category groups
     *
     * @param $groups
     */
    public function addGroups($groups)
    {
    }
    /**
     * Get Category groups
     *
     * @return array|null
     */
    public function getGroups()
    {
    }
    /**
     * Add group if it does not exist
     *
     * @param int $idGroup Group ID
     *
     * @return bool|void
     */
    public function addGroupsIfNoExist($idGroup)
    {
    }
    /**
     * checkAccess return true if id_customer is in a group allowed to see this category.
     *
     * @param mixed $idCustomer
     *
     * @return bool true if access allowed for customer $id_customer
     */
    public function checkAccess($idCustomer)
    {
    }
    /**
     * Update customer groups associated to the object
     *
     * @param array $list groups
     */
    public function updateGroup($list)
    {
    }
    /**
     * @param $idGroup
     *
     * @return bool
     */
    public static function setNewGroupForHome($idGroup)
    {
    }
    /**
     * Update the position of the current Category
     *
     * @param bool $way Indicates whether the Category should move up (`false`) or down (`true`)
     *
     * @param int $position Current Position
     *
     * @return bool
     */
    public function updatePosition($way, $position)
    {
    }
    /**
     * cleanPositions keep order of category in $id_category_parent,
     * but remove duplicate position. Should not be used if positions
     * are clean at the beginning !
     *
     * @param mixed $idCategoryParent
     *
     * @return bool true if succeed
     */
    public static function cleanPositions($idCategoryParent = \null)
    {
    }
    /**
     * Returns the number of categories + 1 having $idCategoryParent as parent
     *
     * @param int $idCategoryParent The parent category
     * @param int $idShop           Shop ID
     *
     * @return int Number of categories + 1 having $idCategoryParent as parent
     *
     * @todo     rename that function to make it understandable (getNewLastPosition for example)
     */
    public static function getLastPosition($idCategoryParent, $idShop)
    {
    }
    /**
     * @see self::getUrlRewriteInformation()
     * @deprecated 1.7.0
     */
    public static function getUrlRewriteInformations($idCategory)
    {
    }
    /**
     * Get URL Rewrite information
     *
     * @param $idCategory
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     *
     * @since 1.7.0
     */
    public static function getUrlRewriteInformation($idCategory)
    {
    }
    /**
     * Return `nleft` and `nright` fields for a given category
     *
     * @param int $id
     * @return array
     *
     * @since 1.5.0
     */
    public static function getInterval($id)
    {
    }
    /**
     * Check if current category is a child of shop root category
     *
     * @param Shop $shop
     * @return bool
     *
     * @since 1.5.0
     */
    public function inShop(\Shop $shop = \null)
    {
    }
    /**
     * Check if current category is a child of shop root category
     *
     * @param int  $idCategory Category ID
     * @param Shop $shop       Shop object
     *
     * @return bool Indicates whether the current category is a child of the Shop root category
     *
     * @since 1.5.0
     */
    public static function inShopStatic($idCategory, \Shop $shop = \null)
    {
    }
    /**
     * Get Children for the webservice
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public function getChildrenWs()
    {
    }
    /**
     * Get Products for webservice
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public function getProductsWs()
    {
    }
    /**
     * Search for another Category with the same parent and the same position
     *
     * @return array first Category found
     */
    public function getDuplicatePosition()
    {
    }
    /**
     * Recursively get amount of Products for the webservice
     *
     * @return false|int|null|string
     */
    public function getWsNbProductsRecursive()
    {
    }
    /**
     * @see self::getCategoryInformation()
     *
     * @deprecated 1.7.0
     */
    public static function getCategoryInformations($idsCategory, $idLang = \null)
    {
    }
    /**
     * Get Category information
     *
     * @param array $idsCategory Category IDs
     * @param int   $idLang      Language ID
     *
     * @return array|false       Array with Category information
     *                           `false` if no Category found
     *
     * @since 1.7.0
     */
    public static function getCategoryInformation($idsCategory, $idLang = \null)
    {
    }
    /**
     * Is parent Category available
     *
     * @return bool Indicates whether the parent Category is available
     */
    public function isParentCategoryAvailable()
    {
    }
    /**
     * Add association between shop and categories
     *
     * @param int $idShop Shop ID
     *
     * @return bool Indicates whether the association was successfully made
     */
    public function addShop($idShop)
    {
    }
    /**
     * Get root Categories
     *
     * @param int|null $idLang Language ID
     * @param bool     $active Whether the root Category must be active
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource Root Categories
     */
    public static function getRootCategories($idLang = \null, $active = \true)
    {
    }
    /**
     * Get Categories without parent
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource Categories without parent
     */
    public static function getCategoriesWithoutParent()
    {
    }
    /**
     * Is Root Category for a Shop
     *
     * @return bool Indicates whether the current Category is a Root category for a Shop
     */
    public function isRootCategoryForAShop()
    {
    }
    /**
     * Get Top Category
     *
     * @param int|null $idLang Language ID
     *
     * @return Category Top Category
     */
    public static function getTopCategory($idLang = \null)
    {
    }
    /**
     * Add position to current Category
     *
     * @param int      $position Position
     * @param int|null $idShop   Shop ID
     *
     * @return bool Indicates whether the position was successfully added
     */
    public function addPosition($position, $idShop = \null)
    {
    }
    /**
     * Get Shops by Category ID
     *
     * @param int $idCategory Category ID
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource Array with Shop IDs
     */
    public static function getShopsByCategory($idCategory)
    {
    }
    /**
     * Update Categories for a shop
     *
     * @param string $categories Categories list to associate a shop
     * @param string $idShop     Categories list to associate a shop
     *
     * @return array|false Update/insertion result
     *                     `false` if not successfully inserted/updated
     */
    public static function updateFromShop($categories, $idShop)
    {
    }
    /**
     * Delete category from shop $id_shop
     *
     * @param int $idShop Shop ID
     *
     * @return bool Indicates whether the current Category was successfully removed from the Shop
     */
    public function deleteFromShop($idShop)
    {
    }
    /**
     * Deletes all Categories from the Shop ID
     *
     * @return bool Indicates whether the Categories have been successfully removed
     */
    public static function deleteCategoriesFromShop($idShop)
    {
    }
    /**
     * Add some categories to a shop
     *
     * @param array $categories
     *
     * @return bool Indicates whether the Categories were successfully added to the given Shop
     */
    public static function addToShop(array $categories, $idShop)
    {
    }
    /**
     * Does the current Category exists in the given Shop
     *
     * @param int $idShop Shop ID
     *
     * @return bool Indicates whether the current Category exists in the given Shop
     */
    public function existsInShop($idShop)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Access
 */
class Access extends \ObjectModel
{
    /** @var int Profile id which address belongs to */
    public $id_profile = \null;
    /** @var int AuthorizationRole id which address belongs to */
    public $id_authorization_role = \null;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'access', 'primary' => 'id_profile', 'fields' => array('id_profile' => array('type' => self::TYPE_INT, 'validate' => 'isNullOrUnsignedId', 'copy_post' => \false), 'id_authorization_role' => array('type' => self::TYPE_INT, 'validate' => 'isNullOrUnsignedId', 'copy_post' => \false)));
    /**
     * Is access granted to this Role?
     *
     * @param string $role      Role name ("Superadministrator", "sales", "translator", etc.)
     * @param int    $idProfile Profile ID
     *
     * @return bool Whether access is granted
     * @throws Exception
     */
    public static function isGranted($role, $idProfile)
    {
    }
    /**
     * Get all roles for the Profile ID
     *
     * @param int $idProfile Profile ID
     *
     * @return array Roles
     */
    public static function getRoles($idProfile)
    {
    }
    /**
     * Find Tab ID by slug
     *
     * @param string $authSlug Slug
     *
     * @return string Tab ID
     * @todo: Find out if we should return an int instead. (breaking change)
     */
    public static function findIdTabByAuthSlug($authSlug)
    {
    }
    /**
     * Find slug by Tab ID
     *
     * @param int $idTab Tab ID
     *
     * @return string Full module slug
     */
    public static function findSlugByIdTab($idTab)
    {
    }
    /**
     * Find slug by Parent Tab ID
     *
     * @param int $idParentTab Tab ID
     *
     * @return string Full module slug
     */
    public static function findSlugByIdParentTab($idParentTab)
    {
    }
    /**
     * Find slug by Module ID
     *
     * @param int $idModule Module ID
     *
     * @return string Full module slug
     */
    public static function findSlugByIdModule($idModule)
    {
    }
    /**
     * Sluggify tab
     *
     * @param string $tab           Tab class name
     * @param string $authorization 'CREATE'|'READ'|'UPDATE'|'DELETE'
     *
     * @return string Full slug for tab
     */
    public static function sluggifyTab($tab, $authorization = '')
    {
    }
    /**
     * Sluggify module
     *
     * @param string $module        Module name
     * @param string $authorization 'CREATE'|'READ'|'UPDATE'|'DELETE'
     *
     * @return string Full slug for module
     */
    public static function sluggifyModule($module, $authorization = '')
    {
    }
    /**
     * Get legacy authorization
     *
     * @param string $legacyAuth Legacy authorization
     *
     * @return bool|string|array Authorization
     */
    public static function getAuthorizationFromLegacy($legacyAuth)
    {
    }
    /**
     * Add access
     *
     * @param int $idProfile Profile ID
     * @param int $idRole    Role ID
     *
     * @return string Whether access has been successfully granted ("ok", "error")
     */
    public function addAccess($idProfile, $idRole)
    {
    }
    /**
     * Remove access
     *
     * @param int $idProfile Profile ID
     * @param int $idRole    Role ID
     *
     * @return string Whether access has been successfully removed ("ok", "error")
     */
    public function removeAccess($idProfile, $idRole)
    {
    }
    /**
     * Add module access
     *
     * @param int $idProfile Profile ID
     * @param int $idRole    Role ID
     *
     * @return string Whether module access has been successfully granted ("ok", "error")
     */
    public function addModuleAccess($idProfile, $idRole)
    {
    }
    /**
     *
     * @param int $idProfile
     * @param int $idRole
     * @return string 'ok'|'error'
     */
    public function removeModuleAccess($idProfile, $idRole)
    {
    }
    /**
     * Update legacy access
     *
     * @param int    $idProfile     Profile ID
     * @param int    $idTab         Tab ID
     * @param string $lgcAuth       Legacy authorization
     * @param int    $enabled       Whether access should be granted
     * @param int    $addFromParent Child from parents
     *
     * @return string Whether legacy access has been successfully updated ("ok", "error")
     * @throws Exception
     */
    public function updateLgcAccess($idProfile, $idTab, $lgcAuth, $enabled, $addFromParent = 0)
    {
    }
    /**
     * Update (legacy) Module access
     *
     * @param int    $idProfile Profile ID
     * @param int    $idModule  Module ID
     * @param string $lgcAuth   Legacy authorization
     * @param int    $enabled   Whether module access should be granted
     *
     * @return string Whether module access has been succesfully changed ("ok", "error")
     */
    public function updateLgcModuleAccess($idProfile, $idModule, $lgcAuth, $enabled)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class ConnectionsSource
 */
class ConnectionsSource extends \ObjectModel
{
    public $id_connections;
    public $http_referer;
    public $request_uri;
    public $keywords;
    public $date_add;
    public static $uri_max_size = 255;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'connections_source', 'primary' => 'id_connections_source', 'fields' => array('id_connections' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'http_referer' => array('type' => self::TYPE_STRING, 'validate' => 'isAbsoluteUrl'), 'request_uri' => array('type' => self::TYPE_STRING, 'validate' => 'isUrl'), 'keywords' => array('type' => self::TYPE_STRING, 'validate' => 'isMessage'), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate', 'required' => \true)));
    /**
     * Adds current ConnectionsSource as a new Object to the database
     *
     * @param bool $autoDate    Automatically set `date_upd` and `date_add` columns
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Indicates whether the ConnectionsSource has been successfully added
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function add($autoDate = \true, $nullValues = \false)
    {
    }
    public static function logHttpReferer(\Cookie $cookie = \null)
    {
    }
    /**
     * Get Order sources
     *
     * @param int $idOrder Order ID
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public static function getOrderSources($idOrder)
    {
    }
}
/**
 * Class PhpEncryption engine for openSSL 1.0.1+
 */
class PhpEncryptionEngine
{
    protected $key;
    /**
     * PhpEncryptionCore constructor.
     *
     * @param string $hexString A string that only contains hexadecimal characters
     *                          Bother upper and lower case are allowed
     */
    public function __construct($hexString)
    {
    }
    /**
     * Encrypt the plaintext
     *
     * @param string $plaintext Plaintext
     *
     * @return string Cipher text
     */
    public function encrypt($plaintext)
    {
    }
    /**
     * Decrypt the cipher text
     *
     * @param string $cipherText Cipher text
     *
     * @return bool|string Plaintext
     *                     `false` if unable to decrypt
     * @throws Exception
     */
    public function decrypt($cipherText)
    {
    }
    /**
     * @param $header
     * @param $bytes
     * @return string
     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
     */
    public static function saveBytesToChecksummedAsciiSafeString($header, $bytes)
    {
    }
    /**
     * @return string
     */
    public static function createNewRandomKey()
    {
    }
    /**
     * @param $hexString
     * @return Key
     */
    public static function loadFromAsciiSafeString($hexString)
    {
    }
    /**
     * @return string
     * @throws Exception
     *
     * @see https://github.com/paragonie/random_compat/blob/v1.4.1/lib/random_bytes_openssl.php
     * @see https://github.com/paragonie/random_compat/blob/v1.4.1/lib/random_bytes_mcrypt.php
     */
    public static function randomCompat()
    {
    }
    /**
     * @param $buf
     * @return string
     */
    public static function saveToAsciiSafeString($buf)
    {
    }
}
/**
 * class ProductAssembler
 */
class ProductAssembler
{
    /**
     * ProductAssemblerCore constructor.
     *
     * @param \Context $context
     */
    public function __construct(\Context $context)
    {
    }
    /**
     * Assemble Product
     *
     * @param array $rawProduct
     *
     * @return mixed
     */
    public function assembleProduct(array $rawProduct)
    {
    }
}
class CustomerPersister
{
    public function __construct(\Context $context, \PrestaShop\PrestaShop\Core\Crypto\Hashing $crypto, \Symfony\Contracts\Translation\TranslatorInterface $translator, $guest_allowed)
    {
    }
    public function getErrors()
    {
    }
    public function save(\Customer $customer, $clearTextPassword, $newPassword = '')
    {
    }
}
interface FormInterface extends \PrestaShop\PrestaShop\Core\Foundation\Templating\RenderableInterface
{
    public function setAction($action);
    public function fillWith(array $params = []);
    public function submit();
    public function getErrors();
    public function hasErrors();
    public function render(array $extraVariables = []);
    public function setTemplate($template);
}
abstract class AbstractForm implements \FormInterface
{
    protected $translator;
    protected $constraintTranslator;
    protected $action;
    protected $template;
    protected $formatter;
    protected $formFields = [];
    protected $errors = ['' => []];
    public function __construct(\Smarty $smarty, \Symfony\Contracts\Translation\TranslatorInterface $translator, \FormFormatterInterface $formatter)
    {
    }
    public function getFormatter()
    {
    }
    public function setAction($action)
    {
    }
    public function getAction()
    {
    }
    public function getErrors()
    {
    }
    public function hasErrors()
    {
    }
    public abstract function getTemplateVariables();
    public function setTemplate($template)
    {
    }
    public function getTemplate()
    {
    }
    public function render(array $extraVariables = [])
    {
    }
    public function getProxy()
    {
    }
    public function validate()
    {
    }
    public function fillWith(array $params = [])
    {
    }
    public function getField($field_name)
    {
    }
    public function getValue($field_name)
    {
    }
    public function setValue($field_name, $value)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
interface FormFormatterInterface
{
    public function getFormat();
}
class CustomerAddressFormatter implements \FormFormatterInterface
{
    public function __construct(\Country $country, \Symfony\Contracts\Translation\TranslatorInterface $translator, array $availableCountries)
    {
    }
    public function setCountry(\Country $country)
    {
    }
    public function getCountry()
    {
    }
    public function getFormat()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class FormField
{
    public function toArray()
    {
    }
    public function setName($name)
    {
    }
    public function getName()
    {
    }
    public function setType($type)
    {
    }
    public function getType()
    {
    }
    public function setRequired($required)
    {
    }
    public function isRequired()
    {
    }
    public function setLabel($label)
    {
    }
    public function getLabel()
    {
    }
    public function setValue($value)
    {
    }
    public function getValue()
    {
    }
    public function setAvailableValues(array $availableValues)
    {
    }
    public function getAvailableValues()
    {
    }
    public function addAvailableValue($availableValue, $label = \null)
    {
    }
    public function setMaxLength($max)
    {
    }
    public function getMaxLength()
    {
    }
    public function setErrors(array $errors)
    {
    }
    public function getErrors()
    {
    }
    public function addError($errorString)
    {
    }
    public function setConstraints(array $constraints)
    {
    }
    public function addConstraint($constraint)
    {
    }
    public function getConstraints()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class CustomerAddressPersister
{
    public function __construct(\Customer $customer, \Cart $cart, $token)
    {
    }
    public function getToken()
    {
    }
    public function save(\Address $address, $token)
    {
    }
    public function delete(\Address $address, $token)
    {
    }
}
class CustomerFormatter implements \FormFormatterInterface
{
    public function __construct(\Symfony\Contracts\Translation\TranslatorInterface $translator, \Language $language)
    {
    }
    public function setAskForBirthdate($ask_for_birthdate)
    {
    }
    public function setAskForPartnerOptin($ask_for_partner_optin)
    {
    }
    public function setPartnerOptinRequired($partner_optin_is_required)
    {
    }
    public function setAskForPassword($ask_for_password)
    {
    }
    public function setAskForNewPassword($ask_for_new_password)
    {
    }
    public function setPasswordRequired($password_is_required)
    {
    }
    public function getFormat()
    {
    }
}
/**
 * StarterTheme TODO: B2B fields, Genders, CSRF.
 */
class CustomerForm extends \AbstractForm
{
    protected $template = 'customer/_partials/customer-form.tpl';
    public function __construct(\Smarty $smarty, \Context $context, \Symfony\Contracts\Translation\TranslatorInterface $translator, \CustomerFormatter $formatter, \CustomerPersister $customerPersister, array $urls)
    {
    }
    public function setGuestAllowed($guest_allowed = \true)
    {
    }
    public function fillFromCustomer(\Customer $customer)
    {
    }
    /**
     * @return \Customer
     */
    public function getCustomer()
    {
    }
    public function validate()
    {
    }
    protected function validateFieldsLengths()
    {
    }
    /**
     * @param $fieldName
     * @param $maximumLength
     * @param $violationMessage
     */
    protected function validateFieldLength($fieldName, $maximumLength, $violationMessage)
    {
    }
    /**
     * @return mixed
     */
    protected function getEmailMaxLengthViolationMessage()
    {
    }
    protected function getFirstNameMaxLengthViolationMessage()
    {
    }
    protected function getLastNameMaxLengthViolationMessage()
    {
    }
    public function submit()
    {
    }
    public function getTemplateVariables()
    {
    }
}
/**
 * StarterTheme TODO: FIXME:
 * In the old days, when updating an address, we actually:
 * - checked if the address was used by an order
 * - if so, just mark it as deleted and create a new one
 * - otherwise, update it like a normal entity
 * I *think* this is not necessary now because the invoicing thing
 * does its own historization. But this should be checked more thoroughly.
 */
class CustomerAddressForm extends \AbstractForm
{
    protected $template = 'customer/_partials/address-form.tpl';
    public function __construct(\Smarty $smarty, \Language $language, \Symfony\Contracts\Translation\TranslatorInterface $translator, \CustomerAddressPersister $persister, \CustomerAddressFormatter $formatter)
    {
    }
    public function loadAddressById($id_address)
    {
    }
    public function fillWith(array $params = [])
    {
    }
    public function validate()
    {
    }
    public function submit()
    {
    }
    public function getAddress()
    {
    }
    public function getTemplateVariables()
    {
    }
}
class CustomerLoginForm extends \AbstractForm
{
    protected $template = 'customer/_partials/login-form.tpl';
    public function __construct(\Smarty $smarty, \Context $context, \Symfony\Contracts\Translation\TranslatorInterface $translator, \CustomerLoginFormatter $formatter, array $urls)
    {
    }
    public function submit()
    {
    }
    public function getTemplateVariables()
    {
    }
}
class CustomerLoginFormatter implements \FormFormatterInterface
{
    public function __construct(\Symfony\Contracts\Translation\TranslatorInterface $translator)
    {
    }
    public function getFormat()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Referrer
 */
class Referrer extends \ObjectModel
{
    public $id_shop;
    public $name;
    public $passwd;
    public $http_referer_regexp;
    public $http_referer_like;
    public $request_uri_regexp;
    public $request_uri_like;
    public $http_referer_regexp_not;
    public $http_referer_like_not;
    public $request_uri_regexp_not;
    public $request_uri_like_not;
    public $base_fee;
    public $percent_fee;
    public $click_fee;
    public $date_add;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'referrer', 'primary' => 'id_referrer', 'fields' => array('name' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'required' => \true, 'size' => 64), 'passwd' => array('type' => self::TYPE_STRING, 'validate' => 'isPasswd', 'size' => 32), 'http_referer_regexp' => array('type' => self::TYPE_STRING, 'validate' => 'isCleanHtml', 'size' => 64), 'request_uri_regexp' => array('type' => self::TYPE_STRING, 'validate' => 'isCleanHtml', 'size' => 64), 'http_referer_like' => array('type' => self::TYPE_STRING, 'validate' => 'isCleanHtml', 'size' => 64), 'request_uri_like' => array('type' => self::TYPE_STRING, 'validate' => 'isCleanHtml', 'size' => 64), 'http_referer_regexp_not' => array('type' => self::TYPE_STRING, 'validate' => 'isCleanHtml'), 'request_uri_regexp_not' => array('type' => self::TYPE_STRING, 'validate' => 'isCleanHtml'), 'http_referer_like_not' => array('type' => self::TYPE_STRING, 'validate' => 'isCleanHtml'), 'request_uri_like_not' => array('type' => self::TYPE_STRING, 'validate' => 'isCleanHtml'), 'base_fee' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat'), 'percent_fee' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPercentage'), 'click_fee' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat'), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate')));
    protected static $_join = '(r.http_referer_like IS NULL OR r.http_referer_like = \'\' OR cs.http_referer LIKE r.http_referer_like)
			AND (r.request_uri_like IS NULL OR r.request_uri_like = \'\' OR cs.request_uri LIKE r.request_uri_like)
			AND (r.http_referer_like_not IS NULL OR r.http_referer_like_not = \'\' OR cs.http_referer NOT LIKE r.http_referer_like_not)
			AND (r.request_uri_like_not IS NULL OR r.request_uri_like_not = \'\' OR cs.request_uri NOT LIKE r.request_uri_like_not)
			AND (r.http_referer_regexp IS NULL OR r.http_referer_regexp = \'\' OR cs.http_referer REGEXP r.http_referer_regexp)
			AND (r.request_uri_regexp IS NULL OR r.request_uri_regexp = \'\' OR cs.request_uri REGEXP r.request_uri_regexp)
			AND (r.http_referer_regexp_not IS NULL OR r.http_referer_regexp_not = \'\' OR cs.http_referer NOT REGEXP r.http_referer_regexp_not)
			AND (r.request_uri_regexp_not IS NULL OR r.request_uri_regexp_not = \'\' OR cs.request_uri NOT REGEXP r.request_uri_regexp_not)';
    public function add($autoDate = \true, $nullValues = \false)
    {
    }
    /**
     * Cache new source
     *
     * @param $idConnectionsSource
     */
    public static function cacheNewSource($idConnectionsSource)
    {
    }
    /**
     * Get list of referrers connections of a customer
     *
     * @param int $idCustomer Customer ID
     *
     * @return mixed
     */
    public static function getReferrers($idCustomer)
    {
    }
    /**
     * Get some statistics on visitors connection for current referrer
     *
     * @param int $idProduct
     * @param int $employee
     *
     * @return array|bool|null|object
     */
    public function getStatsVisits($idProduct, $employee)
    {
    }
    /**
     * Get some statistics on customers registrations for current referrer
     *
     * @param int $idProduct
     * @param int $employee
     */
    public function getRegistrations($idProduct, $employee)
    {
    }
    /**
     * Get some statistics on orders for current referrer
     *
     * @param int $idProduct
     * @param int $employee
     *
     * @return array|bool|null|object
     */
    public function getStatsSales($idProduct, $employee)
    {
    }
    /**
     * Refresh cache data of referrer statistics in referrer_shop table
     *
     * @param array $referrers
     * @param int   $employee
     *
     * @return true
     */
    public static function refreshCache($referrers = \null, $employee = \null)
    {
    }
    /**
     * Cache liaison between connections_source data and referrers data
     *
     * @param array $referrers
     */
    public static function refreshIndex($referrers = \null)
    {
    }
    /**
     * Get product for ajax call
     *
     * @param int $idReferrer Referrer ID
     * @param int $idProduct  Product ID
     * @param int $idEmployee Employee ID
     */
    public static function getAjaxProduct($idReferrer, $idProduct, $idEmployee = \null)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class PrestaShopBackup
 */
class PrestaShopBackup
{
    /** @var int Object id */
    public $id;
    /** @var string Last error messages */
    public $error;
    /** @var string default backup directory. */
    public static $backupDir = '/backups/';
    /** @var string custom backup directory. */
    public $customBackupDir = \null;
    public $psBackupAll = \true;
    public $psBackupDropTable = \true;
    /**
     * Creates a new backup object
     *
     * @param string $filename Filename of the backup file
     */
    public function __construct($filename = \null)
    {
    }
    /**
     * you can set a different path with that function
     *
     * @TODO include the prefix name
     * @param string $dir
     * @return bool bo
     */
    public function setCustomBackupPath($dir)
    {
    }
    /**
     * get the path to use for backup (customBackupDir if specified, or default)
     *
     * @param string $filename filename to use
     * @return string full path
     */
    public function getRealBackupPath($filename = \null)
    {
    }
    /**
     * Get the full path of the backup file
     *
     * @param string $filename prefix of the backup file (datetime will be the second part)
     * @return string The full path of the backup file, or false if the backup file does not exists
     */
    public static function getBackupPath($filename = '')
    {
    }
    /**
     * Check if a backup file exist
     *
     * @param string $filename prefix of the backup file (datetime will be the second part)
     * @return bool true if backup file exist
     */
    public static function backupExist($filename)
    {
    }
    /**
     * Get the URL used to retrieve this backup file
     *
     * @return string The url used to request the backup file
     */
    public function getBackupURL()
    {
    }
    /**
     * Delete the current backup file
     *
     * @return bool Deletion result, true on success
     */
    public function delete()
    {
    }
    /**
     * Deletes a range of backup files
     *
     * @return bool True on success
     */
    public function deleteSelection($list)
    {
    }
    /**
     * Creates a new backup file
     *
     * @return bool true on successful backup
     */
    public function add()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class ImageType
 */
class ImageType extends \ObjectModel
{
    public $id;
    /** @var string Name */
    public $name;
    /** @var int Width */
    public $width;
    /** @var int Height */
    public $height;
    /** @var bool Apply to products */
    public $products;
    /** @var int Apply to categories */
    public $categories;
    /** @var int Apply to manufacturers */
    public $manufacturers;
    /** @var int Apply to suppliers */
    public $suppliers;
    /** @var int Apply to store */
    public $stores;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'image_type', 'primary' => 'id_image_type', 'fields' => array('name' => array('type' => self::TYPE_STRING, 'validate' => 'isImageTypeName', 'required' => \true, 'size' => 64), 'width' => array('type' => self::TYPE_INT, 'validate' => 'isImageSize', 'required' => \true), 'height' => array('type' => self::TYPE_INT, 'validate' => 'isImageSize', 'required' => \true), 'categories' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'products' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'manufacturers' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'suppliers' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'stores' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool')));
    /**
     * @var array Image types cache
     */
    protected static $images_types_cache = array();
    protected static $images_types_name_cache = array();
    protected $webserviceParameters = array();
    /**
     * Returns image type definitions
     *
     * @param string|null Image type
     * @param bool        $orderBySize
     *
     * @return array Image type definitions
     * @throws PrestaShopDatabaseException
     */
    public static function getImagesTypes($type = \null, $orderBySize = \false)
    {
    }
    /**
     * Check if type already is already registered in database
     *
     * @param string $typeName Name
     * @return int Number of results found
     */
    public static function typeAlreadyExists($typeName)
    {
    }
    /**
     * Finds image type definition by name and type
     * @param string $name
     * @param string $type
     */
    public static function getByNameNType($name, $type = \null, $order = 0)
    {
    }
    /**
     * Get formatted name
     *
     * @deprecated 1.7.0.0 Use ImageType::getFormattedName($name) instead
     *
     * @param string $name
     *
     * @return string
     */
    public static function getFormatedName($name)
    {
    }
    /**
     * Get formatted name
     *
     * @param string $name
     *
     * @return string
     */
    public static function getFormattedName($name)
    {
    }
    /**
     * Get all image types
     *
     * @return array
     */
    public static function getAll()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class Group extends \ObjectModel
{
    public $id;
    /** @var string Lastname */
    public $name;
    /** @var string Reduction */
    public $reduction;
    /** @var int Price display method (tax inc/tax exc) */
    public $price_display_method;
    /** @var bool Show prices */
    public $show_prices = 1;
    /** @var string Object creation date */
    public $date_add;
    /** @var string Object last modification date */
    public $date_upd;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'group', 'primary' => 'id_group', 'multilang' => \true, 'fields' => array(
        'reduction' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat'),
        'price_display_method' => array('type' => self::TYPE_INT, 'validate' => 'isPriceDisplayMethod', 'required' => \true),
        'show_prices' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'),
        'date_upd' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'),
        /* Lang fields */
        'name' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'required' => \true, 'size' => 32),
    ));
    protected static $cache_reduction = array();
    protected static $group_price_display_method = array();
    protected static $ps_group_feature_active = \null;
    protected static $groups = array();
    protected static $ps_unidentified_group = \null;
    protected static $ps_customer_group = \null;
    protected $webserviceParameters = array();
    public function __construct($id = \null, $id_lang = \null, $id_shop = \null)
    {
    }
    /**
     * WARNING: For testing only. Do NOT rely on this method, it may be removed at any time.
     */
    public static function clearCachedValues()
    {
    }
    public static function getGroups($id_lang, $id_shop = \false)
    {
    }
    public function getCustomers($count = \false, $start = 0, $limit = 0, $shop_filtering = \false)
    {
    }
    public static function getReduction($id_customer = \null)
    {
    }
    public static function getReductionByIdGroup($id_group)
    {
    }
    /**
     * Returns price display method for a group (i.e. price should be including tax or not)
     * @param int $id_group
     * @return int Returns 0 (PS_TAX_INC) if tax should be included, otherwise 1 (PS_TAX_EXC) - tax should be excluded
     */
    public static function getPriceDisplayMethod($id_group)
    {
    }
    /**
     * Returns default price display method, i.e. for the 'Customers' group
     * @see getPriceDisplayMethod()
     * @return int Returns 0 (PS_TAX_INC) if tax should be included, otherwise 1 (PS_TAX_EXC) - tax should be excluded
     */
    public static function getDefaultPriceDisplayMethod()
    {
    }
    public function add($autodate = \true, $null_values = \false)
    {
    }
    public function update($autodate = \true, $null_values = \false)
    {
    }
    public function delete()
    {
    }
    /**
     * This method is allow to know if a feature is used or active
     * @since 1.5.0.1
     * @return bool
     */
    public static function isFeatureActive()
    {
    }
    /**
     * This method is allow to know if there are other groups than the default ones
     * @since 1.5.0.1
     * @param $table
     * @param $has_active_column
     * @return bool
     */
    public static function isCurrentlyUsed($table = \null, $has_active_column = \false)
    {
    }
    /**
     * Truncate all modules restrictions for the group
     *
     * @param int $id_group
     * @return bool
     */
    public static function truncateModulesRestrictions($id_group)
    {
    }
    /**
     * Truncate all restrictions by module
     *
     * @param int $id_module
     * @return bool
     */
    public static function truncateRestrictionsByModule($id_module)
    {
    }
    /**
     * Adding restrictions modules to the group with id $id_group
     * @param $id_group
     * @param $modules
     * @param array $shops
     * @return bool
     */
    public static function addModulesRestrictions($id_group, $modules, $shops = array(1))
    {
    }
    /**
     * Add restrictions for a new module.
     * We authorize every groups to the new module
     *
     * @param int $id_module
     * @param array $shops
     * @return bool
     */
    public static function addRestrictionsForModule($id_module, $shops = array(1))
    {
    }
    /**
     * Return current group object
     * Use context
     *
     * @return Group Group object
     */
    public static function getCurrent()
    {
    }
    /**
     * Light back office search for Group
     *
     * @param string $query Searched string
     * @return array Corresponding groups
     */
    public static function searchByName($query)
    {
    }
}
class Cart extends \ObjectModel
{
    public $id;
    public $id_shop_group;
    public $id_shop;
    /** @var int Customer delivery address ID */
    public $id_address_delivery;
    /** @var int Customer invoicing address ID */
    public $id_address_invoice;
    /** @var int Customer currency ID */
    public $id_currency;
    /** @var int Customer ID */
    public $id_customer;
    /** @var int Guest ID */
    public $id_guest;
    /** @var int Language ID */
    public $id_lang;
    /** @var bool True if the customer wants a recycled package */
    public $recyclable = 0;
    /** @var bool True if the customer wants a gift wrapping */
    public $gift = 0;
    /** @var string Gift message if specified */
    public $gift_message;
    /** @var bool Mobile Theme */
    public $mobile_theme;
    /** @var string Object creation date */
    public $date_add;
    /** @var string secure_key */
    public $secure_key;
    /** @var int Carrier ID */
    public $id_carrier = 0;
    /** @var string Object last modification date */
    public $date_upd;
    public $checkedTos = \false;
    public $pictures;
    public $textFields;
    public $delivery_option;
    /** @var bool Allow to seperate order in multiple package in order to recieve as soon as possible the available products */
    public $allow_seperated_package = \false;
    protected static $_nbProducts = array();
    protected static $_isVirtualCart = array();
    protected $_products = \null;
    protected static $_totalWeight = array();
    protected $_taxCalculationMethod = \PS_TAX_EXC;
    protected static $_carriers = \null;
    protected static $_taxes_rate = \null;
    protected static $_attributesLists = array();
    /** @var Customer|null */
    protected static $_customer = \null;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'cart', 'primary' => 'id_cart', 'fields' => array('id_shop_group' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_shop' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_address_delivery' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_address_invoice' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_carrier' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_currency' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_customer' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_guest' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_lang' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'recyclable' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'gift' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'gift_message' => array('type' => self::TYPE_STRING, 'validate' => 'isMessage'), 'mobile_theme' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'delivery_option' => array('type' => self::TYPE_STRING), 'secure_key' => array('type' => self::TYPE_STRING, 'size' => 32), 'allow_seperated_package' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'), 'date_upd' => array('type' => self::TYPE_DATE, 'validate' => 'isDate')));
    /** @var array $webserviceParameters Web service parameters */
    protected $webserviceParameters = array('fields' => array('id_address_delivery' => array('xlink_resource' => 'addresses'), 'id_address_invoice' => array('xlink_resource' => 'addresses'), 'id_currency' => array('xlink_resource' => 'currencies'), 'id_customer' => array('xlink_resource' => 'customers'), 'id_guest' => array('xlink_resource' => 'guests'), 'id_lang' => array('xlink_resource' => 'languages')), 'associations' => array('cart_rows' => array('resource' => 'cart_row', 'virtual_entity' => \true, 'fields' => array('id_product' => array('required' => \true, 'xlink_resource' => 'products'), 'id_product_attribute' => array('required' => \true, 'xlink_resource' => 'combinations'), 'id_address_delivery' => array('required' => \true, 'xlink_resource' => 'addresses'), 'quantity' => array('required' => \true)))));
    protected $configuration;
    protected $addressFactory;
    protected $shouldSplitGiftProductsQuantity = \false;
    protected $shouldExcludeGiftsDiscount = \false;
    const ONLY_PRODUCTS = 1;
    const ONLY_DISCOUNTS = 2;
    const BOTH = 3;
    const BOTH_WITHOUT_SHIPPING = 4;
    const ONLY_SHIPPING = 5;
    const ONLY_WRAPPING = 6;
    /** @deprecated since 1.7 **/
    const ONLY_PRODUCTS_WITHOUT_SHIPPING = 7;
    const ONLY_PHYSICAL_PRODUCTS_WITHOUT_SHIPPING = 8;
    /**
     * CartCore constructor.
     *
     * @param int|null $id      Cart ID
     *                          null = new Cart
     * @param int|null $idLang  Language ID
     *                          null = Language ID of current Context
     */
    public function __construct($id = \null, $idLang = \null)
    {
    }
    /**
     * Set Tax calculation method
     */
    public function setTaxCalculationMethod()
    {
    }
    /**
     * Adds current Cart as a new Object to the database
     *
     * @param bool $autoDate   Automatically set `date_upd` and `date_add` columns
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Whether the Cart has been successfully added
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function add($autoDate = \true, $nullValues = \false)
    {
    }
    /**
     * Updates the current object in the database
     *
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Whether the Cart has been successfully updated
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function update($nullValues = \false)
    {
    }
    /**
     * Update the Address ID of the Cart
     *
     * @param int $id_address     Current Address ID to change
     * @param int $id_address_new New Address ID
     */
    public function updateAddressId($id_address, $id_address_new)
    {
    }
    /**
     * Deletes current Cart from the database
     *
     * @return bool True if delete was successful
     * @throws PrestaShopException
     */
    public function delete()
    {
    }
    /**
     * Calculate average Tax rate in Cart
     *
     * @param mixed $cart Cart ID or Cart Object
     *
     * @return float Average Tax used in Cart
     */
    public static function getTaxesAverageUsed($cart)
    {
    }
    /**
     * The arguments are optional and only serve as return values in case caller needs the details.
     *
     * @param float|null $cartAmountTaxExcluded If the reference is given, it will be updated with the
     *                                          total amount in the Cart excluding Taxes
     * @param float|null $cartAmountTaxIncluded If the reference is given, it will be updated with the
     *                                          total amount in the Cart including Taxes
     *
     * @return float Average Tax Rate on Products
     */
    public function getAverageProductsTaxRate(&$cartAmountTaxExcluded = \null, &$cartAmountTaxIncluded = \null)
    {
    }
    /**
     * Get Cart Rules
     *
     *
     * @param int $filter Filter enum:
     *                    - FILTER_ACTION_ALL
     *                    - FILTER_ACTION_SHIPPING
     *                    - FILTER_ACTION_REDUCTION
     *                    - FILTER_ACTION_GIFT
     *                    - FILTER_ACTION_ALL_NOCAP
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource Database result
     */
    public function getCartRules($filter = \CartRule::FILTER_ACTION_ALL)
    {
    }
    /**
     * Get cart discounts
     */
    public function getDiscounts()
    {
    }
    /**
     * Return the CartRule IDs in the Cart
     *
     * @param int $filter Filter enum:
     *                    - FILTER_ACTION_ALL
     *                    - FILTER_ACTION_SHIPPING
     *                    - FILTER_ACTION_REDUCTION
     *                    - FILTER_ACTION_GIFT
     *                    - FILTER_ACTION_ALL_NOCAP
     *
     * @return array
     * @throws PrestaShopDatabaseException
     */
    public function getOrderedCartRulesIds($filter = \CartRule::FILTER_ACTION_ALL)
    {
    }
    /**
     * Get amount of Customer Discounts
     *
     * @param int $id_cart_rule CartRule ID
     *
     * @return int Amount of Customer Discounts
     * @todo: What are customer discounts? Isn't this just a PriceRule and shouldn't this method be renamed instead?
     */
    public function getDiscountsCustomer($id_cart_rule)
    {
    }
    /**
     * Get last Product in Cart
     *
     * @return bool|mixed Database result
     */
    public function getLastProduct()
    {
    }
    /**
     * Return cart products
     *
     * @result array Products
     */
    public function getProducts($refresh = \false, $id_product = \false, $id_country = \null)
    {
    }
    /**
     * @param $row
     * @param $shopContext
     * @param $productQuantity
     * @return mixed
     */
    protected function applyProductCalculations($row, $shopContext, $productQuantity = \null)
    {
    }
    public static function cacheSomeAttributesLists($ipa_list, $id_lang)
    {
    }
    /**
     * Check if Addresses in the Cart are still valid and update with the next valid Address ID found
     *
     * @return bool Whether the Addresses have been succesfully checked and upated
     */
    public function checkAndUpdateAddresses()
    {
    }
    /**
     * Return cart products quantity
     *
     * @result integer Products quantity
     */
    public function nbProducts()
    {
    }
    /**
     * Get number of products in cart
     * This is the total amount of products, not just the types
     *
     * @param int $id Cart ID
     *
     * @return mixed
     */
    public static function getNbProducts($id)
    {
    }
    /**
     * Add a CartRule to the Cart
     *
     * @param int $id_cart_rule CartRule ID
     *
     * @return bool Whether the CartRule has been successfully added
     */
    public function addCartRule($id_cart_rule)
    {
    }
    /**
     * Check if the Cart contains the given Product (Attribute)
     *
     * @param int $id_product Product ID
     * @param int $id_product_attribute ProductAttribute ID
     * @param int $id_customization Customization ID
     * @param int $id_address_delivery Delivery Address ID
     *
     * @return array|bool|null|object Whether the Cart contains the Product
     *                                Result comes directly from the database
     */
    public function containsProduct($id_product, $id_product_attribute = 0, $id_customization = 0, $id_address_delivery = 0)
    {
    }
    /**
     * @overriden id_customization bug, todo find out why id_customization is wrong in db
     *
     * Update Product quantity
     *
     * @param int    $quantity             Quantity to add (or substract)
     * @param int    $id_product           Product ID
     * @param int    $id_product_attribute Attribute ID if needed
     * @param string $operator             Indicate if quantity must be increased or decreased
     *
     * @return bool Whether the quantity has been succesfully updated
     */
    public function updateQty($quantity, $id_product, $id_product_attribute = \null, $id_customization = \false, $operator = 'up', $id_address_delivery = 0, \Shop $shop = \null, $auto_add_cart_rule = \true)
    {
    }
    /**
     * Customization management
     */
    protected function _updateCustomizationQuantity($quantity, $id_customization, $id_product, $id_product_attribute, $id_address_delivery, $operator = 'up')
    {
    }
    /**
     * Add customization item to database
     *
     * @param int    $id_product           Product ID
     * @param int    $id_product_attribute ProductAttribute ID
     * @param int    $index                Index
     * @param int    $type                 Type enum
     *                                     - Product::CUSTOMIZE_FILE
     *                                     - Product::CUSTOMIZE_TEXTFIELD
     * @param string $field                Field
     * @param int    $quantity             Quantity
     *
     * @return bool Success
     */
    public function _addCustomization($id_product, $id_product_attribute, $index, $type, $field, $quantity)
    {
    }
    /**
     * Check if order has already been placed
     *
     * @return bool Indicates if the Order exists
     */
    public function orderExists()
    {
    }
    /**
     * Remove the CartRule from the Cart
     *
     * @param int $id_cart_rule CartRule ID
     *
     * @return bool Whether the Cart rule has been successfully removed
     */
    public function removeCartRule($id_cart_rule)
    {
    }
    /**
     * @overriden id_customization bug
     * Delete a product from the cart
     *
     * @param int $id_product           Product ID
     * @param int $id_product_attribute Attribute ID if needed
     * @param int $id_customization     Customization id
     * @param int $id_address_delivery  Delivery Address id
     *
     * @return bool Whether the product has been successfully deleted
     */
    public function deleteProduct($id_product, $id_product_attribute = \null, $id_customization = \null, $id_address_delivery = 0)
    {
    }
    /**
     * @param $id_product
     * @param $id_product_attribute
     * @return array
     */
    protected function getProductsGifts($id_product, $id_product_attribute)
    {
    }
    /**
     * Delete a Customization from the Cart. If the Customization is a Picture,
     * then the Image is also deleted
     *
     * @param int      $id_customization     Customization Id
     * @param null     $id_product           Unused
     * @param null     $id_product_attribute Unused
     * @param null|int $id_address_delivery  Unused
     *
     * @return bool Indicates if the Customization was successfully deleted
     * @todo: Remove unused parameters
     */
    protected function _deleteCustomization($id_customization, $id_product, $id_product_attribute, $id_address_delivery = 0)
    {
    }
    /**
     * Get formatted total amount in Cart
     *
     * @param  int    $id_cart Cart ID
     * @param bool $use_tax_display Whether the tax should be displayed
     * @param int  $type Type enum:
     *                   - ONLY_PRODUCTS
     *                   - ONLY_DISCOUNTS
     *                   - BOTH
     *                   - BOTH_WITHOUT_SHIPPING
     *                   - ONLY_SHIPPING
     *                   - ONLY_WRAPPING
     *
     * @return string Formatted amount in Cart
     */
    public static function getTotalCart($id_cart, $use_tax_display = \false, $type = \Cart::BOTH)
    {
    }
    /**
     * Get total in Cart using a tax calculation method
     *
     * @param int $id_cart Cart ID
     *
     * @return string Formatted total amount in Cart
     * @todo: What is this?
     */
    public static function getOrderTotalUsingTaxCalculationMethod($id_cart)
    {
    }
    /**
     * This function returns the total cart amount
     *
     * @param bool $with_taxes With or without taxes
     * @param int  $type      Total type enum
     *                        - Cart::ONLY_PRODUCTS
     *                        - Cart::ONLY_DISCOUNTS
     *                        - Cart::BOTH
     *                        - Cart::BOTH_WITHOUT_SHIPPING
     *                        - Cart::ONLY_SHIPPING
     *                        - Cart::ONLY_WRAPPING
     *                        - Cart::ONLY_PRODUCTS_WITHOUT_SHIPPING
     *                        - Cart::ONLY_PHYSICAL_PRODUCTS_WITHOUT_SHIPPING
     * @param array $products
     * @param int   $id_carrier
     * @param bool $use_cache Allow using cache of the method CartRule::getContextualValue
     *
     * @return float Order total
     */
    public function getOrderTotal($with_taxes = \true, $type = \Cart::BOTH, $products = \null, $id_carrier = \null, $use_cache = \true)
    {
    }
    /**
     * @return float
     */
    public function getDiscountSubtotalWithoutGifts()
    {
    }
    /**
     * @param $products
     * @return array
     */
    protected function countProductLines($products)
    {
    }
    /**
     * @param $products
     * @return array
     */
    protected function getDeliveryAddressId($products)
    {
    }
    /**
     * @param $type
     * @param $withShipping
     * @return array
     */
    protected function getTotalCalculationCartRules($type, $withShipping)
    {
    }
    /**
     * @param $withTaxes
     * @param $product
     * @param $virtualContext
     * @return int
     */
    protected function findTaxRulesGroupId($withTaxes, $product, $virtualContext)
    {
    }
    /**
     * @param $product
     * @return int|null
     */
    protected function getProductAddressId($product)
    {
    }
    /**
     * @param $withTaxes
     * @param $type
     * @return float|int
     */
    protected function calculateWrappingFees($withTaxes, $type)
    {
    }
    /**
     * Get the gift wrapping price
     *
     * @param bool $with_taxes With or without taxes
     *
     * @return float wrapping price
     */
    public function getGiftWrappingPrice($with_taxes = \true, $id_address = \null)
    {
    }
    /**
     * Get the number of packages
     *
     * @return int number of packages
     */
    public function getNbOfPackages()
    {
    }
    /**
     * Get products grouped by package and by addresses to be sent individualy (one package = one shipping cost).
     *
     * @return array array(
     *                   0 => array( // First address
     *                       0 => array(  // First package
     *                           'product_list' => array(...),
     *                           'carrier_list' => array(...),
     *                           'id_warehouse' => array(...),
     *                       ),
     *                   ),
     *               );
     * @todo Add avaibility check
     */
    public function getPackageList($flush = \false)
    {
    }
    public function getPackageIdWarehouse($package, $id_carrier = \null)
    {
    }
    /**
     * Get all deliveries options available for the current cart
     * @param Country $default_country
     * @param bool $flush Force flushing cache
     *
     * @return array array(
     *                   0 => array( // First address
     *                       '12,' => array(  // First delivery option available for this address
     *                           carrier_list => array(
     *                               12 => array( // First carrier for this option
     *                                   'instance' => Carrier Object,
     *                                   'logo' => <url to the carriers logo>,
     *                                   'price_with_tax' => 12.4,
     *                                   'price_without_tax' => 12.4,
     *                                   'package_list' => array(
     *                                       1,
     *                                       3,
     *                                   ),
     *                               ),
     *                           ),
     *                           is_best_grade => true, // Does this option have the biggest grade (quick shipping) for this shipping address
     *                           is_best_price => true, // Does this option have the lower price for this shipping address
     *                           unique_carrier => true, // Does this option use a unique carrier
     *                           total_price_with_tax => 12.5,
     *                           total_price_without_tax => 12.5,
     *                           position => 5, // Average of the carrier position
     *                       ),
     *                   ),
     *               );
     *               If there are no carriers available for an address, return an empty  array
     */
    public function getDeliveryOptionList(\Country $default_country = \null, $flush = \false)
    {
    }
    /**
     *
     * Sort list of option delivery by parameters define in the BO
     * @param $option1
     * @param $option2
     * @return int -1 if $option 1 must be placed before and 1 if the $option1 must be placed after the $option2
     */
    public static function sortDeliveryOptionList($option1, $option2)
    {
    }
    /**
     * Is the Carrier selected
     *
     * @param int $id_carrier Carrier ID
     * @param int $id_address Address ID
     *
     * @return bool Indicated if the carrier is selected
     */
    public function carrierIsSelected($id_carrier, $id_address)
    {
    }
    /**
     * Get all deliveries options available for the current cart formatted like Carriers::getCarriersForOrder
     * This method was wrote for retrocompatibility with 1.4 theme
     * New theme need to use Cart::getDeliveryOptionList() to generate carriers option in the checkout process
     *
     * @since 1.5.0
     * @deprecated 1.7.0
     *
     * @param Country $default_country Default Country
     * @param bool    $flush           Force flushing cache
     *
     * @return array
     */
    public function simulateCarriersOutput(\Country $default_country = \null, $flush = \false)
    {
    }
    /**
     * Simulate output of selected Carrier
     *
     * @param bool $use_cache Use cache
     *
     * @return int Intified Cart output
     */
    public function simulateCarrierSelectedOutput($use_cache = \true)
    {
    }
    /**
     * Translate a string option_delivery identifier ('24,3,') in a int (3240002000)
     *
     * The  option_delivery identifier is a list of integers separated by a ','.
     * This method replace the delimiter by a sequence of '0'.
     * The size of this sequence is fixed by the first digit of the return
     *
     * @return int Intified value
     */
    public static function intifier($string, $delimiter = ',')
    {
    }
    /**
     * Translate an int option_delivery identifier (3240002000) in a string ('24,3,')
     */
    public static function desintifier($int, $delimiter = ',')
    {
    }
    /**
     * Does the Cart use multiple Addresses?
     *
     * @return bool Indicates if the Cart uses multiple Addresses
     */
    public function isMultiAddressDelivery()
    {
    }
    /**
     * Get all delivery Addresses object for the current Cart
     */
    public function getAddressCollection()
    {
    }
    /**
     * Set the delivery option and Carrier ID, if there is only one Carrier
     *
     * @param array $delivery_option Delivery option array
     */
    public function setDeliveryOption($delivery_option = \null)
    {
    }
    /**
     * Get Carrier ID from Delivery Option
     *
     * @param array $delivery_option Delivery options array
     *
     * @return int|mixed Carrier ID
     */
    protected function getIdCarrierFromDeliveryOption($delivery_option)
    {
    }
    /**
     * Get the delivery option selected, or if no delivery option was selected,
     * the cheapest option for each address
     *
     * @param Country|null $default_country       Default country
     * @param bool         $dontAutoSelectOptions Do not auto select delivery option
     * @param bool         $use_cache             Use cache
     *
     * @return array|bool|mixed Delivery option
     */
    public function getDeliveryOption($default_country = \null, $dontAutoSelectOptions = \false, $use_cache = \true)
    {
    }
    /**
     * Return shipping total for the cart
     *
     * @param array|null   $delivery_option Array of the delivery option for each address
     * @param bool         $use_tax         Use taxes
     * @param Country|null $default_country Default Country
     *
     * @return float Shipping total
     */
    public function getTotalShippingCost($delivery_option = \null, $use_tax = \true, \Country $default_country = \null)
    {
    }
    /**
     * Return shipping total of a specific carriers for the cart
     *
     * @param int          $id_carrier      Carrier ID
     * @param array        $delivery_option Array of the delivery option for each address
     * @param bool         $useTax          Use Taxes
     * @param Country|null $default_country Default Country
     * @param array|null   $delivery_option Delivery options array
     *
     * @return float Shipping total
     */
    public function getCarrierCost($id_carrier, $useTax = \true, \Country $default_country = \null, $delivery_option = \null)
    {
    }
    /**
     * @deprecated 1.5.0, use Cart->getPackageShippingCost()
     */
    public function getOrderShippingCost($id_carrier = \null, $use_tax = \true, \Country $default_country = \null, $product_list = \null)
    {
    }
    /**
     * Return package shipping cost
     *
     * @param int          $id_carrier      Carrier ID (default : current carrier)
     * @param bool         $use_tax
     * @param Country|null $default_country
     * @param array|null   $product_list    List of product concerned by the shipping.
     *                                      If null, all the product of the cart are used to calculate the shipping cost
     * @param int|null     $id_zone         Zone ID
     *
     * @return float|bool Shipping total, false if not possible to ship with the given carrier
     */
    public function getPackageShippingCost($id_carrier = \null, $use_tax = \true, \Country $default_country = \null, $product_list = \null, $id_zone = \null)
    {
    }
    /**
     * Return total Cart weight
     *
     * @return float Total Cart weight
     */
    public function getTotalWeight($products = \null)
    {
    }
    /**
     * @param int $productId
     */
    protected function updateProductWeight($productId)
    {
    }
    /**
     * @deprecated 1.5.0
     *
     * @param CartRule $obj
     *
     * @return bool|string
     */
    public function checkDiscountValidity($obj, $discounts, $order_total, $products, $check_cart_discount = \false)
    {
    }
    /**
     * Return useful information about the cart
     *
     * @return array Cart details
     */
    public function getSummaryDetails($id_lang = \null, $refresh = \false)
    {
    }
    /**
     * Check if product quantities in Cart are available
     *
     * @param bool $return_product Return the Product with not enough quantity instead
     *
     * @return bool|Product Indicates if there is enough in stock
     */
    public function checkQuantities($return_product = \false)
    {
    }
    /**
     * Check if the product can be accessed by the Customer
     *
     * @return bool Indicates if the Customer in the current Cart has access
     */
    public function checkProductsAccess()
    {
    }
    /**
     * Last abandoned Cart
     *
     * @param int $id_customer Customer ID
     *
     * @return bool|int Last abandoned Cart ID
     *                  false if not found
     */
    public static function lastNoneOrderedCart($id_customer)
    {
    }
    /**
     * Check if cart contains only virtual products
     *
     * @return bool true if is a virtual cart or false
     */
    public function isVirtualCart()
    {
    }
    /**
     * Build cart object from provided id_order
     *
     * @param int $id_order
     * @return Cart|bool
     */
    public static function getCartByOrderId($id_order)
    {
    }
    /**
     * Get Cart ID by Order ID
     *
     * @param int $id_order Order ID
     *
     * @return int|bool Cart ID, false if not found
     */
    public static function getCartIdByOrderId($id_order)
    {
    }
    /**
     * Add customer's text
     *
     * @params int $id_product Product ID
     * @params int $index
     * @params int $type
     * @params string $textValue
     *
     * @return bool Always true
     * @todo: Improve this PHPDoc comment
     */
    public function addTextFieldToProduct($id_product, $index, $type, $text_value)
    {
    }
    /**
     * Add customer's pictures
     *
     * @return bool Always true
     */
    public function addPictureToProduct($id_product, $index, $type, $file)
    {
    }
    /**
     * @deprecated 1.5.5.0
     * @param int $id_product
     * @param $index
     *
     * @return bool
     */
    public function deletePictureToProduct($id_product, $index)
    {
    }
    /**
     * Remove a customer's customization
     *
     * @param int $id_product Product ID
     * @param int $index
     *
     * @return bool
     * @todo: Improve this PHPDoc comment
     */
    public function deleteCustomizationToProduct($id_product, $index)
    {
    }
    /**
     * Return custom pictures in this cart for a specified product
     *
     * @param int  $id_product  Product ID
     * @param int  $type        Only return customization of this type
     * @param bool $not_in_cart Only return customizations that are not in the cart already
     *
     * @return array Result from DB
     */
    public function getProductCustomization($id_product, $type = \null, $not_in_cart = \false)
    {
    }
    /**
     * Get Carts by Customer ID
     *
     * @param int  $id_customer Customer ID
     * @param bool $with_order  Only return Carts that have been converted into an Order
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource DB result
     */
    public static function getCustomerCarts($id_customer, $with_order = \true)
    {
    }
    /**
     * If the carrier name is 0, use this function to replace it with the shop name
     *
     * @param string $echo Text to use
     * @param string $tr   Unused parameter
     *
     * @return string
     * @todo: Remove unused parameter
     */
    public static function replaceZeroByShopName($echo, $tr)
    {
    }
    /**
     * Duplicate this Cart in the database
     *
     * @return array Duplicated cart, with success bool
     */
    public function duplicate()
    {
    }
    /**
     * Get Cart rows from DB for the webservice
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource DB result
     */
    public function getWsCartRows()
    {
    }
    /**
     * Insert cart rows from webservice
     *
     * @param array $values Values from webservice
     *
     * @return bool Whether the values have been successfully inserted
     * @todo: This function always returns true, make it depend on actual result of DB query
     */
    public function setWsCartRows($values)
    {
    }
    /**
     * Set delivery Address of a Product in the Cart
     *
     * @param int $id_product              Product ID
     * @param int $id_product_attribute    Product Attribute ID
     * @param int $old_id_address_delivery Old delivery Address ID
     * @param int $new_id_address_delivery New delivery Address ID
     *
     * @return bool Whether the delivery Address of the product in the Cart has been successfully updated
     */
    public function setProductAddressDelivery($id_product, $id_product_attribute, $old_id_address_delivery, $new_id_address_delivery)
    {
    }
    /**
     * Set customized data of a product
     *
     * @param Product $product Referenced Product object
     * @param array $customized_datas Customized data
     */
    public function setProductCustomizedDatas(&$product, $customized_datas)
    {
    }
    /**
     * Duplicate Product
     *
     * @param int  $id_product              Product ID
     * @param int  $id_product_attribute    Product Attribute ID
     * @param int  $id_address_delivery     Delivery Address ID
     * @param int  $new_id_address_delivery New Delivery Address ID
     * @param int  $quantity                Quantity
     * @param bool $keep_quantity           Keep the quantity, do not reset if true
     *
     * @return bool Whether the product has been successfully duplicated
     */
    public function duplicateProduct($id_product, $id_product_attribute, $id_address_delivery, $new_id_address_delivery, $quantity = 1, $keep_quantity = \false)
    {
    }
    /**
     * Update products cart address delivery with the address delivery of the cart
     */
    public function setNoMultishipping()
    {
    }
    /**
     * Set an address to all products on the cart without address delivery
     */
    public function autosetProductAddress()
    {
    }
    public function deleteAssociations()
    {
    }
    /**
     * isCarrierInRange
     *
     * Check if the specified carrier is in range
     *
     * @id_carrier int
     * @id_zone int
     */
    public function isCarrierInRange($id_carrier, $id_zone)
    {
    }
    /**
     * Is the Cart from a guest?
     *
     * @param int $id_cart Cart ID
     *
     * @return bool True if the Cart has been made by a guest Customer
     */
    public static function isGuestCartByCartId($id_cart)
    {
    }
    /**
     * Are all products of the Cart in stock?
     *
     * @param bool $ignore_virtual Ignore virtual products
     * @param bool $exclusive If true, the validation is exclusive : it must be present product in stock and out of stock
     * @since 1.5.0
     *
     * @return bool False if not all products in the cart are in stock
     */
    public function isAllProductsInStock($ignore_virtual = \false, $exclusive = \false)
    {
    }
    /**
     * Execute hook displayCarrierList (extraCarrier) and merge them into the $array
     *
     * @param array $array
     */
    public static function addExtraCarriers(&$array)
    {
    }
    /**
     * Get all the IDs of the delivery Addresses without Carriers
     *
     * @param bool $return_collection Returns sa collection
     * @param array &$error Contains an error message if an error occurs
     *
     * @return array Array of address id or of address object
     */
    public function getDeliveryAddressesWithoutCarriers($return_collection = \false, &$error = array())
    {
    }
    /**
     * Set flag to split lines of products given away and also manually added to cart
     */
    protected function splitGiftsProductsQuantity()
    {
    }
    /**
     * Set flag to merge lines of products given away and also manually added to cart
     */
    protected function mergeGiftsProductsQuantity()
    {
    }
    protected function excludeGiftsDiscountFromTotal()
    {
    }
    protected function includeGiftsDiscountInTotal()
    {
    }
    /**
     * Get products with gifts and manually added occurrences separated
     *
     * @return array|null
     */
    public function getProductsWithSeparatedGifts()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class LinkProxy
{
    public function __construct(\Link $link)
    {
    }
    public function getPageLink($controller, $ssl = \null, $id_lang = \null, $request = \null, $request_url_encode = \false, $id_shop = \null, $relative_protocol = \false)
    {
    }
    public function getProductLink($product, $alias = \null, $category = \null, $ean13 = \null, $id_lang = \null, $id_shop = \null, $ipa = 0, $force_routes = \false, $relative_protocol = \false, $add_anchor = \false, $extra_params = [])
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
abstract class Cache
{
    /**
     * Name of keys index
     */
    const KEYS_NAME = '__keys__';
    /**
     * Name of SQL cache index
     */
    const SQL_TABLES_NAME = 'tablesCached';
    /**
     * @var Cache
     */
    protected static $instance;
    /**
     * @var array List all keys of cached data and their associated ttl
     */
    protected $keys = array();
    /**
     * @var array Store list of tables and their associated keys for SQL cache (warning: this var must not be initialized here !)
     */
    protected $sql_tables_cached;
    /**
     * @var array List of blacklisted tables for SQL cache, these tables won't be indexed
     */
    protected $blacklist = array('cart', 'cart_cart_rule', 'cart_product', 'connections', 'connections_source', 'connections_page', 'customer', 'customer_group', 'customized_data', 'guest', 'pagenotfound', 'page_viewed', 'employee');
    /**
     * @var array Store local cache
     */
    protected static $local = array();
    /**
     * Cache a data
     *
     * @param string $key
     * @param mixed $value
     * @param int $ttl
     * @return bool
     */
    protected abstract function _set($key, $value, $ttl = 0);
    /**
     * Retrieve a cached data by key
     *
     * @param string $key
     * @return mixed
     */
    protected abstract function _get($key);
    /**
     * Check if a data is cached by key
     *
     * @param string $key
     * @return bool
     */
    protected abstract function _exists($key);
    /**
     * Delete a data from the cache by key
     *
     * @param string $key
     * @return bool
     */
    protected abstract function _delete($key);
    /**
     * Write keys index
     */
    protected abstract function _writeKeys();
    /**
     * Clean all cached data
     *
     * @return bool
     */
    public abstract function flush();
    /**
     * @return Cache
     */
    public static function getInstance()
    {
    }
    /**
     * Unit testing purpose only
     * @param $test_instance Cache
     */
    public static function setInstanceForTesting($test_instance)
    {
    }
    /**
     * Unit testing purpose only
     */
    public static function deleteTestingInstance()
    {
    }
    /**
     * Store a data in cache
     *
     * @param string $key
     * @param mixed $value
     * @param int $ttl
     * @return bool
     */
    public function set($key, $value, $ttl = 0)
    {
    }
    /**
     * Retrieve a data from cache
     *
     * @param string $key
     * @return mixed
     */
    public function get($key)
    {
    }
    /**
     * Check if a data is cached
     *
     * @param string $key
     * @return bool
     */
    public function exists($key)
    {
    }
    /**
     * Delete one or several data from cache (* joker can be used)
     * 	E.g.: delete('*'); delete('my_prefix_*'); delete('my_key_name');
     *
     * @param string $key
     * @return array List of deleted keys
     */
    public function delete($key)
    {
    }
    /**
     * Store a query in cache
     *
     * @param string $query
     * @param array $result
     */
    public function setQuery($query, $result)
    {
    }
    /**
     * Autoadjust the table cache size to avoid storing too big elements in the cache
     *
     * @param $table
     */
    protected function adjustTableCacheSize($table)
    {
    }
    protected function getTables($string)
    {
    }
    /**
     * Delete a query from cache
     *
     * @param string $query
     */
    public function deleteQuery($query)
    {
    }
    /**
     * Check if a query contain blacklisted tables
     *
     * @param string $query
     * @return bool
     */
    protected function isBlacklist($query)
    {
    }
    public static function store($key, $value)
    {
    }
    public static function retrieve($key)
    {
    }
    public static function retrieveAll()
    {
    }
    public static function isStored($key)
    {
    }
    public static function clean($key)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * This class require PECL Memcached extension
 *
 */
class CacheMemcached extends \Cache
{
    /**
     * @var Memcached
     */
    protected $memcached;
    /**
     * @var bool Connection status
     */
    protected $is_connected = \false;
    public function __construct()
    {
    }
    public function __destruct()
    {
    }
    /**
     * Connect to memcached server
     */
    public function connect()
    {
    }
    /**
     * @see Cache::_set()
     */
    protected function _set($key, $value, $ttl = 0)
    {
    }
    /**
     * @see Cache::_get()
     */
    protected function _get($key)
    {
    }
    /**
     * @see Cache::_exists()
     */
    protected function _exists($key)
    {
    }
    /**
     * @see Cache::_delete()
     */
    protected function _delete($key)
    {
    }
    /**
     * @see Cache::_writeKeys()
     */
    protected function _writeKeys()
    {
    }
    /**
     * @see Cache::flush()
     */
    public function flush()
    {
    }
    /**
     * Store a data in cache
     *
     * @param string $key
     * @param mixed $value
     * @param int $ttl
     * @return bool
     */
    public function set($key, $value, $ttl = 0)
    {
    }
    /**
     * Retrieve a data from cache
     *
     * @param string $key
     * @return mixed
     */
    public function get($key)
    {
    }
    /**
     * Check if a data is cached
     *
     * @param string $key
     * @return bool
     */
    public function exists($key)
    {
    }
    /**
     * Delete one or several data from cache (* joker can be used, but avoid it !)
     * 	E.g.: delete('*'); delete('my_prefix_*'); delete('my_key_name');
     *
     * @param string $key
     * @return bool
     */
    public function delete($key)
    {
    }
    /**
     * Close connection to memcache server
     *
     * @return bool
     */
    protected function close()
    {
    }
    /**
     * Add a memcached server
     *
     * @param string $ip
     * @param int $port
     * @param int $weight
     */
    public static function addServer($ip, $port, $weight)
    {
    }
    /**
     * Get list of memcached servers
     *
     * @return array
     */
    public static function getMemcachedServers()
    {
    }
    /**
     * Delete a memcached server
     *
     * @param int $id_server
     */
    public static function deleteServer($id_server)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * This class require PECL Memcache extension
 *
 */
class CacheMemcache extends \Cache
{
    /**
     * @var Memcache
     */
    protected $memcache;
    /**
     * @var bool Connection status
     */
    protected $is_connected = \false;
    public function __construct()
    {
    }
    public function __destruct()
    {
    }
    /**
     * Connect to memcache server
     */
    public function connect()
    {
    }
    /**
     * @see Cache::_set()
     */
    protected function _set($key, $value, $ttl = 0)
    {
    }
    /**
     * @see Cache::_get()
     */
    protected function _get($key)
    {
    }
    /**
     * @see Cache::_exists()
     */
    protected function _exists($key)
    {
    }
    /**
     * @see Cache::_delete()
     */
    protected function _delete($key)
    {
    }
    /**
     * @see Cache::_writeKeys()
     */
    protected function _writeKeys()
    {
    }
    /**
     * @see Cache::flush()
     */
    public function flush()
    {
    }
    /**
     * Store a data in cache
     *
     * @param string $key
     * @param mixed $value
     * @param int $ttl
     * @return bool
     */
    public function set($key, $value, $ttl = 0)
    {
    }
    /**
     * Retrieve a data from cache
     *
     * @param string $key
     * @return mixed
     */
    public function get($key)
    {
    }
    /**
     * Check if a data is cached
     *
     * @param string $key
     * @return bool
     */
    public function exists($key)
    {
    }
    /**
     * Delete one or several data from cache (* joker can be used, but avoid it !)
     * 	E.g.: delete('*'); delete('my_prefix_*'); delete('my_key_name');
     *
     * @param string $key
     * @return bool
     */
    public function delete($key)
    {
    }
    /**
     * Close connection to memcache server
     *
     * @return bool
     */
    protected function close()
    {
    }
    /**
     * Add a memcache server
     *
     * @param string $ip
     * @param int $port
     * @param int $weight
     */
    public static function addServer($ip, $port, $weight)
    {
    }
    /**
     * Get list of memcached servers
     *
     * @return array
     */
    public static function getMemcachedServers()
    {
    }
    /**
     * Delete a memcache server
     *
     * @param int $id_server
     */
    public static function deleteServer($id_server)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * This class requires the PECL APC extension or PECL APCu extension to be installed
 *
 * @since 1.5.0
 */
class CacheApc extends \Cache
{
    /** @var bool Whether APCu is enabled */
    public $apcu;
    /**
     * CacheApcCore constructor.
     */
    public function __construct()
    {
    }
    /**
     * Delete one or several data from cache (* joker can be used, but avoid it !)
     * 	E.g.: delete('*'); delete('my_prefix_*'); delete('my_key_name');
     *
     * @param string $key Cache key
     * @return bool Whether the key was deleted
     */
    public function delete($key)
    {
    }
    /**
     * @see Cache::_set()
     */
    protected function _set($key, $value, $ttl = 0)
    {
    }
    /**
     * @see Cache::_get()
     */
    protected function _get($key)
    {
    }
    /**
     * @see Cache::_exists()
     */
    protected function _exists($key)
    {
    }
    /**
     * @see Cache::_delete()
     */
    protected function _delete($key)
    {
    }
    /**
     * @see Cache::_writeKeys()
     */
    protected function _writeKeys()
    {
    }
    /**
     * @see Cache::flush()
     */
    public function flush()
    {
    }
    /**
     * Store data in the cache
     *
     * @param string $key Cache Key
     * @param mixed $value Value
     * @param int $ttl Time to live in the cache
     *                 0 = unlimited
     * @return bool Whether the data was successfully stored
     */
    public function set($key, $value, $ttl = 0)
    {
    }
    /**
     * Retrieve data from the cache
     *
     * @param string $key Cache key
     * @return mixed Data
     */
    public function get($key)
    {
    }
    /**
     * Check if data has been cached
     *
     * @param string $key Cache key
     * @return bool Whether the data has been cached
     */
    public function exists($key)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * This class require Xcache extension
 *
 * @since 1.5.0
 */
class CacheXcache extends \Cache
{
    public function __construct()
    {
    }
    /**
     * @see Cache::_set()
     */
    protected function _set($key, $value, $ttl = 0)
    {
    }
    /**
     * @see Cache::_get()
     */
    protected function _get($key)
    {
    }
    /**
     * @see Cache::_exists()
     */
    protected function _exists($key)
    {
    }
    /**
     * @see Cache::_delete()
     */
    protected function _delete($key)
    {
    }
    /**
     * @see Cache::_writeKeys()
     */
    protected function _writeKeys()
    {
    }
    /**
     * @see Cache::flush()
     */
    public function flush()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Mail
 */
class Mail extends \ObjectModel
{
    public $id;
    /** @var string Recipient */
    public $recipient;
    /** @var string Template */
    public $template;
    /** @var string Subject */
    public $subject;
    /** @var int Language ID */
    public $id_lang;
    /** @var int Timestamp */
    public $date_add;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'mail', 'primary' => 'id_mail', 'fields' => array('recipient' => array('type' => self::TYPE_STRING, 'validate' => 'isEmail', 'copy_post' => \false, 'required' => \true, 'size' => 126), 'template' => array('type' => self::TYPE_STRING, 'validate' => 'isTplName', 'copy_post' => \false, 'required' => \true, 'size' => 62), 'subject' => array('type' => self::TYPE_STRING, 'validate' => 'isMailSubject', 'copy_post' => \false, 'required' => \true, 'size' => 254), 'id_lang' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'copy_post' => \false, 'required' => \true), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate', 'copy_post' => \false, 'required' => \true)));
    const TYPE_HTML = 1;
    const TYPE_TEXT = 2;
    const TYPE_BOTH = 3;
    /**
     * Send Email
     *
     * @param int    $idLang         Language ID of the email (to translate the template)
     * @param string $template       Template: the name of template not be a var but a string !
     * @param string $subject        Subject of the email
     * @param string $templateVars   Template variables for the email
     * @param string $to             To email
     * @param string $toName         To name
     * @param string $from           From email
     * @param string $fromName       To email
     * @param array  $fileAttachment Array with three parameters (content, mime and name). You can use an array of array to attach multiple files
     * @param bool   $mode_smtp      SMTP mode (deprecated)
     * @param string $templatePath   Template path
     * @param bool   $die            Die after error
     * @param int    $idShop         Shop ID
     * @param string $bcc            Bcc recipient address. You can use an array of array to send to multiple recipients
     * @param string $replyTo        Reply-To recipient address
     * @param string $replyToName    Reply-To recipient name
     *
     * @return bool|int Whether sending was successful. If not at all, false, otherwise amount of recipients succeeded.
     */
    public static function Send($idLang, $template, $subject, $templateVars, $to, $toName = \null, $from = \null, $fromName = \null, $fileAttachment = \null, $mode_smtp = \null, $templatePath = \_PS_MAIL_DIR_, $die = \false, $idShop = \null, $bcc = \null, $replyTo = \null, $replyToName = \null)
    {
    }
    protected static function getTemplateBasePath($isoTemplate, $moduleName, $theme)
    {
    }
    /**
    * @param $idMail Mail ID
    *
    *@return bool Whether removal succeeded
    */
    public static function eraseLog($idMail)
    {
    }
    /**
     * @return bool
     */
    public static function eraseAllLogs()
    {
    }
    /**
     * Send a test email
     *
     * @param bool        $smtpChecked     Is SMTP checked?
     * @param string      $smtp_server    SMTP Server hostname
     * @param string      $content        Content of the email
     * @param string      $subject        Subject of the email
     * @param bool        $type           Deprecated
     * @param string      $to             To email address
     * @param string      $from           From email address
     * @param string      $smtpLogin      SMTP login name
     * @param string      $smtpPassword   SMTP password
     * @param int         $smtpPort       SMTP Port
     * @param bool|string $smtpEncryption Encryption type. "off" or false disable encryption.
     *
     * @return bool|string True if succeeded, otherwise the error message
     */
    public static function sendMailTest($smtpChecked, $smtp_server, $content, $subject, $type, $to, $from, $smtpLogin, $smtpPassword, $smtpPort = 25, $smtpEncryption)
    {
    }
    /**
     * This method is used to get the translation for email Object.
     * For an object is forbidden to use htmlentities,
     * we have to return a sentence with accents.
     *
     * @param string $string raw sentence (write directly in file)
     * @return mixed
     */
    public static function l($string, $idLang = \null, \Context $context = \null)
    {
    }
    /* Rewrite of Swift_Message::generateId() without getmypid() */
    protected static function generateId($idstring = \null)
    {
    }
    /**
     * Check if a multibyte character set is used for the data
     *
     * @param string $data Data
     * @return bool Whether the string uses a multibyte character set
     */
    public static function isMultibyte($data)
    {
    }
    /**
     * MIME encode the string
     *
     * @param string $string  The string to encode
     * @param string $charset The character set to use
     * @param string $newline The newline character(s)
     *
     * @return mixed|string MIME encoded string
     */
    public static function mimeEncode($string, $charset = 'UTF-8', $newline = "\r\n")
    {
    }
}
class Link
{
    /** @var bool Rewriting activation */
    protected $allow;
    protected $url;
    public static $cache = array('page' => array());
    public $protocol_link;
    public $protocol_content;
    protected $ssl_enable;
    protected static $category_disable_rewrite = \null;
    /**
     * Constructor (initialization only).
     */
    public function __construct($protocolLink = \null, $protocolContent = \null)
    {
    }
    /**
     * Create a link to delete a product.
     *
     * @param mixed $product   ID of the product OR a Product object
     * @param int   $idPicture ID of the picture to delete
     *
     * @return string
     */
    public function getProductDeletePictureLink($product, $idPicture)
    {
    }
    /**
     * Return a product object from various product format
     *
     * @param $product
     * @param $idLang
     * @param $idShop
     * @return Product
     * @throws PrestaShopException
     */
    public function getProductObject($product, $idLang, $idShop)
    {
    }
    /**
     * Create a link to a product.
     *
     * @param mixed  $product Product object (can be an ID product, but deprecated)
     * @param string $alias
     * @param string $category
     * @param string $ean13
     * @param int    $idLang
     * @param int    $idShop  (since 1.5.0) ID shop need to be used when we generate a product link for a product in a cart
     * @param int    $ipa     ID product attribute
     *
     * @return string
     */
    public function getProductLink($product, $alias = \null, $category = \null, $ean13 = \null, $idLang = \null, $idShop = \null, $ipa = 0, $force_routes = \false, $relativeProtocol = \false, $addAnchor = \false, $extraParams = array())
    {
    }
    /**
     * Get the URL to remove the Product from the Cart
     *
     * @param int      $idProduct
     * @param int      $idProductAttribute
     * @param int|null $idCustomization
     *
     * @return string
     */
    public function getRemoveFromCartURL($idProduct, $idProductAttribute, $idCustomization = \null)
    {
    }
    /**
     * Get URL to add one Product to Cart
     *
     * @param int      $idProduct
     * @param int      $idProductAttribute
     * @param int|null $idCustomization
     *
     * @return string
     */
    public function getUpQuantityCartURL($idProduct, $idProductAttribute, $idCustomization = \null)
    {
    }
    /**
     * Get URL to remove one Product to Cart
     *
     * @param int      $idProduct
     * @param int      $idProductAttribute
     * @param int|null $idCustomization
     *
     * @return string
     */
    public function getDownQuantityCartURL($idProduct, $idProductAttribute, $idCustomization = \null)
    {
    }
    /**
     * Get URL to update quantity of Product in Cart
     *
     * @param   int    $idProduct
     * @param   int    $idProductAttribute
     * @param int|null $idCustomization
     * @param null     $op
     *
     * @return string
     */
    public function getUpdateQuantityCartURL($idProduct, $idProductAttribute, $idCustomization = \null, $op = \null)
    {
    }
    /**
     * Get add to Cart URL
     *
     * @param int $idProduct
     * @param int $idProductAttribute
     *
     * @return string
     */
    public function getAddToCartURL($idProduct, $idProductAttribute)
    {
    }
    /**
     * Return a category object from various category format
     *
     * @param $product
     * @param $idLang
     * @return Category
     * @throws PrestaShopException
     */
    public function getCategoryObject($category, $idLang)
    {
    }
    /**
     * Create a link to a category.
     *
     * @param mixed  $category        Category object (can be an ID category, but deprecated)
     * @param string $alias
     * @param int    $idLang
     * @param string $selectedFilters Url parameter to autocheck filters of the module blocklayered
     *
     * @return string
     */
    public function getCategoryLink($category, $alias = \null, $idLang = \null, $selectedFilters = \null, $idShop = \null, $relativeProtocol = \false)
    {
    }
    /**
     * Create a link to a CMS category.
     *
     * @param CMSCategory $cmsCategory
     * @param string      $alias
     * @param int         $idLang
     * @param null        $idShop
     * @param bool        $relativeProtocol
     *
     * @return string
     * @internal param mixed $category CMSCategory object (can be an ID category, but deprecated)
     */
    public function getCMSCategoryLink($cmsCategory, $alias = \null, $idLang = \null, $idShop = \null, $relativeProtocol = \false)
    {
    }
    /**
     * Create a link to a CMS page.
     *
     * @param CMS|int $cms     CMS object
     * @param string  $alias
     * @param bool    $ssl
     * @param int     $idLang
     *
     * @return string
     */
    public function getCMSLink($cms, $alias = \null, $ssl = \null, $idLang = \null, $idShop = \null, $relativeProtocol = \false)
    {
    }
    /**
     * Create a link to a supplier.
     *
     * @param mixed  $supplier Supplier object (can be an ID supplier, but deprecated)
     * @param string $alias
     * @param int    $idLang
     *
     * @return string
     */
    public function getSupplierLink($supplier, $alias = \null, $idLang = \null, $idShop = \null, $relativeProtocol = \false)
    {
    }
    /**
     * Create a link to a manufacturer.
     *
     * @param mixed  $manufacturer Manufacturer object (can be an ID supplier, but deprecated)
     * @param string $alias
     * @param int    $idLang
     * @param null   $idShop
     * @param bool   $relativeProtocol
     *
     * @return string
     */
    public function getManufacturerLink($manufacturer, $alias = \null, $idLang = \null, $idShop = \null, $relativeProtocol = \false)
    {
    }
    /**
     * Create a link to a module.
     *
     * @since    1.5.0
     *
     * @param string $module Module name
     * @param string $controller
     * @param array  $params
     * @param null   $ssl
     * @param int    $idLang
     * @param null   $idShop
     * @param bool   $relativeProtocol
     *
     * @return string
     */
    public function getModuleLink($module, $controller = 'default', array $params = array(), $ssl = \null, $idLang = \null, $idShop = \null, $relativeProtocol = \false)
    {
    }
    /**
     * Use controller name to create a link.
     *
     * @param string        $controller
     * @param bool          $withToken     include or not the token in the url
     * @param array(string) $sfRouteParams Optional parameters to use into New architecture specific cases. If these specific cases should redirect to legacy URLs, then this parameter is used to complete GET query string
     *
     * @return string url
     */
    public function getAdminLink($controller, $withToken = \true, $sfRouteParams = array(), $params = array())
    {
    }
    /**
     * Returns a link to a product image for display
     * Note: the new image filesystem stores product images in subdirectories of img/p/.
     *
     * @param string $name rewrite link of the image
     * @param string $ids  id part of the image filename - can be "id_product-id_image" (legacy support, recommended) or "id_image" (new)
     * @param string $type
     *
     * @return string
     */
    public function getImageLink($name, $ids, $type = \null)
    {
    }
    /**
     * Returns a link to a supplier image for display
     *
     * @param $idSupplier
     * @param null $type    image type (small_default, medium_default, large_default, etc.)
     *
     * @return string
     */
    public function getSupplierImageLink($idSupplier, $type = \null)
    {
    }
    /**
     * Returns a link to a manufacturer image for display
     *
     * @param $idManufacturer
     * @param null $type    image type (small_default, medium_default, large_default, etc.)
     *
     * @return string
     */
    public function getManufacturerImageLink($idManufacturer, $type = \null)
    {
    }
    /**
     * Returns a link to a store image for display
     *
     * @param $idStore
     * @param null $type    image type (small_default, medium_default, large_default, etc.)
     *
     * @return string
     */
    public function getStoreImageLink($name, $idStore, $type = \null)
    {
    }
    public function getMediaLink($filepath)
    {
    }
    /**
     * Create a simple link.
     *
     * @param string       $controller
     * @param bool         $ssl
     * @param int          $idLang
     * @param string|array $request
     * @param bool         $requestUrlEncode Use URL encode
     *
     * @return string Page link
     */
    public function getPageLink($controller, $ssl = \null, $idLang = \null, $request = \null, $requestUrlEncode = \false, $idShop = \null, $relativeProtocol = \false)
    {
    }
    /**
     * @param      $name
     * @param      $idCategory
     * @param null $type
     *
     * @return string
     */
    public function getCatImageLink($name, $idCategory, $type = \null)
    {
    }
    /**
     * Create link after language change, for the change language block.
     *
     * @param int $idLang Language ID
     *
     * @return string link
     */
    public function getLanguageLink($idLang, \Context $context = \null)
    {
    }
    /**
     * @param string $url
     * @param int    $p
     *
     * @return string
     */
    public function goPage($url, $p)
    {
    }
    /**
     * Get pagination link.
     *
     * @param string $type       Controller name
     * @param int    $idObject
     * @param bool   $nb         Show nb element per page attribute
     * @param bool   $sort       Show sort attribute
     * @param bool   $pagination Show page number attribute
     * @param bool   $array      If false return an url, if true return an array
     */
    public function getPaginationLink($type, $idObject, $nb = \false, $sort = \false, $pagination = \false, $array = \false)
    {
    }
    /**
     * @param string $url
     * @param string $orderBy
     * @param string $orderWay
     *
     * @return string
     */
    public function addSortDetails($url, $orderBy, $orderWay)
    {
    }
    /**
     * @param null         $idLang
     * @param Context|null $context
     * @param null         $idShop
     *
     * @return string
     */
    protected function getLangLink($idLang = \null, \Context $context = \null, $idShop = \null)
    {
    }
    /**
     * @param int|null $idShop
     * @param bool|null $ssl
     * @param bool $relativeProtocol
     *
     * @return string
     */
    public function getBaseLink($idShop = \null, $ssl = \null, $relativeProtocol = \false)
    {
    }
    /**
     * Clean url http://website.com/admin_dir/foo => foo
     * Remove index.php?
     * Remove last char if it's ? or &
     * Remove token if exists
     *
     * @param string $url
     * @return string
     */
    public static function getQuickLink($url)
    {
    }
    /**
     * Check if url match with current url
     * @param $url
     * @return bool
     */
    public function matchQuickLink($url)
    {
    }
    /**
     * @param array  $params
     *
     * @return string
     */
    public static function getUrlSmarty($params)
    {
    }
}
class Product extends \ObjectModel
{
    /** @var string Tax name */
    public $tax_name;
    /** @var string Tax rate */
    public $tax_rate;
    /** @var int Manufacturer id */
    public $id_manufacturer;
    /** @var int Supplier id */
    public $id_supplier;
    /** @var int default Category id */
    public $id_category_default;
    /** @var int default Shop id */
    public $id_shop_default;
    /** @var string Manufacturer name */
    public $manufacturer_name;
    /** @var string Supplier name */
    public $supplier_name;
    /** @var string Name */
    public $name;
    /** @var string Long description */
    public $description;
    /** @var string Short description */
    public $description_short;
    /** @var int Quantity available */
    public $quantity = 0;
    /** @var int Minimal quantity for add to cart */
    public $minimal_quantity = 1;
    /** @var string available_now */
    public $available_now;
    /** @var string available_later */
    public $available_later;
    /** @var float Price in euros */
    public $price = 0;
    public $specificPrice = 0;
    /** @var float Additional shipping cost */
    public $additional_shipping_cost = 0;
    /** @var float Wholesale Price in euros */
    public $wholesale_price = 0;
    /** @var bool on_sale */
    public $on_sale = \false;
    /** @var bool online_only */
    public $online_only = \false;
    /** @var string unity */
    public $unity = \null;
    /** @var float price for product's unity */
    public $unit_price;
    /** @var float price for product's unity ratio */
    public $unit_price_ratio = 0;
    /** @var float Ecotax */
    public $ecotax = 0;
    /** @var string Reference */
    public $reference;
    /** @var string Supplier Reference */
    public $supplier_reference;
    /** @var string Location */
    public $location;
    /** @var string Width in default width unit */
    public $width = 0;
    /** @var string Height in default height unit */
    public $height = 0;
    /** @var string Depth in default depth unit */
    public $depth = 0;
    /** @var string Weight in default weight unit */
    public $weight = 0;
    /** @var string Ean-13 barcode */
    public $ean13;
    /** @var string ISBN */
    public $isbn;
    /** @var string Upc barcode */
    public $upc;
    /** @var string Friendly URL */
    public $link_rewrite;
    /** @var string Meta tag description */
    public $meta_description;
    /** @var string Meta tag keywords */
    public $meta_keywords;
    /** @var string Meta tag title */
    public $meta_title;
    /** @var bool Product statuts */
    public $quantity_discount = 0;
    /** @var bool Product customization */
    public $customizable;
    /** @var bool Product is new */
    public $new = \null;
    /** @var int Number of uploadable files (concerning customizable products) */
    public $uploadable_files;
    /** @var int Number of text fields */
    public $text_fields;
    /** @var bool Product statuts */
    public $active = \true;
    /** @var bool Product statuts */
    public $redirect_type = '';
    /** @var bool Product statuts */
    public $id_type_redirected = 0;
    /** @var bool Product available for order */
    public $available_for_order = \true;
    /** @var string Object available order date */
    public $available_date = '0000-00-00';
    /** @var bool Will the condition select should be visible for this product ? */
    public $show_condition = \false;
    /** @var string Enumerated (enum) product condition (new, used, refurbished) */
    public $condition;
    /** @var bool Show price of Product */
    public $show_price = \true;
    /** @var bool is the product indexed in the search index? */
    public $indexed = 0;
    /** @var string ENUM('both', 'catalog', 'search', 'none') front office visibility */
    public $visibility;
    /** @var string Object creation date */
    public $date_add;
    /** @var string Object last modification date */
    public $date_upd;
    /*** @var array Tags */
    public $tags;
    /** @var int temporary or saved object */
    public $state = self::STATE_SAVED;
    /**
     * @var float Base price of the product
     * @deprecated 1.6.0.13
     */
    public $base_price;
    public $id_tax_rules_group = 1;
    /**
     * We keep this variable for retrocompatibility for themes
     * @deprecated 1.5.0
     */
    public $id_color_default = 0;
    /**
     * @since 1.5.0
     * @var bool Tells if the product uses the advanced stock management
     */
    public $advanced_stock_management = 0;
    public $out_of_stock;
    public $depends_on_stock;
    public $isFullyLoaded = \false;
    public $cache_is_pack;
    public $cache_has_attachments;
    public $is_virtual;
    public $id_pack_product_attribute;
    public $cache_default_attribute;
    /**
     * @var string If product is populated, this property contain the rewrite link of the default category
     */
    public $category;
    /**
     * @var int tell the type of stock management to apply on the pack
     */
    public $pack_stock_type = 3;
    public static $_taxCalculationMethod = \null;
    protected static $_prices = array();
    protected static $_pricesLevel2 = array();
    protected static $_incat = array();
    /**
     * @since 1.5.6.1
     * @var array $_cart_quantity is deprecated since 1.5.6.1
     */
    protected static $_cart_quantity = array();
    protected static $_tax_rules_group = array();
    protected static $_cacheFeatures = array();
    protected static $_frontFeaturesCache = array();
    protected static $producPropertiesCache = array();
    /** @var array cache stock data in getStock() method */
    protected static $cacheStock = array();
    const STATE_TEMP = 0;
    const STATE_SAVED = 1;
    public static $definition = array('table' => 'product', 'primary' => 'id_product', 'multilang' => \true, 'multilang_shop' => \true, 'fields' => array(
        /* Classic fields */
        'id_shop_default' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'),
        'id_manufacturer' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'),
        'id_supplier' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'),
        'reference' => array('type' => self::TYPE_STRING, 'validate' => 'isReference', 'size' => 32),
        'supplier_reference' => array('type' => self::TYPE_STRING, 'validate' => 'isReference', 'size' => 32),
        'location' => array('type' => self::TYPE_STRING, 'validate' => 'isReference', 'size' => 64),
        'width' => array('type' => self::TYPE_FLOAT, 'validate' => 'isUnsignedFloat'),
        'height' => array('type' => self::TYPE_FLOAT, 'validate' => 'isUnsignedFloat'),
        'depth' => array('type' => self::TYPE_FLOAT, 'validate' => 'isUnsignedFloat'),
        'weight' => array('type' => self::TYPE_FLOAT, 'validate' => 'isUnsignedFloat'),
        'quantity_discount' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'ean13' => array('type' => self::TYPE_STRING, 'validate' => 'isEan13', 'size' => 13),
        'isbn' => array('type' => self::TYPE_STRING, 'validate' => 'isIsbn', 'size' => 32),
        'upc' => array('type' => self::TYPE_STRING, 'validate' => 'isUpc', 'size' => 12),
        'cache_is_pack' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'cache_has_attachments' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'is_virtual' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'state' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'),
        /* Shop fields */
        'id_category_default' => array('type' => self::TYPE_INT, 'shop' => \true, 'validate' => 'isUnsignedId'),
        'id_tax_rules_group' => array('type' => self::TYPE_INT, 'shop' => \true, 'validate' => 'isUnsignedId'),
        'on_sale' => array('type' => self::TYPE_BOOL, 'shop' => \true, 'validate' => 'isBool'),
        'online_only' => array('type' => self::TYPE_BOOL, 'shop' => \true, 'validate' => 'isBool'),
        'ecotax' => array('type' => self::TYPE_FLOAT, 'shop' => \true, 'validate' => 'isPrice'),
        'minimal_quantity' => array('type' => self::TYPE_INT, 'shop' => \true, 'validate' => 'isUnsignedInt'),
        'price' => array('type' => self::TYPE_FLOAT, 'shop' => \true, 'validate' => 'isPrice', 'required' => \true),
        'wholesale_price' => array('type' => self::TYPE_FLOAT, 'shop' => \true, 'validate' => 'isPrice'),
        'unity' => array('type' => self::TYPE_STRING, 'shop' => \true, 'validate' => 'isString'),
        'unit_price_ratio' => array('type' => self::TYPE_FLOAT, 'shop' => \true),
        'additional_shipping_cost' => array('type' => self::TYPE_FLOAT, 'shop' => \true, 'validate' => 'isPrice'),
        'customizable' => array('type' => self::TYPE_INT, 'shop' => \true, 'validate' => 'isUnsignedInt'),
        'text_fields' => array('type' => self::TYPE_INT, 'shop' => \true, 'validate' => 'isUnsignedInt'),
        'uploadable_files' => array('type' => self::TYPE_INT, 'shop' => \true, 'validate' => 'isUnsignedInt'),
        'active' => array('type' => self::TYPE_BOOL, 'shop' => \true, 'validate' => 'isBool'),
        'redirect_type' => array('type' => self::TYPE_STRING, 'shop' => \true, 'validate' => 'isString'),
        'id_type_redirected' => array('type' => self::TYPE_INT, 'shop' => \true, 'validate' => 'isUnsignedId'),
        'available_for_order' => array('type' => self::TYPE_BOOL, 'shop' => \true, 'validate' => 'isBool'),
        'available_date' => array('type' => self::TYPE_DATE, 'shop' => \true, 'validate' => 'isDateFormat'),
        'show_condition' => array('type' => self::TYPE_BOOL, 'shop' => \true, 'validate' => 'isBool'),
        'condition' => array('type' => self::TYPE_STRING, 'shop' => \true, 'validate' => 'isGenericName', 'values' => array('new', 'used', 'refurbished'), 'default' => 'new'),
        'show_price' => array('type' => self::TYPE_BOOL, 'shop' => \true, 'validate' => 'isBool'),
        'indexed' => array('type' => self::TYPE_BOOL, 'shop' => \true, 'validate' => 'isBool'),
        'visibility' => array('type' => self::TYPE_STRING, 'shop' => \true, 'validate' => 'isProductVisibility', 'values' => array('both', 'catalog', 'search', 'none'), 'default' => 'both'),
        'cache_default_attribute' => array('type' => self::TYPE_INT, 'shop' => \true),
        'advanced_stock_management' => array('type' => self::TYPE_BOOL, 'shop' => \true, 'validate' => 'isBool'),
        'date_add' => array('type' => self::TYPE_DATE, 'shop' => \true, 'validate' => 'isDate'),
        'date_upd' => array('type' => self::TYPE_DATE, 'shop' => \true, 'validate' => 'isDate'),
        'pack_stock_type' => array('type' => self::TYPE_INT, 'shop' => \true, 'validate' => 'isUnsignedInt'),
        /* Lang fields */
        'meta_description' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'size' => 255),
        'meta_keywords' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'size' => 255),
        'meta_title' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'size' => 128),
        'link_rewrite' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isLinkRewrite', 'required' => \false, 'size' => 128, 'ws_modifier' => array('http_method' => \WebserviceRequest::HTTP_POST, 'modifier' => 'modifierWsLinkRewrite')),
        'name' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isCatalogName', 'required' => \false, 'size' => 128),
        'description' => array('type' => self::TYPE_HTML, 'lang' => \true, 'validate' => 'isCleanHtml'),
        'description_short' => array('type' => self::TYPE_HTML, 'lang' => \true, 'validate' => 'isCleanHtml'),
        'available_now' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'size' => 255),
        'available_later' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'IsGenericName', 'size' => 255),
    ), 'associations' => array('manufacturer' => array('type' => self::HAS_ONE), 'supplier' => array('type' => self::HAS_ONE), 'default_category' => array('type' => self::HAS_ONE, 'field' => 'id_category_default', 'object' => 'Category'), 'tax_rules_group' => array('type' => self::HAS_ONE), 'categories' => array('type' => self::HAS_MANY, 'field' => 'id_category', 'object' => 'Category', 'association' => 'category_product'), 'stock_availables' => array('type' => self::HAS_MANY, 'field' => 'id_stock_available', 'object' => 'StockAvailable', 'association' => 'stock_availables')));
    protected $webserviceParameters = array('objectMethods' => array('add' => 'addWs', 'update' => 'updateWs'), 'objectNodeNames' => 'products', 'fields' => array('id_manufacturer' => array('xlink_resource' => 'manufacturers'), 'id_supplier' => array('xlink_resource' => 'suppliers'), 'id_category_default' => array('xlink_resource' => 'categories'), 'new' => array(), 'cache_default_attribute' => array(), 'id_default_image' => array('getter' => 'getCoverWs', 'setter' => 'setCoverWs', 'xlink_resource' => array('resourceName' => 'images', 'subResourceName' => 'products')), 'id_default_combination' => array('getter' => 'getWsDefaultCombination', 'setter' => 'setWsDefaultCombination', 'xlink_resource' => array('resourceName' => 'combinations')), 'id_tax_rules_group' => array('xlink_resource' => array('resourceName' => 'tax_rule_groups')), 'position_in_category' => array('getter' => 'getWsPositionInCategory', 'setter' => 'setWsPositionInCategory'), 'manufacturer_name' => array('getter' => 'getWsManufacturerName', 'setter' => \false), 'quantity' => array('getter' => \false, 'setter' => \false), 'type' => array('getter' => 'getWsType', 'setter' => 'setWsType')), 'associations' => array('categories' => array('resource' => 'category', 'fields' => array('id' => array('required' => \true))), 'images' => array('resource' => 'image', 'fields' => array('id' => array())), 'combinations' => array('resource' => 'combination', 'fields' => array('id' => array('required' => \true))), 'product_option_values' => array('resource' => 'product_option_value', 'fields' => array('id' => array('required' => \true))), 'product_features' => array('resource' => 'product_feature', 'fields' => array('id' => array('required' => \true), 'id_feature_value' => array('required' => \true, 'xlink_resource' => 'product_feature_values'))), 'tags' => array('resource' => 'tag', 'fields' => array('id' => array('required' => \true))), 'stock_availables' => array('resource' => 'stock_available', 'fields' => array('id' => array('required' => \true), 'id_product_attribute' => array('required' => \true)), 'setter' => \false), 'accessories' => array('resource' => 'product', 'api' => 'products', 'fields' => array('id' => array('required' => \true, 'xlink_resource' => 'product'))), 'product_bundle' => array('resource' => 'product', 'api' => 'products', 'fields' => array('id' => array('required' => \true), 'quantity' => array()))));
    const CUSTOMIZE_FILE = 0;
    const CUSTOMIZE_TEXTFIELD = 1;
    /**
     * Note:  prefix is "PTYPE" because TYPE_ is used in ObjectModel (definition)
     */
    const PTYPE_SIMPLE = 0;
    const PTYPE_PACK = 1;
    const PTYPE_VIRTUAL = 2;
    public function __construct($id_product = \null, $full = \false, $id_lang = \null, $id_shop = \null, \Context $context = \null)
    {
    }
    /**
     * @see ObjectModel::getFieldsShop()
     * @return array
     */
    public function getFieldsShop()
    {
    }
    public function add($autodate = \true, $null_values = \false)
    {
    }
    public function update($null_values = \false)
    {
    }
    /**
     * Init computation of price display method (i.e. price should be including tax or not) for a customer.
     * If customer Id passed as null then this compute price display method with according of current group.
     * Otherwise a price display method will compute with according of a customer address (i.e. country).
     * @see Group::getPriceDisplayMethod()
     * @param int|null $id_customer
     */
    public static function initPricesComputation($id_customer = \null)
    {
    }
    /**
     * Returns price display method for a customer (i.e. price should be including tax or not)
     * @see initPricesComputation()
     * @param int|null $id_customer
     * @return int Returns 0 (PS_TAX_INC) if tax should be included, otherwise 1 (PS_TAX_EXC) - tax should be excluded
     */
    public static function getTaxCalculationMethod($id_customer = \null)
    {
    }
    /**
     * Move a product inside its category
     * @param bool $way Up (1)  or Down (0)
     * @param int $position
     * return boolean Update result
     */
    public function updatePosition($way, $position)
    {
    }
    /*
     * Reorder product position in category $id_category.
     * Call it after deleting a product from a category.
     *
     * @param int $id_category
     */
    public static function cleanPositions($id_category, $position = 0)
    {
    }
    /**
     * Get the default attribute for a product
     *
     * @return int Attributes list
     */
    public static function getDefaultAttribute($id_product, $minimum_quantity = 0, $reset = \false)
    {
    }
    public function setAvailableDate($available_date = '0000-00-00')
    {
    }
    /**
     * For a given id_product and id_product_attribute, return available date
     *
     * @param int $id_product
     * @param int $id_product_attribute Optional
     * @return string/null
     */
    public static function getAvailableDate($id_product, $id_product_attribute = \null)
    {
    }
    public static function updateIsVirtual($id_product, $is_virtual = \true)
    {
    }
    /**
     * @see ObjectModel::validateField()
     */
    public function validateField($field, $value, $id_lang = \null, $skip = array(), $human_errors = \false)
    {
    }
    public function toggleStatus()
    {
    }
    public function delete()
    {
    }
    public function deleteSelection($products)
    {
    }
    public function deleteFromCartRules()
    {
    }
    public function deleteFromSupplier()
    {
    }
    /**
     * addToCategories add this product to the category/ies if not exists.
     *
     * @param mixed $categories id_category or array of id_category
     * @return bool true if succeed
     */
    public function addToCategories($categories = array())
    {
    }
    /**
     * Update categories to index product into
     *
     * @param string $productCategories Categories list to index product into
     * @param bool $keeping_current_pos (deprecated, no more used)
     * @return array Update/insertion result
     */
    public function updateCategories($categories, $keeping_current_pos = \false)
    {
    }
    /**
     * deleteCategory delete this product from the category $id_category
     *
     * @param mixed $id_category
     * @param mixed $clean_positions
     * @return bool
     */
    public function deleteCategory($id_category, $clean_positions = \true)
    {
    }
    /**
     * Delete all association to category where product is indexed
     *
     * @param bool $clean_positions clean category positions after deletion
     * @return array Deletion result
     */
    public function deleteCategories($clean_positions = \false)
    {
    }
    /**
     * Delete products tags entries
     *
     * @return array Deletion result
     */
    public function deleteTags()
    {
    }
    /**
     * Delete product from cart
     *
     * @return array Deletion result
     */
    public function deleteCartProducts()
    {
    }
    /**
     * Delete product images from database
     *
     * @return bool success
     */
    public function deleteImages()
    {
    }
    /**
     * Get all available products
     *
     * @param int $id_lang Language id
     * @param int $start Start number
     * @param int $limit Number of products to return
     * @param string $order_by Field for ordering
     * @param string $order_way Way for ordering (ASC or DESC)
     * @return array Products details
     */
    public static function getProducts($id_lang, $start, $limit, $order_by, $order_way, $id_category = \false, $only_active = \false, \Context $context = \null)
    {
    }
    public static function getSimpleProducts($id_lang, \Context $context = \null)
    {
    }
    public function isNew()
    {
    }
    public function productAttributeExists($attributes_list, $current_product_attribute = \false, \Context $context = \null, $all_shops = \false, $return_id = \false)
    {
    }
    /**
     * addProductAttribute is deprecated
     *
     * The quantity params now set StockAvailable for the current shop with the specified quantity
     * The supplier_reference params now set the supplier reference of the default supplier of the product if possible
     *
     * @see StockManager if you want to manage real stock
     * @see StockAvailable if you want to manage available quantities for sale on your shop(s)
     * @see ProductSupplier for manage supplier reference(s)
     *
     * @deprecated since 1.5.0
     */
    public function addProductAttribute($price, $weight, $unit_impact, $ecotax, $quantity, $id_images, $reference, $id_supplier = \null, $ean13, $default, $location = \null, $upc = \null, $minimal_quantity = 1, $isbn)
    {
    }
    public function generateMultipleCombinations($combinations, $attributes, $resetExistingCombination = \true)
    {
    }
    public function sortCombinationByAttributePosition($combinations, $langId)
    {
    }
    /**
     * @param int $quantity DEPRECATED
     * @param string $supplier_reference DEPRECATED
     */
    public function addCombinationEntity($wholesale_price, $price, $weight, $unit_impact, $ecotax, $quantity, $id_images, $reference, $id_supplier, $ean13, $default, $location = \null, $upc = \null, $minimal_quantity = 1, array $id_shop_list = array(), $available_date = \null, $isbn = '')
    {
    }
    /**
     * @deprecated 1.5.5.0
     * @param $attributes
     * @param bool $set_default
     * @return array
     */
    public function addProductAttributeMultiple($attributes, $set_default = \true)
    {
    }
    /**
     * Del all default attributes for product
     */
    public function deleteDefaultAttributes()
    {
    }
    public function setDefaultAttribute($id_product_attribute)
    {
    }
    public static function updateDefaultAttribute($id_product)
    {
    }
    /**
     * Update a product attribute
     *
     * @deprecated since 1.5
     * @see updateAttribute() to use instead
     * @see ProductSupplier for manage supplier reference(s)
     *
     */
    public function updateProductAttribute($id_product_attribute, $wholesale_price, $price, $weight, $unit, $ecotax, $id_images, $reference, $id_supplier = \null, $ean13, $default, $location = \null, $upc = \null, $minimal_quantity, $available_date, $isbn = '')
    {
    }
    /**
     * Sets or updates Supplier Reference
     *
     * @param int $id_supplier
     * @param int $id_product_attribute
     * @param string $supplier_reference
     * @param float $price
     * @param int $id_currency
     */
    public function addSupplierReference($id_supplier, $id_product_attribute, $supplier_reference = \null, $price = \null, $id_currency = \null)
    {
    }
    /**
     * Update a product attribute
     *
     * @param int $id_product_attribute Product attribute id
     * @param float $wholesale_price Wholesale price
     * @param float $price Additional price
     * @param float $weight Additional weight
     * @param float $unit
     * @param float $ecotax Additional ecotax
     * @param int $id_image Image id
     * @param string $reference Reference
     * @param string $ean13 Ean-13 barcode
     * @param int $default Default On
     * @param string $upc Upc barcode
     * @param string $minimal_quantity Minimal quantity
     * @param string $isbn ISBN reference
     * @return array Update result
     */
    public function updateAttribute($id_product_attribute, $wholesale_price, $price, $weight, $unit, $ecotax, $id_images, $reference, $ean13, $default, $location = \null, $upc = \null, $minimal_quantity = \null, $available_date = \null, $update_all_fields = \true, array $id_shop_list = array(), $isbn = '')
    {
    }
    /**
     * Add a product attribute
     * @since 1.5.0.1
     *
     * @param float $price Additional price
     * @param float $weight Additional weight
     * @param float $ecotax Additional ecotax
     * @param int $id_images Image ids
     * @param string $reference Reference
     * @param string $location Location
     * @param string $ean13 Ean-13 barcode
     * @param bool $default Is default attribute for product
     * @param int $minimal_quantity Minimal quantity to add to cart
     * @param string $isbn ISBN reference
     * @return mixed $id_product_attribute or false
     */
    public function addAttribute($price, $weight, $unit_impact, $ecotax, $id_images, $reference, $ean13, $default, $location = \null, $upc = \null, $minimal_quantity = 1, array $id_shop_list = array(), $available_date = \null, $quantity = 0, $isbn = '')
    {
    }
    /**
     * @deprecated since 1.5.0
     */
    public function updateQuantityProductWithAttributeQuantity()
    {
    }
    /**
     * Delete product attributes
     *
     * @return array Deletion result
     */
    public function deleteProductAttributes()
    {
    }
    /**
     * Delete product attributes impacts
     *
     * @return bool
     */
    public function deleteAttributesImpacts()
    {
    }
    /**
     * Delete product features
     *
     * @return array Deletion result
     */
    public function deleteProductFeatures()
    {
    }
    public static function updateCacheAttachment($id_product)
    {
    }
    /**
     * Delete product attachments
     *
     * @param bool $update_cache If set to true attachment cache will be updated
     * @return array Deletion result
     */
    public function deleteAttachments($update_attachment_cache = \true)
    {
    }
    /**
     * Delete product customizations
     *
     * @return array Deletion result
     */
    public function deleteCustomization()
    {
    }
    /**
     * Delete product pack details
     *
     * @return array Deletion result
     */
    public function deletePack()
    {
    }
    /**
     * Delete product sales
     *
     * @return array Deletion result
     */
    public function deleteProductSale()
    {
    }
    /**
     * Delete product indexed words
     *
     * @return array Deletion result
     */
    public function deleteSearchIndexes()
    {
    }
    /**
     * Add a product attributes combinaison
     *
     * @param int $id_product_attribute Product attribute id
     * @param array $attributes Attributes to forge combinaison
     * @return array Insertion result
     * @deprecated since 1.5.0.7
     */
    public function addAttributeCombinaison($id_product_attribute, $attributes)
    {
    }
    /**
     * @deprecated 1.5.5.0
     * @param $id_attributes
     * @param $combinations
     * @return bool
     * @throws PrestaShopDatabaseException
     */
    public function addAttributeCombinationMultiple($id_attributes, $combinations)
    {
    }
    /**
     * Delete a product attributes combination
     *
     * @param int $id_product_attribute Product attribute id
     * @return array Deletion result
     */
    public function deleteAttributeCombination($id_product_attribute)
    {
    }
    /**
     * Delete features
     *
     */
    public function deleteFeatures()
    {
    }
    /**
     * Get all available product attributes resume
     *
     * @param int $id_lang Language id
     * @return array Product attributes combinations
     */
    public function getAttributesResume($id_lang, $attribute_value_separator = ' - ', $attribute_separator = ', ')
    {
    }
    /**
     * Get all available product attributes combinations
     *
     * @param int $id_lang Language id
     * @param bool $groupByIdAttributeGroup
     * @return array Product attributes combinations
     */
    public function getAttributeCombinations($id_lang = \null, $groupByIdAttributeGroup = \true)
    {
    }
    /**
     * Get product attribute combination by id_product_attribute
     *
     * @param int $id_product_attribute
     * @param int $id_lang Language id
     * @return array Product attribute combination by id_product_attribute
     */
    public function getAttributeCombinationsById($id_product_attribute, $id_lang, $groupByIdAttributeGroup = \true)
    {
    }
    public function getCombinationImages($id_lang)
    {
    }
    public static function getCombinationImageById($id_product_attribute, $id_lang)
    {
    }
    /**
     * Check if product has attributes combinations
     *
     * @return int Attributes combinations number
     */
    public function hasAttributes()
    {
    }
    /**
     * Get new products
     *
     * @param int $id_lang Language id
     * @param int $pageNumber Start from (optional)
     * @param int $nbProducts Number of products to return (optional)
     * @return array New products
     */
    public static function getNewProducts($id_lang, $page_number = 0, $nb_products = 10, $count = \false, $order_by = \null, $order_way = \null, \Context $context = \null)
    {
    }
    protected static function _getProductIdByDate($beginning, $ending, \Context $context = \null, $with_combination = \false)
    {
    }
    /**
     * Get a random special
     *
     * @param int $id_lang Language id
     * @return array Special
     */
    public static function getRandomSpecial($id_lang, $beginning = \false, $ending = \false, \Context $context = \null)
    {
    }
    /**
     * Get prices drop
     *
     * @param int $id_lang Language id
     * @param int $pageNumber Start from (optional)
     * @param int $nbProducts Number of products to return (optional)
     * @param bool $count Only in order to get total number (optional)
     * @return array Prices drop
     */
    public static function getPricesDrop($id_lang, $page_number = 0, $nb_products = 10, $count = \false, $order_by = \null, $order_way = \null, $beginning = \false, $ending = \false, \Context $context = \null)
    {
    }
    /**
     * getProductCategories return an array of categories which this product belongs to
     *
     * @return array of categories
     */
    public static function getProductCategories($id_product = '')
    {
    }
    public static function getProductCategoriesFull($id_product = '', $id_lang = \null)
    {
    }
    /**
     * getCategories return an array of categories which this product belongs to
     *
     * @return array of categories
     */
    public function getCategories()
    {
    }
    /**
     * Gets carriers assigned to the product
     */
    public function getCarriers()
    {
    }
    /**
     * Sets carriers assigned to the product
     */
    public function setCarriers($carrier_list)
    {
    }
    /**
     * Get product images and legends
     *
     * @param int $id_lang Language id for multilingual legends
     * @return array Product images and legends
     */
    public function getImages($id_lang, \Context $context = \null)
    {
    }
    /**
     * Get product cover image
     *
     * @return array Product cover image
     */
    public static function getCover($id_product, \Context $context = \null)
    {
    }
    /**
     * Returns product price
     *
     * @param int      $id_product            Product id
     * @param bool     $usetax                With taxes or not (optional)
     * @param int|null $id_product_attribute  Product attribute id (optional).
     *                                        If set to false, do not apply the combination price impact.
     *                                        NULL does apply the default combination price impact.
     * @param int      $decimals              Number of decimals (optional)
     * @param int|null $divisor               Useful when paying many time without fees (optional)
     * @param bool     $only_reduc            Returns only the reduction amount
     * @param bool     $usereduc              Set if the returned amount will include reduction
     * @param int      $quantity              Required for quantity discount application (default value: 1)
     * @param bool     $force_associated_tax  DEPRECATED - NOT USED Force to apply the associated tax.
     *                                        Only works when the parameter $usetax is true
     * @param int|null $id_customer           Customer ID (for customer group reduction)
     * @param int|null $id_cart               Cart ID. Required when the cookie is not accessible
     *                                        (e.g., inside a payment module, a cron task...)
     * @param int|null $id_address            Customer address ID. Required for price (tax included)
     *                                        calculation regarding the guest localization
     * @param null     $specific_price_output If a specific price applies regarding the previous parameters,
     *                                        this variable is filled with the corresponding SpecificPrice object
     * @param bool     $with_ecotax           Insert ecotax in price output.
     * @param bool     $use_group_reduction
     * @param Context  $context
     * @param bool     $use_customer_price
     * @return float                          Product price
     */
    public static function getPriceStatic($id_product, $usetax = \true, $id_product_attribute = \null, $decimals = 6, $divisor = \null, $only_reduc = \false, $usereduc = \true, $quantity = 1, $force_associated_tax = \false, $id_customer = \null, $id_cart = \null, $id_address = \null, &$specific_price_output = \null, $with_ecotax = \true, $use_group_reduction = \true, \Context $context = \null, $use_customer_price = \true, $id_customization = \null)
    {
    }
    /**
     * Price calculation / Get product price
     *
     * @param int    $id_shop Shop id
     * @param int    $id_product Product id
     * @param int    $id_product_attribute Product attribute id
     * @param int    $id_country Country id
     * @param int    $id_state State id
     * @param string $zipcode
     * @param int    $id_currency Currency id
     * @param int    $id_group Group id
     * @param int    $quantity Quantity Required for Specific prices : quantity discount application
     * @param bool   $use_tax with (1) or without (0) tax
     * @param int    $decimals Number of decimals returned
     * @param bool   $only_reduc Returns only the reduction amount
     * @param bool   $use_reduc Set if the returned amount will include reduction
     * @param bool   $with_ecotax insert ecotax in price output.
     * @param null   $specific_price If a specific price applies regarding the previous parameters,
     *                               this variable is filled with the corresponding SpecificPrice object
     * @param bool   $use_group_reduction
     * @param int    $id_customer
     * @param bool   $use_customer_price
     * @param int    $id_cart
     * @param int    $real_quantity
     * @return float Product price
     **/
    public static function priceCalculation($id_shop, $id_product, $id_product_attribute, $id_country, $id_state, $zipcode, $id_currency, $id_group, $quantity, $use_tax, $decimals, $only_reduc, $use_reduc, $with_ecotax, &$specific_price, $use_group_reduction, $id_customer = 0, $use_customer_price = \true, $id_cart = 0, $real_quantity = 0, $id_customization = 0)
    {
    }
    public static function convertAndFormatPrice($price, $currency = \false, \Context $context = \null)
    {
    }
    public static function isDiscounted($id_product, $quantity = 1, \Context $context = \null)
    {
    }
    /**
     * Get product price
     * Same as static function getPriceStatic, no need to specify product id
     *
     * @param bool $tax With taxes or not (optional)
     * @param int $id_product_attribute Product attribute id (optional)
     * @param int $decimals Number of decimals (optional)
     * @param int $divisor Util when paying many time without fees (optional)
     * @return float Product price in euros
     */
    public function getPrice($tax = \true, $id_product_attribute = \null, $decimals = 6, $divisor = \null, $only_reduc = \false, $usereduc = \true, $quantity = 1)
    {
    }
    public function getPublicPrice($tax = \true, $id_product_attribute = \null, $decimals = 6, $divisor = \null, $only_reduc = \false, $usereduc = \true, $quantity = 1)
    {
    }
    public function getIdProductAttributeMostExpensive()
    {
    }
    public function getDefaultIdProductAttribute()
    {
    }
    public function getPriceWithoutReduct($notax = \false, $id_product_attribute = \null, $decimals = 6)
    {
    }
    /**
     * Display price with right format and currency
     *
     * @param array $params Params
     * @param $smarty Smarty object
     * @return string Price with right format and currency
     */
    public static function convertPrice($params, &$smarty)
    {
    }
    /**
     * Convert price with currency
     *
     * @param array $params
     * @param object $smarty DEPRECATED
     * @return string Ambigous <string, mixed, Ambigous <number, string>>
     */
    public static function convertPriceWithCurrency($params, &$smarty)
    {
    }
    public static function displayWtPrice($params, &$smarty)
    {
    }
    /**
     * Display WT price with currency
     *
     * @param array $params
     * @param Smarty $smarty DEPRECATED
     * @return string Ambigous <string, mixed, Ambigous <number, string>>
     */
    public static function displayWtPriceWithCurrency($params, &$smarty)
    {
    }
    /**
     * Get available product quantities
     *
     * @param int $id_product Product id
     * @param int $id_product_attribute Product attribute id (optional)
     * @return int Available quantities
     */
    public static function getQuantity($id_product, $id_product_attribute = \null, $cache_is_pack = \null)
    {
    }
    /**
     * Create JOIN query with 'stock_available' table
     *
     * @param string $productAlias Alias of product table
     * @param string|int $productAttribute If string : alias of PA table ; if int : value of PA ; if null : nothing about PA
     * @param bool $innerJoin LEFT JOIN or INNER JOIN
     * @param Shop $shop
     * @return string
     */
    public static function sqlStock($product_alias, $product_attribute = \null, $inner_join = \false, \Shop $shop = \null)
    {
    }
    /**
     * @deprecated since 1.5.0
     *
     * It's not possible to use this method with new stockManager and stockAvailable features
     * Now this method do nothing
     *
     * @see StockManager if you want to manage real stock
     * @see StockAvailable if you want to manage available quantities for sale on your shop(s)
     *
     * @deprecated 1.5.3.0
     * @return false
     */
    public static function updateQuantity()
    {
    }
    /**
     * @deprecated since 1.5.0
     *
     * It's not possible to use this method with new stockManager and stockAvailable features
     * Now this method do nothing
     *
     * @deprecated 1.5.3.0
     * @see StockManager if you want to manage real stock
     * @see StockAvailable if you want to manage available quantities for sale on your shop(s)
     * @return false
     */
    public static function reinjectQuantities()
    {
    }
    public static function isAvailableWhenOutOfStock($out_of_stock)
    {
    }
    /**
     * Check product availability
     *
     * @param int $qty Quantity desired
     * @return bool True if product is available with this quantity
     */
    public function checkQty($qty)
    {
    }
    /**
     * Check if there is no default attribute and create it if not
     */
    public function checkDefaultAttributes()
    {
    }
    public static function getAttributesColorList(array $products, $have_stock = \true)
    {
    }
    /**
     * Get all available attribute groups
     *
     * @param int $id_lang Language id
     * @return array Attribute groups
     */
    public function getAttributesGroups($id_lang)
    {
    }
    /**
     * Delete product accessories.
     * Wrapper to static method deleteAccessories($product_id).
     *
     * @return mixed Deletion result
     */
    public function deleteAccessories()
    {
    }
    /**
     * Delete product from other products accessories
     *
     * @return mixed Deletion result
     */
    public function deleteFromAccessories()
    {
    }
    /**
     * Get product accessories (only names)
     *
     * @param int $id_lang Language id
     * @param int $id_product Product id
     * @return array Product accessories
     */
    public static function getAccessoriesLight($id_lang, $id_product)
    {
    }
    /**
     * Get product accessories
     *
     * @param int $id_lang Language id
     * @return array Product accessories
     */
    public function getAccessories($id_lang, $active = \true)
    {
    }
    public static function getAccessoryById($accessory_id)
    {
    }
    /**
     * Link accessories with product
     * Wrapper to static method changeAccessories($accessories_id, $product_id).
     *
     * @param array $accessories_id Accessories ids
     */
    public function changeAccessories($accessories_id)
    {
    }
    /**
     * Link accessories with product. No need to inflate a full Product (better performances).
     *
     * @param array $accessories_id Accessories ids
     * @param int The product ID to link accessories on.
     */
    public static function changeAccessoriesForProduct($accessories_id, $product_id)
    {
    }
    /**
     * Add new feature to product
     */
    public function addFeaturesCustomToDB($id_value, $lang, $cust)
    {
    }
    public function addFeaturesToDB($id_feature, $id_value, $cust = 0)
    {
    }
    public static function addFeatureProductImport($id_product, $id_feature, $id_feature_value)
    {
    }
    /**
     * Select all features for the object
     *
     * @return array Array with feature product's data
     */
    public function getFeatures()
    {
    }
    public static function getFeaturesStatic($id_product)
    {
    }
    public static function cacheProductsFeatures($product_ids)
    {
    }
    public static function cacheFrontFeatures($product_ids, $id_lang)
    {
    }
    /**
     * Admin panel product search
     *
     * @param int $id_lang Language id
     * @param string $query Search query
     * @return array Matching products
     */
    public static function searchByName($id_lang, $query, \Context $context = \null)
    {
    }
    /**
     * Duplicate attributes when duplicating a product
     *
     * @param int $id_product_old Old product id
     * @param int $id_product_new New product id
     */
    public static function duplicateAttributes($id_product_old, $id_product_new)
    {
    }
    public static function getAttributesImpacts($id_product)
    {
    }
    /**
     * Get product attribute image associations
     * @param int $id_product_attribute
     * @return array
     */
    public static function _getAttributeImageAssociations($id_product_attribute)
    {
    }
    public static function duplicateAccessories($id_product_old, $id_product_new)
    {
    }
    public static function duplicateTags($id_product_old, $id_product_new)
    {
    }
    public static function duplicateDownload($id_product_old, $id_product_new)
    {
    }
    public static function duplicateAttachments($id_product_old, $id_product_new)
    {
    }
    /**
     * Duplicate features when duplicating a product
     *
     * @param int $id_product_old Old product id
     * @param int $id_product_old New product id
     */
    public static function duplicateFeatures($id_product_old, $id_product_new)
    {
    }
    protected static function _getCustomizationFieldsNLabels($product_id, $id_shop = \null)
    {
    }
    public static function duplicateSpecificPrices($old_product_id, $product_id)
    {
    }
    public static function duplicateCustomizationFields($old_product_id, $product_id)
    {
    }
    /**
     * Adds suppliers from old product onto a newly duplicated product
     *
     * @param int $id_product_old
     * @param int $id_product_new
     */
    public static function duplicateSuppliers($id_product_old, $id_product_new)
    {
    }
    /**
     * Get the link of the product page of this product
     */
    public function getLink(\Context $context = \null)
    {
    }
    public function getTags($id_lang)
    {
    }
    public static function defineProductImage($row, $id_lang)
    {
    }
    public static function getProductProperties($id_lang, $row, \Context $context = \null)
    {
    }
    public static function getTaxesInformations($row, \Context $context = \null)
    {
    }
    public static function getProductsProperties($id_lang, $query_result)
    {
    }
    /*
     * Select all features for a given language
     *
     * @param $id_lang Language id
     * @return array Array with feature's data
     */
    public static function getFrontFeaturesStatic($id_lang, $id_product)
    {
    }
    public function getFrontFeatures($id_lang)
    {
    }
    public static function getAttachmentsStatic($id_lang, $id_product)
    {
    }
    public function getAttachments($id_lang)
    {
    }
    /*
     ** Customization management
     */
    public static function getAllCustomizedDatas($id_cart, $id_lang = \null, $only_in_cart = \true, $id_shop = \null, $id_customization = \null)
    {
    }
    public static function addCustomizationPrice(&$products, &$customized_datas)
    {
    }
    /*
     ** Add customization price for a single product
     */
    public static function addProductCustomizationPrice(&$product, &$customized_datas)
    {
    }
    /*
     ** Customization fields' label management
     */
    protected function _checkLabelField($field, $value)
    {
    }
    protected function _deleteOldLabels()
    {
    }
    protected function _createLabel($languages, $type)
    {
    }
    public function createLabels($uploadable_files, $text_fields)
    {
    }
    public function updateLabels()
    {
    }
    public function getCustomizationFields($id_lang = \false, $id_shop = \null)
    {
    }
    public function getCustomizationFieldIds()
    {
    }
    public function getRequiredCustomizableFields()
    {
    }
    public static function getRequiredCustomizableFieldsStatic($id)
    {
    }
    public function hasAllRequiredCustomizableFields(\Context $context = \null)
    {
    }
    /**
     * Return the list of old temp products
     *
     * @return array
     */
    public static function getOldTempProducts()
    {
    }
    /**
     * Checks if the product is in at least one of the submited categories
     *
     * @param int $id_product
     * @param array $categories array of category arrays
     * @return bool is the product in at least one category
     */
    public static function idIsOnCategoryId($id_product, $categories)
    {
    }
    public function getNoPackPrice()
    {
    }
    public function checkAccess($id_customer)
    {
    }
    public static function checkAccessStatic($id_product, $id_customer)
    {
    }
    /**
     * Add a stock movement for current product
     *
     * Since 1.5, this method only permit to add/remove available quantities of the current product in the current shop
     *
     * @see StockManager if you want to manage real stock
     * @see StockAvailable if you want to manage available quantities for sale on your shop(s)
     *
     * @deprecated since 1.5.0
     *
     * @param int $quantity
     * @param int $id_reason - useless
     * @param int $id_product_attribute
     * @param int $id_order - DEPRECATED
     * @param int $id_employee - DEPRECATED
     * @return bool
     */
    public function addStockMvt($quantity, $id_reason, $id_product_attribute = \null, $id_order = \null, $id_employee = \null)
    {
    }
    /**
     * @deprecated since 1.5.0
     */
    public function getStockMvts($id_lang)
    {
    }
    public static function getUrlRewriteInformations($id_product)
    {
    }
    public function getIdTaxRulesGroup()
    {
    }
    public static function getIdTaxRulesGroupByIdProduct($id_product, \Context $context = \null)
    {
    }
    /**
     * Returns tax rate.
     *
     * @param Address|null $address
     * @return float The total taxes rate applied to the product
     */
    public function getTaxesRate(\Address $address = \null)
    {
    }
    /**
     * Webservice getter : get product features association
     *
     * @return array
     */
    public function getWsProductFeatures()
    {
    }
    /**
     * Webservice setter : set product features association
     *
     * @param $product_features Product Feature ids
     * @return bool
     */
    public function setWsProductFeatures($product_features)
    {
    }
    /**
     * Webservice getter : get virtual field default combination
     *
     * @return int
     */
    public function getWsDefaultCombination()
    {
    }
    /**
     * Webservice setter : set virtual field default combination
     *
     * @param int $id_combination id default combination
     * @return bool
     */
    public function setWsDefaultCombination($id_combination)
    {
    }
    /**
     * Webservice getter : get category ids of current product for association
     *
     * @return array
     */
    public function getWsCategories()
    {
    }
    /**
     * Webservice setter : set category ids of current product for association
     *
     * @param array $category_ids category ids
     * @return bool
     */
    public function setWsCategories($category_ids)
    {
    }
    /**
     * Webservice getter : get product accessories ids of current product for association
     *
     * @return array
     */
    public function getWsAccessories()
    {
    }
    /**
     * Webservice setter : set product accessories ids of current product for association
     *
     * @param $accessories product ids
     */
    public function setWsAccessories($accessories)
    {
    }
    /**
     * Webservice getter : get combination ids of current product for association
     *
     * @return array
     */
    public function getWsCombinations()
    {
    }
    /**
     * Webservice setter : set combination ids of current product for association
     *
     * @param $combinations combination ids
     */
    public function setWsCombinations($combinations)
    {
    }
    /**
     * Webservice getter : get product option ids of current product for association
     *
     * @return array
     */
    public function getWsProductOptionValues()
    {
    }
    /**
     * Webservice getter : get virtual field position in category
     *
     * @return int
     */
    public function getWsPositionInCategory()
    {
    }
    /**
     * Webservice setter : set virtual field position in category
     *
     * @return bool
     */
    public function setWsPositionInCategory($position)
    {
    }
    /**
     * Webservice getter : get virtual field id_default_image in category
     *
     * @return int
     */
    public function getCoverWs()
    {
    }
    /**
     * Webservice setter : set virtual field id_default_image in category
     *
     * @return bool
     */
    public function setCoverWs($id_image)
    {
    }
    /**
     * Webservice getter : get image ids of current product for association
     *
     * @return array
     */
    public function getWsImages()
    {
    }
    public function getWsStockAvailables()
    {
    }
    public function getWsTags()
    {
    }
    /**
     * Webservice setter : set tag ids of current product for association
     *
     * @param $tag_ids tag ids
     */
    public function setWsTags($tag_ids)
    {
    }
    /**
     * Delete products tags entries without delete tags for webservice usage
     *
     * @return array Deletion result
     */
    public function deleteWsTags()
    {
    }
    public function getWsManufacturerName()
    {
    }
    public static function resetEcoTax()
    {
    }
    /**
     * Set Group reduction if needed
     */
    public function setGroupReduction()
    {
    }
    /**
     * Checks if reference exists
     * @return bool
     */
    public function existsRefInDatabase($reference)
    {
    }
    /**
     * Get all product attributes ids
     *
     * @since 1.5.0
     * @param int $id_product the id of the product
     * @return array product attribute id list
     */
    public static function getProductAttributesIds($id_product, $shop_only = \false)
    {
    }
    /**
     * Get label by lang and value by lang too
     * @param int $id_product
     * @param int $product_attribute_id
     * @return array
     */
    public static function getAttributesParams($id_product, $id_product_attribute)
    {
    }
    /**
     * @param int $id_product
     */
    public static function getAttributesInformationsByProduct($id_product)
    {
    }
    /**
     * @return bool
     */
    public function hasCombinations()
    {
    }
    public static function getIdProductAttributesByIdAttributes($id_product, $id_attributes, $find_best = \false)
    {
    }
    /**
     * Get the combination url anchor of the product
     *
     * @param int $id_product_attribute
     * @return string
     */
    public function getAnchor($id_product_attribute, $with_id = \false)
    {
    }
    /**
     * Gets the name of a given product, in the given lang
     *
     * @since 1.5.0
     * @param int $id_product
     * @param int $id_product_attribute Optional
     * @param int $id_lang Optional
     * @return string
     */
    public static function getProductName($id_product, $id_product_attribute = \null, $id_lang = \null)
    {
    }
    public function addWs($autodate = \true, $null_values = \false)
    {
    }
    public function updateWs($null_values = \false)
    {
    }
    /**
     * For a given product, returns its real quantity
     *
     * @since 1.5.0
     * @param int $id_product
     * @param int $id_product_attribute
     * @param int $id_warehouse
     * @param int $id_shop
     * @return int real_quantity
     */
    public static function getRealQuantity($id_product, $id_product_attribute = 0, $id_warehouse = 0, $id_shop = \null)
    {
    }
    /**
     * For a given product, tells if it uses the advanced stock management
     *
     * @since 1.5.0
     * @param int $id_product
     * @return bool
     */
    public static function usesAdvancedStockManagement($id_product)
    {
    }
    /**
     * This method allows to flush price cache
     *
     * @since 1.5.0
     */
    public static function flushPriceCache()
    {
    }
    /**
     * Get list of parent categories
     *
     * @since 1.5.0
     * @param int $id_lang
     * @return array
     */
    public function getParentCategories($id_lang = \null)
    {
    }
    /**
     * Fill the variables used for stock management
     */
    public function loadStockData()
    {
    }
    public function useAdvancedStockManagement()
    {
    }
    public function setAdvancedStockManagement($value)
    {
    }
    /**
     * get the default category according to the shop
     */
    public function getDefaultCategory()
    {
    }
    public static function getShopsByProduct($id_product)
    {
    }
    /**
     * Remove all downloadable files for product and its attributes
     *
     * @return bool
     */
    public function deleteDownload()
    {
    }
    /**
     * @deprecated 1.5.0.10
     * @see Product::getAttributeCombinations()
     * @param int $id_lang
     */
    public function getAttributeCombinaisons($id_lang)
    {
    }
    /**
     * @deprecated 1.5.0.10
     * @see Product::deleteAttributeCombination()
     * @param int $id_product_attribute
     */
    public function deleteAttributeCombinaison($id_product_attribute)
    {
    }
    /**
     * Get the product type (simple, virtual, pack)
     * @since in 1.5.0
     *
     * @return int
     */
    public function getType()
    {
    }
    public function hasAttributesInOtherShops()
    {
    }
    public static function getIdTaxRulesGroupMostUsed()
    {
    }
    /**
     * For a given ean13 reference, returns the corresponding id
     *
     * @param string $ean13
     * @return int id
     */
    public static function getIdByEan13($ean13)
    {
    }
    public function getWsType()
    {
    }
    /*
        Create the link rewrite if not exists or invalid on product creation
    */
    public function modifierWsLinkRewrite()
    {
    }
    public function getWsProductBundle()
    {
    }
    public function setWsType($type_str)
    {
    }
    public function setWsProductBundle($items)
    {
    }
    public function isColorUnavailable($id_attribute, $id_shop)
    {
    }
    public static function getColorsListCacheId($id_product, $full = \true)
    {
    }
    public static function setPackStockType($id_product, $pack_stock_type)
    {
    }
    /**
     * Gets a list of IDs from a list of IDs/Refs. The result will avoid duplicates, and checks if given IDs/Refs exists in DB.
     * Useful when a product list should be checked before a bulk operation on them (Only 1 query => performances).
     *
     * @return array The IDs list, whithout duplicate and only existing ones.
     */
    public static function getExistingIdsFromIdsOrRefs($ids_or_refs)
    {
    }
    /**
     * Get object of redirect_type
     *
     * @return bool|string
     */
    public function getRedirectType()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class SearchEngine
 */
class SearchEngine extends \ObjectModel
{
    public $server;
    public $getvar;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'search_engine', 'primary' => 'id_search_engine', 'fields' => array('server' => array('type' => self::TYPE_STRING, 'validate' => 'isUrl', 'required' => \true), 'getvar' => array('type' => self::TYPE_STRING, 'validate' => 'isModuleName', 'required' => \true)));
    /**
     * Get keywords
     *
     * @param string $url
     *
     * @return bool|string
     */
    public static function getKeywords($url)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Store
 */
class Store extends \ObjectModel
{
    /** @var int Store id */
    public $id;
    /** @var int Country id */
    public $id_country;
    /** @var int State id */
    public $id_state;
    /** @var string Store name */
    public $name;
    /** @var string Address first line */
    public $address1;
    /** @var string Address second line (optional) */
    public $address2;
    /** @var string Postal code */
    public $postcode;
    /** @var string City */
    public $city;
    /** @var float Latitude */
    public $latitude;
    /** @var float Longitude */
    public $longitude;
    /** @var string Store hours (PHP serialized) */
    public $hours;
    /** @var string Phone number */
    public $phone;
    /** @var string Fax number */
    public $fax;
    /** @var string Note */
    public $note;
    /** @var string e-mail */
    public $email;
    /** @var string Object creation date */
    public $date_add;
    /** @var string Object last modification date */
    public $date_upd;
    /** @var bool Store status */
    public $active = \true;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'store', 'primary' => 'id_store', 'fields' => array('id_country' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_state' => array('type' => self::TYPE_INT, 'validate' => 'isNullOrUnsignedId'), 'name' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'required' => \true, 'size' => 128), 'address1' => array('type' => self::TYPE_STRING, 'validate' => 'isAddress', 'required' => \true, 'size' => 128), 'address2' => array('type' => self::TYPE_STRING, 'validate' => 'isAddress', 'size' => 128), 'postcode' => array('type' => self::TYPE_STRING, 'size' => 12), 'city' => array('type' => self::TYPE_STRING, 'validate' => 'isCityName', 'required' => \true, 'size' => 64), 'latitude' => array('type' => self::TYPE_FLOAT, 'validate' => 'isCoordinate', 'size' => 13), 'longitude' => array('type' => self::TYPE_FLOAT, 'validate' => 'isCoordinate', 'size' => 13), 'hours' => array('type' => self::TYPE_STRING, 'validate' => 'isJson', 'size' => 65000), 'phone' => array('type' => self::TYPE_STRING, 'validate' => 'isPhoneNumber', 'size' => 16), 'fax' => array('type' => self::TYPE_STRING, 'validate' => 'isPhoneNumber', 'size' => 16), 'note' => array('type' => self::TYPE_STRING, 'validate' => 'isCleanHtml', 'size' => 65000), 'email' => array('type' => self::TYPE_STRING, 'validate' => 'isEmail', 'size' => 128), 'active' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool', 'required' => \true), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'), 'date_upd' => array('type' => self::TYPE_DATE, 'validate' => 'isDate')));
    protected $webserviceParameters = array('fields' => array('id_country' => array('xlink_resource' => 'countries'), 'id_state' => array('xlink_resource' => 'states'), 'hours' => array('getter' => 'getWsHours', 'setter' => 'setWsHours')));
    /**
     * StoreCore constructor.
     *
     * @param null $idStore
     * @param null $idLang
     */
    public function __construct($idStore = \null, $idLang = \null)
    {
    }
    /**
     * Get Stores
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public static function getStores()
    {
    }
    /**
     * Get hours for webservice
     *
     * @return string
     */
    public function getWsHours()
    {
    }
    /**
     * Set hours for webservice
     *
     * @param string $hours
     *
     * @return bool
     */
    public function setWsHours($hours)
    {
    }
    /**
     * This method is allow to know if a store exists for AdminImportController
     *
     * @return bool
     *
     * @since 1.7.0
     */
    public static function storeExists($idStore)
    {
    }
}
/**
 * class ProductPresenterFactory
 */
class ProductPresenterFactory
{
    /**
     * ProductPresenterFactoryCore constructor.
     *
     * @param Context                $context
     * @param \TaxConfiguration|null $taxConfiguration
     */
    public function __construct(\Context $context, \TaxConfiguration $taxConfiguration = \null)
    {
    }
    /**
     * Get presentation settings
     *
     * @return ProductPresentationSettings
     */
    public function getPresentationSettings()
    {
    }
    /**
     * Get presenter
     *
     * @return ProductListingPresenter|ProductPresenter
     */
    public function getPresenter()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Feature
 */
class Feature extends \ObjectModel
{
    /** @var string Name */
    public $name;
    /** @var int $position */
    public $position;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'feature', 'primary' => 'id_feature', 'multilang' => \true, 'fields' => array(
        'position' => array('type' => self::TYPE_INT, 'validate' => 'isInt'),
        /* Lang fields */
        'name' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'required' => \true, 'size' => 128),
    ));
    protected $webserviceParameters = array('objectsNodeName' => 'product_features', 'objectNodeName' => 'product_feature', 'fields' => array());
    /**
     * Get a feature data for a given id_feature and id_lang
     *
     * @param int $idLang    Language ID
     * @param int $idFeature Feature ID
     *
     * @return array Array with feature's data
     */
    public static function getFeature($idLang, $idFeature)
    {
    }
    /**
     * Get all features for a given language
     *
     * @param int $idLang Language id
     *
     * @return array Multiple arrays with feature's data
     */
    public static function getFeatures($idLang, $withShop = \true)
    {
    }
    /**
     * Delete several objects from database
     *
     * @param array $selection Array with items to delete
     * @return bool Deletion result
     */
    public function deleteSelection($selection)
    {
    }
    /**
     * Adds current Feature as a new Object to the database
     *
     * @param bool $autoDate   Automatically set `date_upd` and `date_add` columns
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Indicates whether the Feature has been successfully added
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function add($autoDate = \true, $nullValues = \false)
    {
    }
    /**
     * Updates the current Feature in the database
     *
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Indicates whether the Feature has been successfully updated
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function update($nullValues = \false)
    {
    }
    /**
     * Deletes current Feature from the database
     *
     * @return bool `true` if delete was successful
     * @throws PrestaShopException
     */
    public function delete()
    {
    }
    /**
    * Count number of features for a given language
    *
    * @param int $idLang Language id
    *
    *@return int Number of feature
    */
    public static function nbFeatures($idLang)
    {
    }
    /**
     * Create a feature from import
     *
     * @param string $name     Feature name
     * @param bool   $position Feature position
     *
     * @return int Feature ID
     */
    public static function addFeatureImport($name, $position = \false)
    {
    }
    /**
     * This metohd is allow to know if a feature is used or active
     *
     * @return bool
     *
     * @since 1.5.0.1
     */
    public static function isFeatureActive()
    {
    }
    /**
     * Move a feature
     *
     * @param bool $way Up (1)  or Down (0)
     * @param int  $position
     *
     * @return bool Update result
     */
    public function updatePosition($way, $position, $idFeature = \null)
    {
    }
    /**
     * Reorder feature position
     * Call it after deleting a feature.
     *
     * @return bool $return
     */
    public static function cleanPositions()
    {
    }
    /**
     * getHigherPosition
     *
     * Get the higher feature position
     *
     * @return int $position
     */
    public static function getHigherPosition()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class FeatureValue
 */
class FeatureValue extends \ObjectModel
{
    /** @var int Group id which attribute belongs */
    public $id_feature;
    /** @var string Name */
    public $value;
    /** @var bool Custom */
    public $custom = 0;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'feature_value', 'primary' => 'id_feature_value', 'multilang' => \true, 'fields' => array(
        'id_feature' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true),
        'custom' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        /* Lang fields */
        'value' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'required' => \true, 'size' => 255),
    ));
    protected $webserviceParameters = array('objectsNodeName' => 'product_feature_values', 'objectNodeName' => 'product_feature_value', 'fields' => array('id_feature' => array('xlink_resource' => 'product_features')));
    /**
     * Get all values for a given feature
     *
     * @param bool $idFeature Feature id
     *
     * @return array Array with feature's values
     */
    public static function getFeatureValues($idFeature)
    {
    }
    /**
     * Get all values for a given feature and language
     *
     * @param int  $idLang    Language id
     * @param bool $idFeature Feature id
     *
     * @return array Array with feature's values
     */
    public static function getFeatureValuesWithLang($idLang, $idFeature, $custom = \false)
    {
    }
    /**
     * Get all language for a given value
     *
     * @param bool $idFeatureValue Feature value id
     *
     * @return array Array with value's languages
     */
    public static function getFeatureValueLang($idFeatureValue)
    {
    }
    /**
     * Select the good lang in tab
     *
     * @param array $lang   Array with all language
     * @param int   $idLang Language id
     *
     * @return string String value name selected
     */
    public static function selectLang($lang, $idLang)
    {
    }
    /**
     * Add FeatureValue from import
     *
     * @param  int    $idFeature
     * @param  string $value
     * @param null    $idProduct
     * @param null    $idLang
     * @param bool    $custom
     *
     * @return int
     */
    public static function addFeatureValueImport($idFeature, $value, $idProduct = \null, $idLang = \null, $custom = \false)
    {
    }
    /**
     * Adds current FeatureValue as a new Object to the database
     *
     * @param bool $autoDate   Automatically set `date_upd` and `date_add` columns
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Indicates whether the FeatureValue has been successfully added
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function add($autoDate = \true, $nullValues = \false)
    {
    }
    /**
     * Updates the current FeatureValue in the database
     *
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Indicates whether the FeatureValue has been successfully updated
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function update($nullValues = \false)
    {
    }
    /**
     * Deletes current FeatureValue from the database
     *
     * @return bool `true` if delete was successful
     * @throws PrestaShopException
     */
    public function delete()
    {
    }
}
class Carrier extends \ObjectModel
{
    /**
     * getCarriers method filter.
     */
    const PS_CARRIERS_ONLY = 1;
    const CARRIERS_MODULE = 2;
    const CARRIERS_MODULE_NEED_RANGE = 3;
    const PS_CARRIERS_AND_CARRIER_MODULES_NEED_RANGE = 4;
    const ALL_CARRIERS = 5;
    const SHIPPING_METHOD_DEFAULT = 0;
    const SHIPPING_METHOD_WEIGHT = 1;
    const SHIPPING_METHOD_PRICE = 2;
    const SHIPPING_METHOD_FREE = 3;
    const SHIPPING_PRICE_EXCEPTION = 0;
    const SHIPPING_WEIGHT_EXCEPTION = 1;
    const SHIPPING_SIZE_EXCEPTION = 2;
    const SORT_BY_PRICE = 0;
    const SORT_BY_POSITION = 1;
    const SORT_BY_ASC = 0;
    const SORT_BY_DESC = 1;
    /** @var int common id for carrier historization */
    public $id_reference;
    /** @var string Name */
    public $name;
    /** @var string URL with a '@' for */
    public $url;
    /** @var string Delay needed to deliver customer */
    public $delay;
    /** @var bool Carrier statuts */
    public $active = \true;
    /** @var bool True if carrier has been deleted (staying in database as deleted) */
    public $deleted = 0;
    /** @var bool Active or not the shipping handling */
    public $shipping_handling = \true;
    /** @var int Behavior taken for unknown range */
    public $range_behavior;
    /** @var bool Carrier module */
    public $is_module;
    /** @var bool Free carrier */
    public $is_free = \false;
    /** @var int shipping behavior: by weight or by price */
    public $shipping_method = 0;
    /** @var bool Shipping external */
    public $shipping_external = 0;
    /** @var string Shipping external */
    public $external_module_name = \null;
    /** @var bool Need Range */
    public $need_range = 0;
    /** @var int Position */
    public $position;
    /** @var int maximum package width managed by the transporter */
    public $max_width;
    /** @var int maximum package height managed by the transporter */
    public $max_height;
    /** @var int maximum package deep managed by the transporter */
    public $max_depth;
    /** @var int maximum package weight managed by the transporter */
    public $max_weight;
    /** @var int grade of the shipping delay (0 for longest, 9 for shortest) */
    public $grade;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'carrier', 'primary' => 'id_carrier', 'multilang' => \true, 'multilang_shop' => \true, 'fields' => array(
        /* Classic fields */
        'id_reference' => array('type' => self::TYPE_INT),
        'name' => array('type' => self::TYPE_STRING, 'validate' => 'isCarrierName', 'required' => \true, 'size' => 64),
        'active' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool', 'required' => \true),
        'is_free' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'url' => array('type' => self::TYPE_STRING, 'validate' => 'isAbsoluteUrl'),
        'shipping_handling' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'shipping_external' => array('type' => self::TYPE_BOOL),
        'range_behavior' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'shipping_method' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'),
        'max_width' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'),
        'max_height' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'),
        'max_depth' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'),
        'max_weight' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat'),
        'grade' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt', 'size' => 1),
        'external_module_name' => array('type' => self::TYPE_STRING, 'size' => 64),
        'is_module' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'need_range' => array('type' => self::TYPE_BOOL),
        'position' => array('type' => self::TYPE_INT),
        'deleted' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        /* Lang fields */
        'delay' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'required' => \true, 'size' => 512),
    ));
    protected static $price_by_weight = array();
    protected static $price_by_weight2 = array();
    protected static $price_by_price = array();
    protected static $price_by_price2 = array();
    protected static $cache_tax_rule = array();
    protected $webserviceParameters = array('fields' => array('deleted' => array(), 'is_module' => array(), 'id_tax_rules_group' => array('getter' => 'getIdTaxRulesGroup', 'setter' => 'setTaxRulesGroup', 'xlink_resource' => array('resourceName' => 'tax_rule_groups'))));
    /**
     * CarrierCore constructor.
     *
     * @param int|null $id      Carrier ID
     * @param int|null $id_lang Language ID
     */
    public function __construct($id = \null, $id_lang = \null)
    {
    }
    /**
     * Adds current Carrier as a new Object to the database.
     *
     * @param bool $autoDate   Automatically set `date_upd` and `date_add` columns
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Whether the Carrier has been successfully added
     *
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function add($autoDate = \true, $nullValues = \false)
    {
    }
    /**
     * @since 1.5.0
     * @see ObjectModel::delete()
     */
    public function delete()
    {
    }
    /**
     * Change carrier id in delivery prices when updating a carrier.
     *
     * @param int $id_old Old Carrier ID
     */
    public function setConfiguration($id_old)
    {
    }
    /**
     * Get delivery price for a given order.
     *
     * @param float $total_weight Total order weight
     * @param int   $id_zone      Zone ID (for customer delivery address)
     *
     * @return float|bool Delivery price, false if not possible
     */
    public function getDeliveryPriceByWeight($total_weight, $id_zone)
    {
    }
    /**
     * Get delivery price by total weight.
     *
     * @param int   $id_carrier   Carrier ID
     * @param float $total_weight Total weight
     * @param int   $id_zone      Zone ID
     *
     * @return float|bool Delivery price, false if not possible
     */
    public static function checkDeliveryPriceByWeight($id_carrier, $total_weight, $id_zone)
    {
    }
    /**
     * Get maximum delivery price when range weight is used.
     *
     * @param int $id_zone Zone ID
     *
     * @return false|null|string Maximum delivery price
     */
    public function getMaxDeliveryPriceByWeight($id_zone)
    {
    }
    /**
     * Get delivery price for a given order by total order price MINUS shipping costs.
     *
     * @param float    $order_total Order total to pay
     * @param int      $id_zone     Zone id (for customer delivery address)
     * @param int|null $id_currency Currency ID
     *
     * @return float Maximum delivery price
     */
    public function getDeliveryPriceByPrice($order_total, $id_zone, $id_currency = \null)
    {
    }
    /**
     * Get delivery price for a given order.
     *
     * @param int      $id_carrier  Carrier ID
     * @param float    $order_total Order total to pay
     * @param int      $id_zone     Zone id (for customer delivery address)
     * @param int|null $id_currency Currency ID
     *
     * @return float Delivery price
     */
    public static function checkDeliveryPriceByPrice($id_carrier, $order_total, $id_zone, $id_currency = \null)
    {
    }
    /**
     * Get maximum delivery price by order total MINUS shipping costs.
     *
     * @param int $id_zone Zone ID
     *
     * @return float Maximum delivery price
     */
    public function getMaxDeliveryPriceByPrice($id_zone)
    {
    }
    /**
     * Get delivery prices for a given shipping method (price/weight).
     *
     * @param string $range_table Table name (price or weight)
     * @param int    $id_carrier  Carrier ID
     *
     * @return array Delivery prices
     */
    public static function getDeliveryPriceByRanges($range_table, $id_carrier)
    {
    }
    /**
     * Get all carriers in a given language.
     *
     * @param int  $id_lang         Language id
     * @param int  $modules_filters Possible values:
     *                              - PS_CARRIERS_ONLY
     *                              - CARRIERS_MODULE
     *                              - CARRIERS_MODULE_NEED_RANGE
     *                              - PS_CARRIERS_AND_CARRIER_MODULES_NEED_RANGE
     *                              - ALL_CARRIERS
     * @param bool $active          Returns only active carriers when true
     *
     * @return array Carriers
     */
    public static function getCarriers($id_lang, $active = \false, $delete = \false, $id_zone = \false, $ids_group = \null, $modules_filters = self::PS_CARRIERS_ONLY)
    {
    }
    /**
     * Get most used Tax rules group.
     *
     * @return false|null|string Most used Tax rules group ID
     */
    public static function getIdTaxRulesGroupMostUsed()
    {
    }
    /**
     * Get the countries to which can be delivered.
     *
     * @param int  $id_lang          Language ID
     * @param bool $active_countries Only return active countries when true
     * @param bool $active_carriers  Only return active carriers when true
     * @param null $contain_states   Only return countries with states
     *
     * @return array Countries to which can be delivered
     */
    public static function getDeliveredCountries($id_lang, $active_countries = \false, $active_carriers = \false, $contain_states = \null)
    {
    }
    /**
     * Return the default carrier to use.
     *
     * @param array $carriers        Carriers
     * @param int   $default_carrier The last selected Carrier ID
     *
     * @return number the id of the default carrier
     */
    public static function getDefaultCarrierSelection($carriers, $default_carrier = 0)
    {
    }
    /**
     * Get available Carriers for Order.
     *
     * @param int       $id_zone Zone ID
     * @param array     $groups  Group of the Customer
     * @param Cart|null $cart    Optional Cart object
     * @param array     &$error  Contains an error message if an error occurs
     *
     * @return array Carriers for the order
     */
    public static function getCarriersForOrder($id_zone, $groups = \null, $cart = \null, &$error = array())
    {
    }
    public static function checkCarrierZone($id_carrier, $id_zone)
    {
    }
    /**
     * Get all zones.
     *
     * @return array Zones
     */
    public function getZones()
    {
    }
    /**
     * Get a specific zones.
     *
     * @return array Zone
     */
    public function getZone($id_zone)
    {
    }
    /**
     * Add zone.
     */
    public function addZone($id_zone)
    {
    }
    /**
     * Delete zone.
     */
    public function deleteZone($id_zone)
    {
    }
    /**
     * Gets a specific group.
     *
     * @since 1.5.0
     *
     * @return array Group
     */
    public function getGroups()
    {
    }
    /**
     * Clean delivery prices (weight/price).
     *
     * @param string $rangeTable Table name to clean (weight or price according to shipping method)
     *
     * @return bool Deletion result
     */
    public function deleteDeliveryPrice($range_table)
    {
    }
    /**
     * Add new delivery prices.
     *
     * @param array $priceList Prices list in multiple arrays (changed to array since 1.5.0)
     *
     * @return bool Insertion result
     */
    public function addDeliveryPrice($price_list, $delete = \false)
    {
    }
    /**
     * Copy old carrier informations when update carrier.
     *
     * @param int $oldId Old id carrier (copy from that id)
     */
    public function copyCarrierData($old_id)
    {
    }
    /**
     * Get carrier using the reference id.
     */
    public static function getCarrierByReference($id_reference, $id_lang = \null)
    {
    }
    /**
     * Check if Carrier is used (at least one order placed).
     *
     * @return int Order count for this carrier
     */
    public function isUsed()
    {
    }
    /**
     * Get shipping method of the carrier (free, weight or price).
     *
     * @return int Shipping method enumerator
     */
    public function getShippingMethod()
    {
    }
    /**
     * Get range table of carrier.
     *
     * @return bool|string Range table, false if not found
     */
    public function getRangeTable()
    {
    }
    /**
     * Get Range object, price or weight, depending on the shipping method given.
     *
     * @param int|bool $shipping_method Shipping method enumerator
     *                                  Use false in order to let this method find the correct one
     *
     * @return bool|RangePrice|RangeWeight
     */
    public function getRangeObject($shipping_method = \false)
    {
    }
    /**
     * Get range suffix.
     *
     * @param Currency|null $currency Currency
     *
     * @return string Currency sign in suffix to use for the range
     */
    public function getRangeSuffix($currency = \null)
    {
    }
    /**
     * Get TaxRulesGroup ID for this Carrier.
     *
     * @param Context|null $context Context
     *
     * @return false|null|string TaxrulesGroup ID
     *                           false if not found
     */
    public function getIdTaxRulesGroup(\Context $context = \null)
    {
    }
    /**
     * Get TaxRulesGroup ID for a given Carrier.
     *
     * @param int          $id_carrier Carrier ID
     * @param Context|null $context    Context
     *
     * @return false|null|string TaxRulesGroup ID
     *                           false if not found
     */
    public static function getIdTaxRulesGroupByIdCarrier($id_carrier, \Context $context = \null)
    {
    }
    /**
     * Set TaxRulesGroup.
     *
     * @param int  $id_tax_rules_group Set the TaxRulesGroup with the given ID
     *                                 as this Carrier's TaxRulesGroup
     * @param bool $all_shops          True if this should be done for all shops
     *
     * @return bool Whether the TaxRulesGroup has been succesfully set
     *              for this Carrier in this Shop or all given Shops
     */
    public function setTaxRulesGroup($id_tax_rules_group, $all_shops = \false)
    {
    }
    /**
     * Delete TaxRulesGroup from this Carrier.
     *
     * @param array|null $shops Shops
     *
     * @return bool Whether the TaxRulesGroup has been successfully removed from this Carrier
     */
    public function deleteTaxRulesGroup(array $shops = \null)
    {
    }
    /**
     * Returns the Tax rates associated to the Carrier.
     *
     * @since 1.5
     *
     * @param Address $address Address
     *
     * @return float Total Tax rate for this Carrier
     */
    public function getTaxesRate(\Address $address)
    {
    }
    /**
     * Returns the taxes calculator associated to the carrier.
     *
     * @since 1.5
     *
     * @param Address $address Address
     *
     * @return TaxCalculator Tax calculator object
     */
    public function getTaxCalculator(\Address $address, $id_order = \null, $use_average_tax_of_products = \false)
    {
    }
    /**
     * This tricky method generates a SQL clause to check if ranged data are overloaded by multishop.
     *
     * @since 1.5.0
     *
     * @param string $range_table Range table
     *
     * @return string SQL quoer to get the delivery range table in this Shop(Group)
     */
    public static function sqlDeliveryRangeShop($range_table, $alias = 'd')
    {
    }
    /**
     * Moves a carrier.
     *
     * @since 1.5.0
     *
     * @param bool $way      Up (1) or Down (0)
     * @param int  $position Current position of the Carrier
     *
     * @return bool Whether the update was successful
     */
    public function updatePosition($way, $position)
    {
    }
    /**
     * Reorder Carrier positions
     * Called after deleting a Carrier.
     *
     * @since 1.5.0
     *
     * @return bool $return
     */
    public static function cleanPositions()
    {
    }
    /**
     * Gets the highest carrier position.
     *
     * @since 1.5.0
     *
     * @return int $position
     */
    public static function getHigherPosition()
    {
    }
    /**
     * For a given {product, warehouse}, gets the carrier available.
     *
     * @since 1.5.0
     *
     * @param Product $product             The id of the product, or an array with at least the package size and weight
     * @param int     $id_warehouse        Warehouse ID
     * @param int     $id_address_delivery Delivery Address ID
     * @param int     $id_shop             Shop ID
     * @param Cart    $cart                Cart object
     * @param array   &$error              contain an error message if an error occurs
     *
     * @return array Available Carriers
     *
     * @throws PrestaShopDatabaseException
     */
    public static function getAvailableCarrierList(\Product $product, $id_warehouse, $id_address_delivery = \null, $id_shop = \null, $cart = \null, &$error = array())
    {
    }
    /**
     * Assign one (ore more) group to all carriers.
     *
     * @since 1.5.0
     *
     * @param int|array $id_group_list Group ID or array of Group IDs
     * @param array     $exception     List of Carrier IDs to ignore
     *
     * @return bool
     */
    public static function assignGroupToAllCarriers($id_group_list, $exception = array())
    {
    }
    /**
     * Set Carrier Groups.
     *
     * @param array $groups Carrier Groups
     * @param bool  $delete Delete all previously Carrier Groups which
     *                      were linked to this Carrier
     *
     * @return bool Whether the Carrier Groups have been successfully set
     */
    public function setGroups($groups, $delete = \true)
    {
    }
    /**
     * Return the carrier name from the shop name (e.g. if the carrier name is '0').
     *
     * The returned carrier name is the shop name without '#' and ';' because this is not the same validation.
     *
     * @return string Carrier name
     */
    public static function getCarrierNameFromShopName()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Country
 */
class Country extends \ObjectModel
{
    public $id;
    /** @var int Zone id which country belongs */
    public $id_zone;
    /** @var int Currency id which country belongs */
    public $id_currency;
    /** @var string 2 letters iso code */
    public $iso_code;
    /** @var int international call prefix */
    public $call_prefix;
    /** @var string Name */
    public $name;
    /** @var bool Contain states */
    public $contains_states;
    /** @var bool Need identification number dni/nif/nie */
    public $need_identification_number;
    /** @var bool Need Zip Code */
    public $need_zip_code;
    /** @var string Zip Code Format */
    public $zip_code_format;
    /** @var bool Display or not the tax incl./tax excl. mention in the front office */
    public $display_tax_label = \true;
    /** @var bool Status for delivery */
    public $active = \true;
    protected static $_idZones = array();
    const GEOLOC_ALLOWED = 0;
    const GEOLOC_CATALOG_MODE = 1;
    const GEOLOC_FORBIDDEN = 2;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'country', 'primary' => 'id_country', 'multilang' => \true, 'fields' => array(
        'id_zone' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true),
        'id_currency' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'),
        'call_prefix' => array('type' => self::TYPE_INT, 'validate' => 'isInt'),
        'iso_code' => array('type' => self::TYPE_STRING, 'validate' => 'isLanguageIsoCode', 'required' => \true, 'size' => 3),
        'active' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'contains_states' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool', 'required' => \true),
        'need_identification_number' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool', 'required' => \true),
        'need_zip_code' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'zip_code_format' => array('type' => self::TYPE_STRING, 'validate' => 'isZipCodeFormat'),
        'display_tax_label' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool', 'required' => \true),
        /* Lang fields */
        'name' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'required' => \true, 'size' => 64),
    ), 'associations' => array('zone' => array('type' => self::HAS_ONE), 'currency' => array('type' => self::HAS_ONE)));
    protected static $cache_iso_by_id = array();
    protected $webserviceParameters = array('objectsNodeName' => 'countries', 'fields' => array('id_zone' => array('xlink_resource' => 'zones'), 'id_currency' => array('xlink_resource' => 'currencies')));
    /**
     * Deletes current Country from the database
     *
     * @return bool True if delete was successful
     * @throws PrestaShopException
     */
    public function delete()
    {
    }
    /**
     * @brief Return available countries
     *
     * @param int  $idLang        Language ID
     * @param bool $active        return only active coutries
     * @param bool $containStates return only country with states
     * @param bool $listStates    Include the states list with the returned list
     *
     * @return Array Countries and corresponding zones
     */
    public static function getCountries($idLang, $active = \false, $containStates = \false, $listStates = \true)
    {
    }
    public static function getCountriesByIdShop($idShop, $idLang)
    {
    }
    /**
     * Get a country ID with its iso code
     *
     * @param string $isoCode Country iso code
     * @param bool   $active  return only active coutries
     *
     * @return int Country ID
     */
    public static function getByIso($isoCode, $active = \false)
    {
    }
    /**
     * Get Zone ID by Country
     *
     * @param int $idCountry Country ID
     *
     * @return bool|int
     */
    public static function getIdZone($idCountry)
    {
    }
    /**
     * Get a country name with its ID
     *
     * @param int $idLang    Language ID
     * @param int $idCountry Country ID
     *
     * @return string Country name
     */
    public static function getNameById($idLang, $idCountry)
    {
    }
    /**
     * Get a country iso with its ID
     *
     * @param int $idCountry Country ID
     *
     * @return string Country iso
     */
    public static function getIsoById($idCountry)
    {
    }
    /**
    * Get a country id with its name
    *
    * @param int    $idLang  Language ID
    * @param string $country Country Name
    *
    *@return int Country ID
    */
    public static function getIdByName($idLang = \null, $country)
    {
    }
    /**
     * Does the Country need a zip code?
     *
     * @param int $idCountry Country ID
     *
     * @return bool Indicates whether the Country needs a zip code
     */
    public static function getNeedZipCode($idCountry)
    {
    }
    /**
     * Get zip code format for Country
     *
     * @param int $idCountry Country ID
     *
     * @return bool|false|null|string
     */
    public static function getZipCodeFormat($idCountry)
    {
    }
    /**
     * Get Countries by Zone ID
     *
     * @param int $idZone Zone ID
     * @param int $idLang Language ID
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public static function getCountriesByZoneId($idZone, $idLang)
    {
    }
    /**
     * Does the Country need a DNI
     *
     * @return bool Indicates whether the Country needs a DNI
     */
    public function isNeedDni()
    {
    }
    /**
     * Does the given Country need a DNI?
     *
     * @param int $idCountry Country ID
     *
     * @return bool Indicates whether the Country needs a DNI
     */
    public static function isNeedDniByCountryId($idCountry)
    {
    }
    /**
     * Does the given Country contain States?
     *
     * @param int $idCountry Country ID
     *
     * @return bool Indicates whether the Country contains States
     */
    public static function containsStates($idCountry)
    {
    }
    /**
     * Apply Zone to selected Countries
     *
     * @param array $idsCountries Country array
     * @param int   $idZone       Zone ID
     *
     * @return bool Indicates whether the Zone was successfully applied
     */
    public function affectZoneToSelection($idsCountries, $idZone)
    {
    }
    /**
     * Replace letters of zip code format And check this format on the zip code
     *
     * @param string $zipCode zip code
     *
     * @return bool Indicates whether the zip code is correct
     */
    public function checkZipCode($zipCode)
    {
    }
    /**
     * Add module restrictions
     *
     * @param array $shops Shops array
     * @param array $countries Countries array
     * @param array $modules Modules array
     *
     * @return bool Indictes whether the restrictions were successfully applied
     */
    public static function addModuleRestrictions(array $shops = array(), array $countries = array(), array $modules = array())
    {
    }
    /**
     * Adds current Country as a new Object to the database
     *
     * @param bool $autoDate   Automatically set `date_upd` and `date_add` columns
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Indicates whether the Country has been successfully added
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function add($autoDate = \true, $nullValues = \false)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class ProductSale
 */
class ProductSale
{
    /**
     * Fill the `product_sale` SQL table with data from `order_detail`
     *
     * @return bool True on success
     */
    public static function fillProductSales()
    {
    }
    /**
     * Get number of actives products sold
     *
     * @return int number of actives products listed in product_sales
     */
    public static function getNbSales()
    {
    }
    /**
     * Get required informations on best sales products
     *
     * @param int $idLang     Language id
     * @param int $pageNumber Start from (optional)
     * @param int $nbProducts Number of products to return (optional)
     *
     * @return array|bool from Product::getProductProperties
     *                    `false` if failure
     */
    public static function getBestSales($idLang, $pageNumber = 0, $nbProducts = 10, $orderBy = \null, $orderWay = \null)
    {
    }
    /**
     * Get required informations on best sales products
     *
     * @param int $idLang     Language id
     * @param int $pageNumber Start from (optional)
     * @param int $nbProducts Number of products to return (optional)
     *
     * @return array keys : id_product, link_rewrite, name, id_image, legend, sales, ean13, upc, link
     */
    public static function getBestSalesLight($idLang, $pageNumber = 0, $nbProducts = 10, \Context $context = \null)
    {
    }
    /**
     * Add Product sale
     *
     * @param int $productId Product ID
     * @param int $qty       Quantity
     *
     * @return bool Indicates whether the sale was successfully added
     */
    public static function addProductSale($productId, $qty = 1)
    {
    }
    /**
     * Get number of sales
     *
     * @param int $idProduct Product ID
     *
     * @return int Number of sales for the given Product
     */
    public static function getNbrSales($idProduct)
    {
    }
    /**
     * Remove a Product sale
     *
     * @param int $idProduct Product ID
     * @param int $qty       Quantity
     *
     * @return bool Indicates whether the product sale has been successfully removed
     */
    public static function removeProductSale($idProduct, $qty = 1)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Delivery
 */
class Delivery extends \ObjectModel
{
    /** @var int */
    public $id_delivery;
    /** @var int **/
    public $id_shop;
    /** @var int **/
    public $id_shop_group;
    /** @var int */
    public $id_carrier;
    /** @var int */
    public $id_range_price;
    /** @var int */
    public $id_range_weight;
    /** @var int */
    public $id_zone;
    /** @var float */
    public $price;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'delivery', 'primary' => 'id_delivery', 'fields' => array('id_carrier' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_range_price' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_range_weight' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_zone' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_shop' => array('type' => self::TYPE_INT), 'id_shop_group' => array('type' => self::TYPE_INT), 'price' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice', 'required' => \true)));
    protected $webserviceParameters = array('objectsNodeName' => 'deliveries', 'fields' => array('id_carrier' => array('xlink_resource' => 'carriers'), 'id_range_price' => array('xlink_resource' => 'price_ranges'), 'id_range_weight' => array('xlink_resource' => 'weight_ranges'), 'id_zone' => array('xlink_resource' => 'zones')));
    /**
     * Get Object fields and values in array
     *
     * @return array
     */
    public function getFields()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @since 1.5.0
 */
class Dispatcher
{
    /**
     * List of available front controllers types
     */
    const FC_FRONT = 1;
    const FC_ADMIN = 2;
    const FC_MODULE = 3;
    /**
     * @var Dispatcher
     */
    public static $instance = \null;
    /**
     * @var array List of default routes
     */
    public $default_routes = array(
        'category_rule' => array('controller' => 'category', 'rule' => '{id}-{rewrite}', 'keywords' => array('id' => array('regexp' => '[0-9]+', 'param' => 'id_category'), 'rewrite' => array('regexp' => '[_a-zA-Z0-9\\pL\\pS-]*'), 'meta_keywords' => array('regexp' => '[_a-zA-Z0-9-\\pL]*'), 'meta_title' => array('regexp' => '[_a-zA-Z0-9-\\pL]*'))),
        'supplier_rule' => array('controller' => 'supplier', 'rule' => '{id}__{rewrite}', 'keywords' => array('id' => array('regexp' => '[0-9]+', 'param' => 'id_supplier'), 'rewrite' => array('regexp' => '[_a-zA-Z0-9\\pL\\pS-]*'), 'meta_keywords' => array('regexp' => '[_a-zA-Z0-9-\\pL]*'), 'meta_title' => array('regexp' => '[_a-zA-Z0-9-\\pL]*'))),
        'manufacturer_rule' => array('controller' => 'manufacturer', 'rule' => '{id}_{rewrite}', 'keywords' => array('id' => array('regexp' => '[0-9]+', 'param' => 'id_manufacturer'), 'rewrite' => array('regexp' => '[_a-zA-Z0-9\\pL\\pS-]*'), 'meta_keywords' => array('regexp' => '[_a-zA-Z0-9-\\pL]*'), 'meta_title' => array('regexp' => '[_a-zA-Z0-9-\\pL]*'))),
        'cms_rule' => array('controller' => 'cms', 'rule' => 'content/{id}-{rewrite}', 'keywords' => array('id' => array('regexp' => '[0-9]+', 'param' => 'id_cms'), 'rewrite' => array('regexp' => '[_a-zA-Z0-9\\pL\\pS-]*'), 'meta_keywords' => array('regexp' => '[_a-zA-Z0-9-\\pL]*'), 'meta_title' => array('regexp' => '[_a-zA-Z0-9-\\pL]*'))),
        'cms_category_rule' => array('controller' => 'cms', 'rule' => 'content/category/{id}-{rewrite}', 'keywords' => array('id' => array('regexp' => '[0-9]+', 'param' => 'id_cms_category'), 'rewrite' => array('regexp' => '[_a-zA-Z0-9\\pL\\pS-]*'), 'meta_keywords' => array('regexp' => '[_a-zA-Z0-9-\\pL]*'), 'meta_title' => array('regexp' => '[_a-zA-Z0-9-\\pL]*'))),
        'module' => array('controller' => \null, 'rule' => 'module/{module}{/:controller}', 'keywords' => array('module' => array('regexp' => '[_a-zA-Z0-9_-]+', 'param' => 'module'), 'controller' => array('regexp' => '[_a-zA-Z0-9_-]+', 'param' => 'controller')), 'params' => array('fc' => 'module')),
        'product_rule' => array('controller' => 'product', 'rule' => '{category:/}{id}{-:id_product_attribute}-{rewrite}{-:ean13}.html', 'keywords' => array('id' => array('regexp' => '[0-9]+', 'param' => 'id_product'), 'id_product_attribute' => array('regexp' => '[0-9]+', 'param' => 'id_product_attribute'), 'rewrite' => array('regexp' => '[_a-zA-Z0-9\\pL\\pS-]*', 'param' => 'rewrite'), 'ean13' => array('regexp' => '[0-9\\pL]*'), 'category' => array('regexp' => '[_a-zA-Z0-9-\\pL]*'), 'categories' => array('regexp' => '[/_a-zA-Z0-9-\\pL]*'), 'reference' => array('regexp' => '[_a-zA-Z0-9-\\pL]*'), 'meta_keywords' => array('regexp' => '[_a-zA-Z0-9-\\pL]*'), 'meta_title' => array('regexp' => '[_a-zA-Z0-9-\\pL]*'), 'manufacturer' => array('regexp' => '[_a-zA-Z0-9-\\pL]*'), 'supplier' => array('regexp' => '[_a-zA-Z0-9-\\pL]*'), 'price' => array('regexp' => '[0-9\\.,]*'), 'tags' => array('regexp' => '[a-zA-Z0-9-\\pL]*'))),
        /* Must be after the product and category rules in order to avoid conflict */
        'layered_rule' => array('controller' => 'category', 'rule' => '{id}-{rewrite}{/:selected_filters}', 'keywords' => array(
            'id' => array('regexp' => '[0-9]+', 'param' => 'id_category'),
            /* Selected filters is used by the module blocklayered */
            'selected_filters' => array('regexp' => '.*', 'param' => 'selected_filters'),
            'rewrite' => array('regexp' => '[_a-zA-Z0-9\\pL\\pS-]*'),
            'meta_keywords' => array('regexp' => '[_a-zA-Z0-9-\\pL]*'),
            'meta_title' => array('regexp' => '[_a-zA-Z0-9-\\pL]*'),
        )),
    );
    /**
     * @var bool If true, use routes to build URL (mod rewrite must be activated)
     */
    protected $use_routes = \false;
    protected $multilang_activated = \false;
    /**
     * @var array List of loaded routes
     */
    protected $routes = array();
    /**
     * @var string Current controller name
     */
    protected $controller;
    /**
     * @var string Current request uri
     */
    protected $request_uri;
    /**
     * @var array Store empty route (a route with an empty rule)
     */
    protected $empty_route;
    /**
     * @var string Set default controller, which will be used if http parameter 'controller' is empty
     */
    protected $default_controller;
    protected $use_default_controller = \false;
    /**
     * @var string Controller to use if found controller doesn't exist
     */
    protected $controller_not_found = 'pagenotfound';
    /**
     * @var string Front controller to use
     */
    protected $front_controller = self::FC_FRONT;
    /**
     * Get current instance of dispatcher (singleton)
     *
     * @return Dispatcher
     */
    public static function getInstance()
    {
    }
    /**
     * Need to be instancied from getInstance() method
     */
    protected function __construct()
    {
    }
    public function useDefaultController()
    {
    }
    /**
     * Find the controller and instantiate it
     */
    public function dispatch()
    {
    }
    /**
     * Set request uri and iso lang
     */
    protected function setRequestUri()
    {
    }
    /**
     * Load default routes group by languages
     */
    protected function loadRoutes($id_shop = \null)
    {
    }
    /**
     *
     * @param string $route_id Name of the route (need to be uniq, a second route with same name will override the first)
     * @param string $rule Url rule
     * @param string $controller Controller to call if request uri match the rule
     * @param int $id_lang
     * @param int $id_shop
     */
    public function addRoute($route_id, $rule, $controller, $id_lang = \null, array $keywords = array(), array $params = array(), $id_shop = \null)
    {
    }
    /**
     * Check if a route exists
     *
     * @param string $route_id
     * @param int $id_lang
     * @param int $id_shop
     * @return bool
     */
    public function hasRoute($route_id, $id_lang = \null, $id_shop = \null)
    {
    }
    /**
     * Check if a keyword is written in a route rule
     *
     * @param string $route_id
     * @param int $id_lang
     * @param string $keyword
     * @param int $id_shop
     * @return bool
     */
    public function hasKeyword($route_id, $id_lang, $keyword, $id_shop = \null)
    {
    }
    /**
     * Check if a route rule contain all required keywords of default route definition
     *
     * @param string $route_id
     * @param string $rule Rule to verify
     * @param array $errors List of missing keywords
     */
    public function validateRoute($route_id, $rule, &$errors = array())
    {
    }
    /**
     * Create an url from
     *
     * @param string $route_id Name the route
     * @param int $id_lang
     * @param array $params
     * @param bool $use_routes If false, don't use to create this url
     * @param string $anchor Optional anchor to add at the end of this url
     */
    public function createUrl($route_id, $id_lang = \null, array $params = array(), $force_routes = \false, $anchor = '', $id_shop = \null)
    {
    }
    /**
     * Retrieve the controller from url or request uri if routes are activated
     *
     * @return string
     */
    public function getController($id_shop = \null)
    {
    }
    /**
     * Get list of all available FO controllers
     *
     * @var mixed $dirs
     * @return array
     */
    public static function getControllers($dirs)
    {
    }
    /**
     * Get list of all available Module Front controllers
     *
     * @return array
     */
    public static function getModuleControllers($type = 'all', $module = \null)
    {
    }
    /**
     * Get list of available controllers from the specified dir
     *
     * @param string $dir Directory to scan (recursively)
     * @return array
     */
    public static function getControllersInDirectory($dir)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Address
 */
class Address extends \ObjectModel
{
    /** @var int Customer ID which address belongs to */
    public $id_customer = \null;
    /** @var int Manufacturer ID which address belongs to */
    public $id_manufacturer = \null;
    /** @var int Supplier ID which address belongs to */
    public $id_supplier = \null;
    /**
     * @since 1.5.0
     * @var int Warehouse ID which address belongs to
     */
    public $id_warehouse = \null;
    /** @var int Country ID */
    public $id_country;
    /** @var int State ID */
    public $id_state;
    /** @var string Country name */
    public $country;
    /** @var string Alias (eg. Home, Work...) */
    public $alias;
    /** @var string Company (optional) */
    public $company;
    /** @var string Lastname */
    public $lastname;
    /** @var string Firstname */
    public $firstname;
    /** @var string Address first line */
    public $address1;
    /** @var string Address second line (optional) */
    public $address2;
    /** @var string Postal code */
    public $postcode;
    /** @var string City */
    public $city;
    /** @var string Any other useful information */
    public $other;
    /** @var string Phone number */
    public $phone;
    /** @var string Mobile phone number */
    public $phone_mobile;
    /** @var string VAT number */
    public $vat_number;
    /** @var string DNI number */
    public $dni;
    /** @var string Object creation date */
    public $date_add;
    /** @var string Object last modification date */
    public $date_upd;
    /** @var bool True if address has been deleted (staying in database as deleted) */
    public $deleted = 0;
    /** @var array Zone IDs cache */
    protected static $_idZones = array();
    /** @var array Country IDs cache */
    protected static $_idCountries = array();
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'address', 'primary' => 'id_address', 'fields' => array('id_customer' => array('type' => self::TYPE_INT, 'validate' => 'isNullOrUnsignedId', 'copy_post' => \false), 'id_manufacturer' => array('type' => self::TYPE_INT, 'validate' => 'isNullOrUnsignedId', 'copy_post' => \false), 'id_supplier' => array('type' => self::TYPE_INT, 'validate' => 'isNullOrUnsignedId', 'copy_post' => \false), 'id_warehouse' => array('type' => self::TYPE_INT, 'validate' => 'isNullOrUnsignedId', 'copy_post' => \false), 'id_country' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_state' => array('type' => self::TYPE_INT, 'validate' => 'isNullOrUnsignedId'), 'alias' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'required' => \true, 'size' => 32), 'company' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'size' => 255), 'lastname' => array('type' => self::TYPE_STRING, 'validate' => 'isName', 'required' => \true, 'size' => 32), 'firstname' => array('type' => self::TYPE_STRING, 'validate' => 'isName', 'required' => \true, 'size' => 32), 'vat_number' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName'), 'address1' => array('type' => self::TYPE_STRING, 'validate' => 'isAddress', 'required' => \true, 'size' => 128), 'address2' => array('type' => self::TYPE_STRING, 'validate' => 'isAddress', 'size' => 128), 'postcode' => array('type' => self::TYPE_STRING, 'validate' => 'isPostCode', 'size' => 12), 'city' => array('type' => self::TYPE_STRING, 'validate' => 'isCityName', 'required' => \true, 'size' => 64), 'other' => array('type' => self::TYPE_STRING, 'validate' => 'isMessage', 'size' => 300), 'phone' => array('type' => self::TYPE_STRING, 'validate' => 'isPhoneNumber', 'size' => 32), 'phone_mobile' => array('type' => self::TYPE_STRING, 'validate' => 'isPhoneNumber', 'size' => 32), 'dni' => array('type' => self::TYPE_STRING, 'validate' => 'isDniLite', 'size' => 16), 'deleted' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool', 'copy_post' => \false), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate', 'copy_post' => \false), 'date_upd' => array('type' => self::TYPE_DATE, 'validate' => 'isDate', 'copy_post' => \false)));
    /** @var array Web service parameters */
    protected $webserviceParameters = array('objectsNodeName' => 'addresses', 'fields' => array('id_customer' => array('xlink_resource' => 'customers'), 'id_manufacturer' => array('xlink_resource' => 'manufacturers'), 'id_supplier' => array('xlink_resource' => 'suppliers'), 'id_warehouse' => array('xlink_resource' => 'warehouse'), 'id_country' => array('xlink_resource' => 'countries'), 'id_state' => array('xlink_resource' => 'states')));
    /**
     * Build an Address
     *
     * @param int $id_address Existing Address ID in order to load object (optional)
     */
    public function __construct($id_address = \null, $id_lang = \null)
    {
    }
    /**
     * @see ObjectModel::add()
     */
    public function add($autodate = \true, $null_values = \false)
    {
    }
    /**
     * @see ObjectModel::update()
     */
    public function update($null_values = \false)
    {
    }
    /**
     * @see ObjectModel::delete()
     */
    public function delete()
    {
    }
    /**
     * Returns fields required for an address in an array hash
     *
     * @return array Hash values
     */
    public static function getFieldsValidate()
    {
    }
    /**
     * Get Zone ID for a given address
     *
     * @param int $id_address Address ID for which we want to get the Zone ID
     *
     * @return int Zone ID
     */
    public static function getZoneById($id_address)
    {
    }
    /**
     * Check if the Country is active for a given address
     *
     * @param int $id_address Address ID for which we want to get the Country status
     *
     * @return int Country status
     */
    public static function isCountryActiveById($id_address)
    {
    }
    /**
     * Check if Address is used (at least one order placed)
     *
     * @return int Order count for this Address
     */
    public function isUsed()
    {
    }
    /**
     * Get Country and State of this Address
     *
     * @param int $id_address Address ID
     *
     * @return array
     */
    public static function getCountryAndState($id_address)
    {
    }
    /**
     * Specify if an address is already in base
     *
     * @param int $id_address Address id
     *
     * @return bool The address exists
     */
    public static function addressExists($id_address)
    {
    }
    /**
     * Check if the address is valid
     *
     * @param int $id_address Address id
     *
     * @return bool The address is valid
     */
    public static function isValid($id_address)
    {
    }
    /**
     * Get the first address id of the customer
     *
     * @param int  $id_customer Customer id
     * @param bool $active      Active addresses only
     *
     * @return bool|int|null
     */
    public static function getFirstCustomerAddressId($id_customer, $active = \true)
    {
    }
    /**
     * Initialize an address corresponding to the specified id address or if empty to the
     * default shop configuration
     *
     * @param int $id_address
     * @param bool $with_geoloc
     *
     * @return Address address
     *
     * @throws PrestaShopException
     */
    public static function initialize($id_address = \null, $with_geoloc = \false)
    {
    }
    /**
     * Returns Address ID for a given Supplier ID
     * @since 1.5.0
     *
     * @param int $id_supplier Supplier ID
     *
     * @return int $id_address Address ID
     */
    public static function getAddressIdBySupplierId($id_supplier)
    {
    }
    /**
     * Check if the alias already exists
     *
     * @param string $alias       Alias of an address
     * @param int    $id_address  Address id
     * @param int    $id_customer Customer id
     *
     * @return false|null|string Amount of aliases found
     * @todo: Find out if we shouldn't be returning an int instead? (breaking change)
     */
    public static function aliasExist($alias, $id_address, $id_customer)
    {
    }
    /**
     * @see ObjectModel::getFieldsRequiredDB();
     */
    public function getFieldsRequiredDB()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class GroupReduction extends \ObjectModel
{
    public $id_group;
    public $id_category;
    public $reduction;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'group_reduction', 'primary' => 'id_group_reduction', 'fields' => array('id_group' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_category' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'reduction' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice', 'required' => \true)));
    protected static $reduction_cache = array();
    public function add($autodate = \true, $null_values = \false)
    {
    }
    public function update($null_values = \false)
    {
    }
    public function delete()
    {
    }
    protected function _clearCache()
    {
    }
    protected function _setCache()
    {
    }
    protected function _updateCache()
    {
    }
    public static function getGroupReductions($id_group, $id_lang)
    {
    }
    public static function getValueForProduct($id_product, $id_group)
    {
    }
    public static function doesExist($id_group, $id_category)
    {
    }
    public static function getGroupsByCategoryId($id_category)
    {
    }
    /**
     * @deprecated 1.5.3.0
     * @param int $id_category
     * @return array|null
     */
    public static function getGroupByCategoryId($id_category)
    {
    }
    public static function getGroupsReductionByCategoryId($id_category)
    {
    }
    /**
     * @deprecated 1.5.3.0
     * @param int $id_category
     * @return array|null
     */
    public static function getGroupReductionByCategoryId($id_category)
    {
    }
    public static function setProductReduction($id_product, $id_group = \null, $id_category = \null, $reduction = \null)
    {
    }
    public static function deleteProductReduction($id_product)
    {
    }
    public static function duplicateReduction($id_product_old, $id_product)
    {
    }
    public static function deleteCategory($id_category)
    {
    }
}
class Hook extends \ObjectModel
{
    /**
     * @var string Hook name identifier
     */
    public $name;
    /**
     * @var string Hook title (displayed in BO)
     */
    public $title;
    /**
     * @var string Hook description
     */
    public $description;
    /**
     * @var bool
     */
    public $position = \false;
    /**
     * @var array List of executed hooks on this page
     */
    public static $executed_hooks = array();
    public static $native_module;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'hook', 'primary' => 'id_hook', 'fields' => array('name' => array('type' => self::TYPE_STRING, 'validate' => 'isHookName', 'required' => \true, 'size' => 64), 'title' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName'), 'description' => array('type' => self::TYPE_HTML, 'validate' => 'isCleanHtml'), 'position' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool')));
    /**
     * @deprecated 1.5.0
     */
    protected static $_hook_modules_cache = \null;
    /**
     * @deprecated 1.5.0
     */
    protected static $_hook_modules_cache_exec = \null;
    /**
     * List of all deprecated hooks
     * @var array
     */
    protected static $deprecated_hooks = array(
        // Back office
        'backOfficeFooter' => array('from' => '1.7.0.0'),
        'displayBackOfficeFooter' => array('from' => '1.7.0.0'),
        // Shipping step
        'displayCarrierList' => array('from' => '1.7.0.0'),
        'extraCarrier' => array('from' => '1.7.0.0'),
        // Payment step
        'hookBackBeforePayment' => array('from' => '1.7.0.0'),
        'hookDisplayBeforePayment' => array('from' => '1.7.0.0'),
        'hookOverrideTOSDisplay' => array('from' => '1.7.0.0'),
        // Product page
        'displayProductTabContent' => array('from' => '1.7.0.0'),
        'displayProductTab' => array('from' => '1.7.0.0'),
    );
    const MODULE_LIST_BY_HOOK_KEY = 'hook_module_exec_list_';
    public function add($autodate = \true, $null_values = \false)
    {
    }
    public static function normalizeHookName($hookName)
    {
    }
    public static function isDisplayHookName($hook_name)
    {
    }
    /**
     * Return Hooks List
     *
     * @param bool $position
     * @return array Hooks List
     */
    public static function getHooks($position = \false, $only_display_hooks = \false)
    {
    }
    /**
     * Return hook ID from name
     *
     * @param string $hook_name Hook name
     * @return int Hook ID
     */
    public static function getIdByName($hook_name)
    {
    }
    /**
     * Return hook ID from name
     */
    public static function getNameById($hook_id)
    {
    }
    /**
     * Get list of hook alias
     *
     * @since 1.5.0
     * @return array
     * @deprecated 1.7.1.0
     */
    public static function getHookAliasList()
    {
    }
    /**
     * Return backward compatibility hook name
     *
     * @since 1.5.0
     * @param string $hook_name Hook name
     * @return int Hook ID
     * @deprecated 1.7.1.0
     */
    public static function getRetroHookName($hook_name)
    {
    }
    /**
     * Get list of all registered hooks with modules
     *
     * @since 1.5.0
     * @return array
     */
    public static function getHookModuleList()
    {
    }
    /**
     * Return Hooks List
     *
     * @since 1.5.0
     * @param int $id_hook
     * @param int $id_module
     * @return array Modules List
     */
    public static function getModulesFromHook($id_hook, $id_module = \null)
    {
    }
    public static function isModuleRegisteredOnHook($module_instance, $hook_name, $id_shop)
    {
    }
    public static function registerHook($module_instance, $hook_name, $shop_list = \null)
    {
    }
    public static function unregisterHook($module_instance, $hook_name, $shop_list = \null)
    {
    }
    /**
     * Get list of modules we can execute per hook
     *
     * @since 1.5.0
     * @param string $hook_name Get list of modules for this hook if given
     * @return array
     */
    public static function getHookModuleExecList($hook_name = \null)
    {
    }
    /**
     * Execute modules for specified hook
     *
     * @param string $hook_name Hook Name
     * @param array $hook_args Parameters for the functions
     * @param int $id_module Execute hook for this module only
     * @param bool $array_return If specified, module output will be set by name in an array
     * @param bool $check_exceptions Check permission exceptions
     * @param bool $use_push Force change to be refreshed on Dashboard widgets
     * @param int $id_shop If specified, hook will be execute the shop with this ID
     * @param bool $chain If specified, hook will chain the return of hook module
     *
     * @throws PrestaShopException
     *
     * @return string/array modules output
     */
    public static function exec($hook_name, $hook_args = array(), $id_module = \null, $array_return = \false, $check_exceptions = \true, $use_push = \false, $id_shop = \null, $chain = \false)
    {
    }
    public static function coreCallHook($module, $method, $params)
    {
    }
    public static function coreRenderWidget($module, $hook_name, $params)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Customization
 */
class Customization extends \ObjectModel
{
    /** @var int */
    public $id_product_attribute;
    /** @var int */
    public $id_address_delivery;
    /** @var int */
    public $id_cart;
    /** @var int */
    public $id_product;
    /** @var int */
    public $quantity;
    /** @var int */
    public $quantity_refunded;
    /** @var int */
    public $quantity_returned;
    /** @var bool */
    public $in_cart;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'customization', 'primary' => 'id_customization', 'fields' => array(
        /* Classic fields */
        'id_product_attribute' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true),
        'id_address_delivery' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true),
        'id_cart' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true),
        'id_product' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true),
        'quantity' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true),
        'quantity_refunded' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true),
        'quantity_returned' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true),
        'in_cart' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool', 'required' => \true),
    ));
    protected $webserviceParameters = array('fields' => array('id_address_delivery' => array('xlink_resource' => array('resourceName' => 'addresses')), 'id_cart' => array('xlink_resource' => array('resourceName' => 'carts')), 'id_product' => array('xlink_resource' => array('resourceName' => 'products'))), 'associations' => array('customized_data_text_fields' => array('resource' => 'customized_data_text_field', 'virtual_entity' => \true, 'fields' => array('id_customization_field' => array('required' => \true, 'xlink_resource' => 'product_customization_fields'), 'value' => array())), 'customized_data_images' => array('resource' => 'customized_data_image', 'virtual_entity' => \true, 'setter' => \false, 'fields' => array('id_customization_field' => array('xlink_resource' => 'product_customization_fields'), 'value' => array()))));
    /**
     * Get returned Customizations
     *
     * @param int $idOrder Order ID
     *
     * @return array|bool
     */
    public static function getReturnedCustomizations($idOrder)
    {
    }
    /**
     * Get ordered Customizations
     *
     * @param int $idCart Cart ID
     *
     * @return array|bool Ordered Customizations
     *                    `false` if not found
     */
    public static function getOrderedCustomizations($idCart)
    {
    }
    /**
     * Get price of Customization
     *
     * @param int $idCustomization Customization ID
     *
     * @return float|int Price of customization
     */
    public static function getCustomizationPrice($idCustomization)
    {
    }
    /**
     * Get weight of Customization
     *
     * @param int $idCustomization Customization ID
     *
     * @return float|int Weight
     */
    public static function getCustomizationWeight($idCustomization)
    {
    }
    /**
     * Count Customization quantity by Product
     *
     * @param array $customizations Customizations
     *
     * @return array Customization quantities by Product
     */
    public static function countCustomizationQuantityByProduct($customizations)
    {
    }
    /**
     * Get label
     *
     * @param int      $idCustomization Customization ID
     * @param int      $idLang          Language IOD
     * @param int|null $idShop          Shop ID
     *
     * @return bool|false|null|string
     */
    public static function getLabel($idCustomization, $idLang, $idShop = \null)
    {
    }
    /**
     * Retrieve quantities from IDs
     *
     * @param array $idsCustomizations Customization IDs
     *
     * @return array Quantities
     */
    public static function retrieveQuantitiesFromIds($idsCustomizations)
    {
    }
    /**
     * Count quantity by Cart
     *
     * @param int $idCart Cart ID
     *
     * @return array
     */
    public static function countQuantityByCart($idCart)
    {
    }
    /**
     * This method is allow to know if a feature is used or active
     * @since 1.5.0.1
     * @return bool
     */
    public static function isFeatureActive()
    {
    }
    /**
     * This method is allow to know if a Customization entity is currently used
     * @since 1.5.0.1
     * @param $table
     * @param $hasActiveColumn
     * @return bool
     */
    public static function isCurrentlyUsed($table = \null, $hasActiveColumn = \false)
    {
    }
    /**
     * Get customized text fields
     * (for webservice)
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public function getWsCustomizedDataTextFields()
    {
    }
    /**
     * Get customized images data
     * (for webservice)
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public function getWsCustomizedDataImages()
    {
    }
    /**
     * Set customized text fields
     * (for webservice)
     *
     * @param array $values
     *
     * @return bool
     */
    public function setWsCustomizedDataTextFields($values)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class AddressFormat
 */
class AddressFormat extends \ObjectModel
{
    /** @var int $id_address_format Address format */
    public $id_address_format;
    /** @var int $id_country Country ID */
    public $id_country;
    /** @var string $format Format */
    public $format;
    protected $_errorFormatList = array();
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'address_format', 'primary' => 'id_country', 'fields' => array('format' => array('type' => self::TYPE_HTML, 'validate' => 'isGenericName', 'required' => \true), 'id_country' => array('type' => self::TYPE_INT)));
    /** @var array Default required form fields list */
    public static $requireFormFieldsList = array('firstname', 'lastname', 'address1', 'city', 'Country:name');
    /** @var array Default forbidden property list */
    public static $forbiddenPropertyList = array('deleted', 'date_add', 'alias', 'secure_key', 'note', 'newsletter', 'ip_registration_newsletter', 'newsletter_date_add', 'optin', 'passwd', 'last_passwd_gen', 'active', 'is_guest', 'date_upd', 'country', 'years', 'days', 'months', 'description', 'meta_description', 'short_description', 'link_rewrite', 'meta_title', 'meta_keywords', 'display_tax_label', 'need_zip_code', 'contains_states', 'call_prefixes', 'show_public_prices', 'max_payment', 'max_payment_days', 'geoloc_postcode', 'logged', 'account_number', 'groupBox', 'ape', 'max_payment', 'outstanding_allow_amount', 'call_prefix', 'definition', 'debug_list');
    /** @var array Default formbidden class list */
    public static $forbiddenClassList = array('Manufacturer', 'Supplier');
    const _CLEANING_REGEX_ = '#([^\\w:_]+)#i';
    /**
     * Check if the the association of the field name and a class name
     * is valid
     *
     * @param string $className The name class
     * @param string $fieldName The property name
     * @param bool   $isIdField Do we have to allow a property name to be started with 'id_'
     *
     * @return bool Association of the field and class name is valid
     */
    protected function _checkValidateClassField($className, $fieldName, $isIdField)
    {
    }
    /**
     * Verify the existence of a field name and check the availability
     * of an association between a field name and a class (ClassName:fieldName)
     * if the separator is overview
     *
     * @param string $patternName    The composition of the class and field name
     * @param string $fieldsValidate The list of available field for the Address class
     * @todo: Why is $fieldsValidate unused?
     */
    protected function _checkLiableAssociation($patternName, $fieldsValidate)
    {
    }
    /**
     * Check if the set fields are valid
     */
    public function checkFormatFields()
    {
    }
    /**
     * Returns the error list
     */
    public function getErrorList()
    {
    }
    /**
     * Set the layout key with the liable value
     * example : (firstname) => 'Presta' will result (Presta)
     *         : (firstname-lastname) => 'Presta' and 'Shop' result '(Presta-Shop)'
     */
    protected static function _setOriginalDisplayFormat(&$formattedValueList, $currentLine, $currentKeyList)
    {
    }
    /**
     * Cleaned the layout set by the user
     */
    public static function cleanOrderedAddress(&$orderedAddressField)
    {
    }
    /**
     * Returns the formatted fields with associated values
     *
     * @param Address $address Address object
     * @param AddressFormat $addressFormat The format
     *
     * @return array
     */
    public static function getFormattedAddressFieldsValues($address, $addressFormat, $id_lang = \null)
    {
    }
    /**
     * Generates the full address text
     *
     * @param Address $address
     * @param array   $patternRules A defined rules array to avoid some pattern
     * @param string  $newLine      A string containing the newLine format
     * @param string  $separator    A string containing the separator format
     * @param array   $style
     *
     * @return string
     */
    public static function generateAddress(\Address $address, $patternRules = array(), $newLine = "\r\n", $separator = ' ', $style = array())
    {
    }
    /**
     * Generate formatted Address string for display on Smarty templates
     *
     * @param array $params Address parameters
     * @param Smarty $smarty Smarty instance
     *
     * @return string Formatted Address string
     */
    public static function generateAddressSmarty($params, &$smarty)
    {
    }
    /**
     * Returns selected fields required for an address in an array according to a selection hash
     *
     * @return array String values
     */
    public static function getValidateFields($className)
    {
    }
    /**
     * Return a list of liable class of the className
     *
     * @param string $className
     *
     * @return array
     */
    public static function getLiableClass($className)
    {
    }
    /**
     * Returns address format fields in array by country
     *
     * @param int  $idCountry If null using PS_COUNTRY_DEFAULT
     * @param bool $splitAll
     * @param bool $cleaned
     *
     * @return array String field address format
     */
    public static function getOrderedAddressFields($idCountry = 0, $splitAll = \false, $cleaned = \false)
    {
    }
    /**
     * Return a data array containing ordered, formatedValue and object fields
     */
    public static function getFormattedLayoutData($address)
    {
    }
    /**
     * Returns address format by country if not defined using default country
     *
     * @param int $idCountry Country ID
     *
     * @return String field address format
     */
    public static function getAddressCountryFormat($idCountry = 0)
    {
    }
    /**
     * Returns address format by Country
     *
     * @param int $idCountry Country ID
     *
     * @return String field Address format
     */
    public function getFormat($idCountry)
    {
    }
    /**
     * @param int $idCountry
     *
     * @return false|null|string
     * @deprecated 1.7.0
     */
    protected function _getFormatDB($idCountry)
    {
    }
    /**
     * Get Address format from DB
     *
     * @param int $idCountry Country ID
     *
     * @return false|null|string Address format
     * @since 1.7.0
     */
    protected function getFormatDB($idCountry)
    {
    }
    /**
     * @see ObjectModel::getFieldsRequired()
     */
    public static function getFieldsRequired()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class PrestaShopLogger
 */
class PrestaShopLogger extends \ObjectModel
{
    /** @var int Log id */
    public $id_log;
    /** @var int Log severity */
    public $severity;
    /** @var int Error code */
    public $error_code;
    /** @var string Message */
    public $message;
    /** @var string Object type (eg. Order, Customer...) */
    public $object_type;
    /** @var int Object ID */
    public $object_id;
    /** @var int Object ID */
    public $id_employee;
    /** @var string Object creation date */
    public $date_add;
    /** @var string Object last modification date */
    public $date_upd;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'log', 'primary' => 'id_log', 'fields' => array('severity' => array('type' => self::TYPE_INT, 'validate' => 'isInt', 'required' => \true), 'error_code' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'), 'message' => array('type' => self::TYPE_STRING, 'validate' => 'isString', 'required' => \true), 'object_id' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'), 'id_employee' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'), 'object_type' => array('type' => self::TYPE_STRING, 'validate' => 'isName'), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'), 'date_upd' => array('type' => self::TYPE_DATE, 'validate' => 'isDate')));
    protected static $is_present = array();
    /**
     * Send e-mail to the shop owner only if the minimal severity level has been reached
     *
     * @param Logger
     * @param PrestaShopLogger $log
     */
    public static function sendByMail($log)
    {
    }
    /**
     * add a log item to the database and send a mail if configured for this $severity
     *
     * @param string $message        the log message
     * @param int    $severity
     * @param int    $errorCode
     * @param string $objectType
     * @param int    $objectId
     * @param bool   $allowDuplicate if set to true, can log several time the same information (not recommended)
     *
     * @return bool true if succeed
     */
    public static function addLog($message, $severity = 1, $errorCode = \null, $objectType = \null, $objectId = \null, $allowDuplicate = \false, $idEmployee = \null)
    {
    }
    /**
     * this function md5($this->message.$this->severity.$this->error_code.$this->object_type.$this->object_id)
     *
     * @return string hash
     */
    public function getHash()
    {
    }
    public static function eraseAllLogs()
    {
    }
    /**
     * @deprecated 1.7.0
     */
    protected function _isPresent()
    {
    }
    /**
     * check if this log message already exists in database.
     *
     * @return true if exists
     *
     * @since 1.7.0
     */
    protected function isPresent()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
abstract class ModuleGraphEngine extends \Module
{
    protected $_type;
    public function __construct($type)
    {
    }
    public function install()
    {
    }
    public static function getGraphEngines()
    {
    }
    public abstract function createValues($values);
    public abstract function setSize($width, $height);
    public abstract function setLegend($legend);
    public abstract function setTitles($titles);
    public abstract function draw();
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
abstract class ModuleGrid extends \Module
{
    protected $_employee;
    /** @var array of strings graph data */
    protected $_values = array();
    /** @var int total number of values **/
    protected $_totalCount = 0;
    /**@var string graph titles */
    protected $_title;
    /**@var int start */
    protected $_start;
    /**@var int limit */
    protected $_limit;
    /**@var string column name on which to sort */
    protected $_sort = \null;
    /**@var string sort direction DESC/ASC */
    protected $_direction = \null;
    /** @var ModuleGridEngine grid engine */
    protected $_render;
    protected abstract function getData();
    public function setEmployee($id_employee)
    {
    }
    public function setLang($id_lang)
    {
    }
    public function create($render, $type, $width, $height, $start, $limit, $sort, $dir)
    {
    }
    public function render()
    {
    }
    public function engine($params)
    {
    }
    protected function csvExport($datas)
    {
    }
    protected function _displayCsv()
    {
    }
    public function getDate()
    {
    }
    public function getLang()
    {
    }
}
abstract class Module
{
    /** @var int Module ID */
    public $id = \null;
    /** @var float Version */
    public $version;
    public $database_version;
    /**
     * @since 1.5.0.1
     * @var string Registered Version in database
     */
    public $registered_version;
    /** @var array filled with known compliant PS versions */
    public $ps_versions_compliancy = array();
    /** @var array filled with modules needed for install */
    public $dependencies = array();
    /** @var string Unique name */
    public $name;
    /** @var string Human name */
    public $displayName;
    /** @var string A little description of the module */
    public $description;
    /** @var string author of the module */
    public $author;
    /** @var string URI author of the module */
    public $author_uri = '';
    /** @var string Module key provided by addons.prestashop.com */
    public $module_key = '';
    public $description_full;
    public $additional_description;
    public $compatibility;
    public $nb_rates;
    public $avg_rate;
    public $badges;
    /** @var int need_instance */
    public $need_instance = 1;
    /** @var string Admin tab corresponding to the module */
    public $tab = \null;
    /** @var bool Status */
    public $active = \false;
    /** @var bool Is the module certified by addons.prestashop.com */
    public $trusted = \false;
    /** @var string Fill it if the module is installed but not yet set up */
    public $warning;
    public $enable_device = 7;
    /** @var array to store the limited country */
    public $limited_countries = array();
    /** @var array names of the controllers */
    public $controllers = array();
    /** @var array used by AdminTab to determine which lang file to use (admin.php or module lang file) */
    public static $classInModule = array();
    /** @var array current language translations */
    protected $_lang = array();
    /** @var string Module web path (eg. '/shop/modules/modulename/')  */
    protected $_path = \null;
    /**
     * @since 1.5.0.1
     * @var string Module local path (eg. '/home/prestashop/modules/modulename/')
     */
    protected $local_path = \null;
    /** @var array Array filled with module errors */
    protected $_errors = array();
    /** @var array Array  array filled with module success */
    protected $_confirmations = array();
    /** @var string Main table used for modules installed */
    protected $table = 'module';
    /** @var string Identifier of the main table */
    protected $identifier = 'id_module';
    /** @var array Array cache filled with modules informations */
    protected static $modules_cache;
    /** @var array Array cache filled with modules instances */
    protected static $_INSTANCE = array();
    /** @var bool Config xml generation mode */
    protected static $_generate_config_xml_mode = \false;
    /** @var array Array filled with cache translations */
    protected static $l_cache = array();
    /** @var array Array filled with cache permissions (modules / employee profiles) */
    protected static $cache_permissions = array();
    /** @var array Array filled with cache permissions (modules / employee profiles) */
    protected static $cache_lgc_access = array();
    /** @var Context */
    protected $context;
    /** @var Smarty_Data */
    protected $smarty;
    /** @var Smarty_Internal_Template|null */
    protected $current_subtemplate = \null;
    protected static $update_translations_after_install = \true;
    protected static $_batch_mode = \false;
    protected static $_defered_clearCache = array();
    protected static $_defered_func_call = array();
    /**
     * @var array Array of arrays representing tabs added by this module.
     * @see PrestaShop\PrestaShop\Adapter\Module\Tab\RegisterTabs($module)
     */
    protected $tabs = array();
    /** @var bool If true, allow push */
    public $allow_push;
    public $push_time_limit = 180;
    /** @var bool Define if we will log modules performances for this session */
    public static $_log_modules_perfs = \null;
    /** @var bool Random session for modules perfs logs*/
    public static $_log_modules_perfs_session = \null;
    const CACHE_FILE_MODULES_LIST = '/config/xml/modules_list.xml';
    const CACHE_FILE_TAB_MODULES_LIST = '/config/xml/tab_modules_list.xml';
    const CACHE_FILE_ALL_COUNTRY_MODULES_LIST = '/config/xml/modules_native_addons.xml';
    const CACHE_FILE_DEFAULT_COUNTRY_MODULES_LIST = '/config/xml/default_country_modules_list.xml';
    const CACHE_FILE_CUSTOMER_MODULES_LIST = '/config/xml/customer_modules_list.xml';
    const CACHE_FILE_MUST_HAVE_MODULES_LIST = '/config/xml/must_have_modules_list.xml';
    const CACHE_FILE_TRUSTED_MODULES_LIST = '/config/xml/trusted_modules_list.xml';
    const CACHE_FILE_UNTRUSTED_MODULES_LIST = '/config/xml/untrusted_modules_list.xml';
    public static $hosted_modules_blacklist = array('autoupgrade');
    /**
     * Set the flag to indicate we are doing an import
     *
     * @param bool $value
     */
    public static function setBatchMode($value)
    {
    }
    /**
     * @return bool
     */
    public static function getBatchMode()
    {
    }
    public static function processDeferedFuncCall()
    {
    }
    /**
     * Clear the caches stored in $_defered_clearCache
     *
     */
    public static function processDeferedClearCache()
    {
    }
    /**
     * Constructor
     *
     * @param string $name Module unique name
     * @param Context $context
     */
    public function __construct($name = \null, \Context $context = \null)
    {
    }
    /**
     * Insert module into datable
     */
    public function install()
    {
    }
    public function checkCompliancy()
    {
    }
    public static function updateTranslationsAfterInstall($update = \true)
    {
    }
    public function updateModuleTranslations()
    {
    }
    /**
     * Set errors, warning or success message of a module upgrade
     *
     * @param $upgrade_detail
     */
    protected function setUpgradeMessage($upgrade_detail)
    {
    }
    /**
     * Init the upgrade module
     *
     * @param $module
     * @return bool
     */
    public static function initUpgradeModule($module)
    {
    }
    /**
     * Run the upgrade for a given module name and version
     *
     * @return array
     */
    public function runUpgradeModule()
    {
    }
    /**
     * Upgrade the registered version to a new one
     *
     * @param $name
     * @param $version
     * @return bool
     */
    public static function upgradeModuleVersion($name, $version)
    {
    }
    /**
     * Check if a module need to be upgraded.
     * This method modify the module_cache adding an upgrade list file
     *
     * @param $module
     * @return bool
     */
    public static function needUpgrade($module)
    {
    }
    /**
     * Load the available list of upgrade of a specified module
     * with an associated version
     *
     * @param $module_name
     * @param $module_version
     * @param $registered_version
     * @return bool to know directly if any files have been found
     */
    protected static function loadUpgradeVersionList($module_name, $module_version, $registered_version)
    {
    }
    /**
     * Return the status of the upgraded module
     *
     * @param $module_name
     * @return bool
     */
    public static function getUpgradeStatus($module_name)
    {
    }
    /**
     * Delete module from datable
     *
     * @return bool result
     */
    public function uninstall()
    {
    }
    /**
     * This function enable module $name. If an $name is an array,
     * this will enable all of them
     *
     * @param array|string $name
     * @return true if succeed
     * @since 1.4.1
     * @deprecated since 1.7
     * @see  PrestaShop\PrestaShop\Core\Addon\Module\ModuleManager->enable($name)
     */
    public static function enableByName($name)
    {
    }
    /**
     * Activate current module.
     *
     * @param bool $force_all If true, enable module for all shop
     */
    public function enable($force_all = \false)
    {
    }
    public function enableDevice($device)
    {
    }
    public function disableDevice($device)
    {
    }
    /**
     * This function disable all module $name. If an $name is an array,
     * this will disable all of them
     *
     * @param array|string $name
     * @return true if succeed
     * @since 1.7
     */
    public static function disableAllByName($name)
    {
    }
    /**
     * This function disable module $name. If an $name is an array,
     * this will disable all of them
     *
     * @param array|string $name
     * @return true if succeed
     * @since 1.4.1
     * @deprecated since 1.7
     * @see  PrestaShop\PrestaShop\Core\Addon\Module\ModuleManager->disable($name)
     */
    public static function disableByName($name)
    {
    }
    /**
     * Desactivate current module.
     *
     * @param bool $force_all If true, disable module for all shop
     */
    public function disable($force_all = \false)
    {
    }
    /**
     * Display flags in forms for translations
     * @deprecated since 1.6.0.10
     *
     * @param array $languages All languages available
     * @param int $default_language Default language id
     * @param string $ids Multilingual div ids in form
     * @param string $id Current div id]
     * @param bool $return define the return way : false for a display, true for a return
     * @param bool $use_vars_instead_of_ids use an js vars instead of ids seperate by "¤"
     */
    public function displayFlags($languages, $default_language, $ids, $id, $return = \false, $use_vars_instead_of_ids = \false)
    {
    }
    /**
     * Connect module to a hook
     *
     * @param string $hook_name Hook name
     * @param array $shop_list List of shop linked to the hook (if null, link hook to all shops)
     * @return bool result
     */
    public function registerHook($hook_name, $shop_list = \null)
    {
    }
    /**
     * Unregister module from hook
     *
     * @param mixed $id_hook Hook id (can be a hook name since 1.5.0)
     * @param array $shop_list List of shop
     * @return bool result
     */
    public function unregisterHook($hook_id, $shop_list = \null)
    {
    }
    /**
     * Unregister exceptions linked to module
     *
     * @param int $id_hook Hook id
     * @param array $shop_list List of shop
     * @return bool result
     */
    public function unregisterExceptions($hook_id, $shop_list = \null)
    {
    }
    /**
     * Add exceptions for module->Hook
     *
     * @param int $id_hook Hook id
     * @param array $excepts List of file name
     * @param array $shop_list List of shop
     * @return bool result
     */
    public function registerExceptions($id_hook, $excepts, $shop_list = \null)
    {
    }
    /**
     * Edit exceptions for module->Hook
     *
     * @param int $hookID Hook id
     * @param array $excepts List of shopID and file name
     * @return bool result
     */
    public function editExceptions($id_hook, $excepts)
    {
    }
    /**
     * This function is used to determine the module name
     * of an AdminTab which belongs to a module, in order to keep translation
     * related to a module in its directory (instead of $_LANGADM)
     *
     * @param mixed $current_class the
     * @return bool|string if the class belongs to a module, will return the module name. Otherwise, return false.
     */
    public static function getModuleNameFromClass($current_class)
    {
    }
    /**
     * Return an instance of the specified module
     *
     * @param string $module_name Module name
     * @return Module
     */
    public static function getInstanceByName($module_name)
    {
    }
    protected static function coreLoadModule($module_name)
    {
    }
    /**
     * Return an instance of the specified module
     *
     * @param int $id_module Module ID
     * @return Module instance
     */
    public static function getInstanceById($id_module)
    {
    }
    public static function configXmlStringFormat($string)
    {
    }
    public static function getModuleName($module)
    {
    }
    protected static function useTooMuchMemory()
    {
    }
    /**
     * Return available modules
     *
     * @param bool $use_config in order to use config.xml file in module dir
     * @return array Modules
     */
    public static function getModulesOnDisk($use_config = \false, $logged_on_addons = \false, $id_employee = \false)
    {
    }
    public static function copyModAddonsImg($modaddons)
    {
    }
    /**
     * Return modules directory list
     *
     * @return array Modules Directory List
     */
    public static function getModulesDirOnDisk()
    {
    }
    /**
     * Return non native module
     *
     * @param int $position Take only positionnables modules
     * @return array Modules
     */
    public static function getNonNativeModuleList()
    {
    }
    public static function getNativeModuleList()
    {
    }
    /**
     * Return installed modules
     *
     * @param int $position Take only positionnables modules
     * @return array Modules
     */
    public static function getModulesInstalled($position = 0)
    {
    }
    /**
     * Return if the module is provided by addons.prestashop.com or not
     *
     * @param string $name The module name (the folder name)
     * @param string $key The key provided by addons
     * @return int
     */
    public static final function isModuleTrusted($module_name)
    {
    }
    /**
     * Generate XML files for trusted and untrusted modules
     *
     */
    public static final function generateTrustedXml()
    {
    }
    /**
     * Create the Addons API call from the module name only
     *
     * @param string $name Module dir name
     * @return bool Returns if the module is trusted by addons.prestashop.com
     */
    public static final function checkModuleFromAddonsApi($module_name)
    {
    }
    /**
     * Returns the list of the payment module associated to the current customer
     * @see PaymentModule::getInstalledPaymentModules() if you don't care about the context
     *
     * @return array module informations
     */
    public static function getPaymentModules()
    {
    }
    /**
     * Get translation for a given module text
     *
     * Note: $specific parameter is mandatory for library files.
     * Otherwise, translation key will not match for Module library
     * when module is loaded with eval() Module::getModulesOnDisk()
     *
     * @param string $string String to translate
     * @param bool|string $specific filename to use in translation key
     * @return string Translation
     */
    public function l($string, $specific = \false)
    {
    }
    /*
     * Reposition module
     *
     * @param bool $id_hook Hook ID
     * @param bool $way Up (0) or Down (1)
     * @param int $position
     */
    public function updatePosition($id_hook, $way, $position = \null)
    {
    }
    /*
     * Reorder modules position
     *
     * @param bool $id_hook Hook ID
     * @param array $shop_list List of shop
     */
    public function cleanPositions($id_hook, $shop_list = \null)
    {
    }
    /**
     * Helper displaying error message(s)
     * @param string|array $error
     * @return string
     */
    public function displayError($error)
    {
    }
    /**
     * Helper displaying warning message(s)
     * @param string|array $error
     * @return string
     */
    public function displayWarning($warning)
    {
    }
    public function displayConfirmation($string)
    {
    }
    /*
     * Return exceptions for module in hook
     *
     * @param int $id_module Module ID
     * @param int $id_hook Hook ID
     * @return array Exceptions
     */
    public static function getExceptionsStatic($id_module, $id_hook, $dispatch = \false)
    {
    }
    /*
     * Return exceptions for module in hook
     *
     * @param int $id_hook Hook ID
     * @return array Exceptions
     */
    public function getExceptions($id_hook, $dispatch = \false)
    {
    }
    /**
     *
     * @param string $module_name
     * @return bool
     *
     * @deprecated since 1.7
     * @see  PrestaShop\PrestaShop\Core\Addon\Module\ModuleManager->isInstalled($name)
     */
    public static function isInstalled($module_name)
    {
    }
    public function isEnabledForShopContext()
    {
    }
    public static function isEnabled($module_name)
    {
    }
    public function isRegisteredInHook($hook)
    {
    }
    /**
     * Template management (display, overload, cache)
     */
    protected static function _isTemplateOverloadedStatic($module_name, $template)
    {
    }
    protected function _isTemplateOverloaded($template)
    {
    }
    protected function getCacheId($name = \null)
    {
    }
    public function display($file, $template, $cache_id = \null, $compile_id = \null)
    {
    }
    /**
     * Use this method to return the result of a smarty template when assign data only locally with $this->smarty->assign()
     *
     * @param string $templatePath relative path the template file, from the module root dir.
     * @param null $cache_id
     * @param null $compile_id
     *
     * @return mixed
     */
    public function fetch($templatePath, $cache_id = \null, $compile_id = \null)
    {
    }
    /**
     * @param string $template
     * @param string|null $cache_id
     * @param string|null $compile_id
     * @return Smarty_Internal_Template
     */
    protected function getCurrentSubTemplate($template, $cache_id = \null, $compile_id = \null)
    {
    }
    protected function resetCurrentSubTemplate($template, $cache_id, $compile_id)
    {
    }
    /**
     * Get realpath of a template of current module (check if template is overriden too)
     *
     * @since 1.5.0
     * @param string $template
     * @return string
     */
    public function getTemplatePath($template)
    {
    }
    public function isCached($template, $cache_id = \null, $compile_id = \null)
    {
    }
    /**
     * Clear template cache
     *
     * @param string $template Template name
     * @param int null $cache_id
     * @param int null $compile_id
     * @return int Number of template cleared
     */
    protected function _clearCache($template, $cache_id = \null, $compile_id = \null)
    {
    }
    /**
     * Clear defered template cache
     *
     * @param string $template_path Template path
     * @param int null $cache_id
     * @param int null $compile_id
     * @return int Number of template cleared
     */
    public static function _deferedClearCache($template_path, $cache_id, $compile_id)
    {
    }
    protected function _generateConfigXml()
    {
    }
    /**
     * Check if the module is transplantable on the hook in parameter
     * @param string $hook_name
     * @return bool if module can be transplanted on hook
     */
    public function isHookableOn($hook_name)
    {
    }
    /**
     *
     * @param int $idProfile
     * @return array
     */
    public static function getModulesAccessesByIdProfile($idProfile)
    {
    }
    /**
     * Check employee permission for module
     * @param array $variable (action)
     * @param object $employee
     * @return bool if module can be transplanted on hook
     */
    public function getPermission($variable, $employee = \null)
    {
    }
    /**
     * Check employee permission for module (static method)
     * @param int $id_module
     * @param array $variable (action)
     * @param object $employee
     * @return bool if module can be transplanted on hook
     */
    public static function getPermissionStatic($id_module, $variable, $employee = \null)
    {
    }
    /**
     * Get authorized modules for a client group
     *
     * @param int $group_id
     * @return array|null
     */
    public static function getAuthorizedModules($group_id)
    {
    }
    /**
     * Get ID module by name
     *
     * @param string $name
     * @return int Module ID
     */
    public static function getModuleIdByName($name)
    {
    }
    /**
     * Get module errors
     *
     * @since 1.5.0
     * @return array errors
     */
    public function getErrors()
    {
    }
    /**
     * Get module messages confirmation
     *
     * @since 1.5.0
     * @return array conf
     */
    public function getConfirmations()
    {
    }
    /**
     * Get local path for module
     *
     * @since 1.5.0
     * @return string
     */
    public function getLocalPath()
    {
    }
    /**
     * Get uri path for module
     *
     * @since 1.5.0
     * @return string
     */
    public function getPathUri()
    {
    }
    /*
     * Return module position for a given hook
     *
     * @param bool $id_hook Hook ID
     * @return int position
     */
    public function getPosition($id_hook)
    {
    }
    /**
     * Getter for $tabs attribute
     *
     * @return array
     */
    public function getTabs()
    {
    }
    /**
     * add a warning message to display at the top of the admin page
     *
     * @param string $msg
     */
    public function adminDisplayWarning($msg)
    {
    }
    /**
     * add a info message to display at the top of the admin page
     *
     * @param string $msg
     */
    protected function adminDisplayInformation($msg)
    {
    }
    /**
     * Install module's controllers using public property $controllers
     * @return bool
     */
    protected function installControllers()
    {
    }
    /**
     * Install overrides files for the module
     *
     * @return bool
     */
    public function installOverrides()
    {
    }
    /**
     * Uninstall overrides files for the module
     *
     * @return bool
     */
    public function uninstallOverrides()
    {
    }
    /**
     * Add all methods in a module override to the override class
     *
     * @param string $classname
     * @return bool
     */
    public function addOverride($classname)
    {
    }
    /**
     * Remove all methods in a module override from the override class
     *
     * @param string $classname
     * @return bool
     */
    public function removeOverride($classname)
    {
    }
    /**
     * Return the hooks list where this module can be hooked.
     *
     * @return array Hooks list.
     */
    public function getPossibleHooksList()
    {
    }
    /**
     * Retrieve an array of the override in the module
     *
     * @return array|null
     */
    public function getOverrides()
    {
    }
    public function getTranslator()
    {
    }
    protected function trans($id, array $parameters = array(), $domain = \null, $locale = \null)
    {
    }
    /**
     * Check if the module uses the new translation system
     * @return bool
     */
    public function isUsingNewTranslationSystem()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
abstract class ModuleGraph extends \Module
{
    protected $_employee;
    /** @var array of integers graph data */
    protected $_values = array();
    /** @var array of strings graph legends (X axis) */
    protected $_legend = array();
    /**@var array string graph titles */
    protected $_titles = array('main' => \null, 'x' => \null, 'y' => \null);
    /** @var ModuleGraphEngine graph engine */
    protected $_render;
    protected abstract function getData($layers);
    public function setEmployee($id_employee)
    {
    }
    public function setLang($id_lang)
    {
    }
    protected function setDateGraph($layers, $legend = \false)
    {
    }
    protected function csvExport($datas)
    {
    }
    protected function _displayCsv()
    {
    }
    public function create($render, $type, $width, $height, $layers)
    {
    }
    public function draw()
    {
    }
    /**
     * @todo Set this method as abstracted ? Quid of module compatibility.
     */
    public function setOption($option, $layers = 1)
    {
    }
    public function engine($params)
    {
    }
    protected static function getEmployee($employee = \null, \Context $context = \null)
    {
    }
    public function getDate()
    {
    }
    public static function getDateBetween($employee = \null)
    {
    }
    public function getLang()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
abstract class ModuleGridEngine extends \Module
{
    protected $_type;
    public function __construct($type)
    {
    }
    public function install()
    {
    }
    public static function getGridEngines()
    {
    }
    public abstract function setValues($values);
    public abstract function setTitle($title);
    public abstract function setSize($width, $height);
    public abstract function setTotalCount($total_count);
    public abstract function setLimit($start, $limit);
    public abstract function render();
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
abstract class CarrierModule extends \Module
{
    public abstract function getOrderShippingCost($params, $shipping_cost);
    public abstract function getOrderShippingCostExternal($params);
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
interface ChecksumInterface
{
    public function generateChecksum($object);
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class AddressChecksum
 */
class AddressChecksum implements \ChecksumInterface
{
    const SEPARATOR = '_';
    /**
     * Generate a checksum
     *
     * @param Address $address
     *
     * @return string SHA1 checksum for the Address
     */
    public function generateChecksum($address)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class CustomerThread extends \ObjectModel
{
    public $id;
    public $id_shop;
    public $id_lang;
    public $id_contact;
    public $id_customer;
    public $id_order;
    public $id_product;
    public $status;
    public $email;
    public $token;
    public $date_add;
    public $date_upd;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'customer_thread', 'primary' => 'id_customer_thread', 'fields' => array('id_lang' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_contact' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_shop' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_customer' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_order' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_product' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'email' => array('type' => self::TYPE_STRING, 'validate' => 'isEmail', 'size' => 254), 'token' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'required' => \true), 'status' => array('type' => self::TYPE_STRING), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'), 'date_upd' => array('type' => self::TYPE_DATE, 'validate' => 'isDate')));
    protected $webserviceParameters = array('fields' => array('id_lang' => array('xlink_resource' => 'languages'), 'id_shop' => array('xlink_resource' => 'shops'), 'id_customer' => array('xlink_resource' => 'customers'), 'id_order' => array('xlink_resource' => 'orders'), 'id_product' => array('xlink_resource' => 'products')), 'associations' => array('customer_messages' => array('resource' => 'customer_message', 'id' => array('required' => \true))));
    public function getWsCustomerMessages()
    {
    }
    public function delete()
    {
    }
    public static function getCustomerMessages($id_customer, $read = \null, $id_order = \null)
    {
    }
    public static function getIdCustomerThreadByEmailAndIdOrder($email, $id_order)
    {
    }
    public static function getContacts()
    {
    }
    public static function getTotalCustomerThreads($where = \null)
    {
    }
    public static function getMessageCustomerThreads($id_customer_thread)
    {
    }
    public static function getNextThread($id_customer_thread)
    {
    }
    public static function getCustomerMessagesOrder($id_customer, $id_order)
    {
    }
}
class Cookie
{
    /** @var array Contain cookie content in a key => value format */
    protected $_content;
    /** @var array Crypted cookie name for setcookie() */
    protected $_name;
    /** @var array expiration date for setcookie() */
    protected $_expire;
    /** @var array Website domain for setcookie() */
    protected $_domain;
    /** @var array Path for setcookie() */
    protected $_path;
    /** @var array cipher tool instance */
    protected $cipherTool;
    protected $_modified = \false;
    protected $_allow_writing;
    protected $_salt;
    protected $_standalone;
    protected $_secure = \false;
    /**
     * Get data if the cookie exists and else initialize an new one.
     *
     * @param $name string Cookie name before encrypting
     * @param $path string
     */
    public function __construct($name, $path = '', $expire = \null, $shared_urls = \null, $standalone = \false, $secure = \false)
    {
    }
    public function disallowWriting()
    {
    }
    protected function getDomain($shared_urls = \null)
    {
    }
    /**
     * Set expiration date.
     *
     * @param int $expire Expiration time from now
     */
    public function setExpire($expire)
    {
    }
    /**
     * Magic method wich return cookie data from _content array.
     *
     * @param string $key key wanted
     *
     * @return string value corresponding to the key
     */
    public function __get($key)
    {
    }
    /**
     * Magic method which check if key exists in the cookie.
     *
     * @param string $key key wanted
     *
     * @return bool key existence
     */
    public function __isset($key)
    {
    }
    /**
     * Magic method which adds data into _content array.
     *
     * @param string $key   Access key for the value
     * @param mixed  $value Value corresponding to the key
     *
     * @throws Exception
     */
    public function __set($key, $value)
    {
    }
    /**
     * Magic method wich delete data into _content array.
     *
     * @param string $key key wanted
     */
    public function __unset($key)
    {
    }
    /**
     * Check customer informations saved into cookie and return customer validity.
     *
     * @deprecated as of version 1.5 use Customer::isLogged() instead
     *
     * @return bool customer validity
     */
    public function isLogged($withGuest = \false)
    {
    }
    /**
     * Check employee informations saved into cookie and return employee validity.
     *
     * @deprecated as of version 1.5 use Employee::isLoggedBack() instead
     *
     * @return bool employee validity
     */
    public function isLoggedBack()
    {
    }
    /**
     * Delete cookie
     * As of version 1.5 don't call this function, use Customer::logout() or Employee::logout() instead;.
     */
    public function logout()
    {
    }
    /**
     * Soft logout, delete everything links to the customer
     * but leave there affiliate's informations.
     * As of version 1.5 don't call this function, use Customer::mylogout() instead;.
     */
    public function mylogout()
    {
    }
    public function makeNewLog()
    {
    }
    /**
     * Get cookie content.
     */
    public function update($nullValues = \false)
    {
    }
    /**
     * Encrypt and set the Cookie.
     *
     * @param string|null $cookie Cookie content
     *
     * @return bool Indicates whether the Cookie was successfully set
     *
     * @deprecated 1.7.0
     */
    protected function _setcookie($cookie = \null)
    {
    }
    /**
     * Encrypt and set the Cookie.
     *
     * @param string|null $cookie Cookie content
     *
     * @return bool Indicates whether the Cookie was successfully set
     *
     * @since 1.7.0
     */
    protected function encryptAndSetCookie($cookie = \null)
    {
    }
    public function __destruct()
    {
    }
    /**
     * Save cookie with setcookie().
     */
    public function write()
    {
    }
    /**
     * Get a family of variables (e.g. "filter_").
     */
    public function getFamily($origin)
    {
    }
    public function unsetFamily($origin)
    {
    }
    public function getAll()
    {
    }
    /**
     * @return string name of cookie
     */
    public function getName()
    {
    }
    /**
     * Check if the cookie exists.
     *
     * @since 1.5.0
     *
     * @return bool
     */
    public function exists()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Tag
 */
class Tag extends \ObjectModel
{
    /** @var int Language id */
    public $id_lang;
    /** @var string Name */
    public $name;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'tag', 'primary' => 'id_tag', 'fields' => array('id_lang' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'name' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'required' => \true, 'size' => 32)));
    protected $webserviceParameters = array('fields' => array('id_lang' => array('xlink_resource' => 'languages')));
    public function __construct($id = \null, $name = \null, $idLang = \null)
    {
    }
    public function add($autoDate = \true, $nullValues = \false)
    {
    }
    /**
     * Add several tags in database and link it to a product
     *
     * @param int          $idLang    Language id
     * @param int          $idProduct Product id to link tags with
     * @param string|array $tagList   List of tags, as array or as a string with comas
     *
     * @return bool Operation success
     */
    public static function addTags($idLang, $idProduct, $tagList, $separator = ',')
    {
    }
    /**
     * Update tag count
     *
     * @param array|null $tagList
     */
    public static function updateTagCount($tagList = \null)
    {
    }
    /**
     * Get main tags
     *
     * @param int $idLang Language ID
     * @param int $nb     number
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public static function getMainTags($idLang, $nb = 10)
    {
    }
    /**
     * Get Product Tags
     *
     * @param int $idProduct Product ID
     *
     * @return array|bool
     */
    public static function getProductTags($idProduct)
    {
    }
    /**
     * Get Products
     *
     * @param bool         $associated
     * @param Context|null $context
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public function getProducts($associated = \true, \Context $context = \null)
    {
    }
    /**
     * Set products
     *
     * @param array $array
     *
     * @return bool
     */
    public function setProducts($array)
    {
    }
    /**
     * Delete tags for product
     *
     * @param int $idProduct Product ID
     *
     * @return bool
     */
    public static function deleteTagsForProduct($idProduct)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @since 1.5.0
 */
class ShopGroup extends \ObjectModel
{
    public $name;
    public $active = \true;
    public $share_customer;
    public $share_stock;
    public $share_order;
    public $deleted;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'shop_group', 'primary' => 'id_shop_group', 'fields' => array('name' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'required' => \true, 'size' => 64), 'share_customer' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'share_order' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'share_stock' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'active' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'deleted' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool')));
    /**
     * @see ObjectModel::getFields()
     * @return array
     */
    public function getFields()
    {
    }
    public static function getShopGroups($active = \true)
    {
    }
    /**
     * @return int Total of shop groups
     */
    public static function getTotalShopGroup($active = \true)
    {
    }
    public function haveShops()
    {
    }
    public function getTotalShops()
    {
    }
    public static function getShopsFromGroup($id_group)
    {
    }
    /**
     * Return a group shop ID from group shop name
     *
     * @param string $name
     * @return int
     */
    public static function getIdByName($name)
    {
    }
    /**
     * Detect dependency with customer or orders
     *
     * @param int $id_shop_group
     * @param string $check all|customer|order
     * @return bool
     */
    public static function hasDependency($id_shop_group, $check = 'all')
    {
    }
    public function shopNameExists($name, $id_shop = \false)
    {
    }
}
/**
 * @since 1.5.0
 */
class Shop extends \ObjectModel
{
    /** @var int ID of shop group */
    public $id_shop_group;
    /** @var int ID of shop category */
    public $id_category;
    /** @var string directory name of the selected theme */
    public $theme_name;
    /** @var string Shop name */
    public $name;
    public $active = \true;
    public $deleted;
    /** @var string Physical uri of main url (read only) */
    public $physical_uri;
    /** @var string Virtual uri of main url (read only) */
    public $virtual_uri;
    /** @var string Domain of main url (read only) */
    public $domain;
    /** @var string Domain SSL of main url (read only) */
    public $domain_ssl;
    /** @var ShopGroup Shop group object */
    protected $group;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'shop', 'primary' => 'id_shop', 'fields' => array('active' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'deleted' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'name' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'required' => \true, 'size' => 64), 'id_category' => array('type' => self::TYPE_INT, 'required' => \true), 'theme_name' => array('type' => self::TYPE_STRING, 'validate' => 'isThemeName'), 'id_shop_group' => array('type' => self::TYPE_INT, 'required' => \true)));
    /** @var array List of shops cached */
    protected static $shops;
    protected static $asso_tables = array();
    protected static $id_shop_default_tables = array();
    protected static $initialized = \false;
    protected $webserviceParameters = array('fields' => array('id_shop_group' => array('xlink_resource' => 'shop_groups'), 'id_category' => array()));
    /** @var int Store the current context of shop (CONTEXT_ALL, CONTEXT_GROUP, CONTEXT_SHOP) */
    protected static $context;
    /** @var int ID shop in the current context (will be empty if context is not CONTEXT_SHOP) */
    protected static $context_id_shop;
    /** @var int ID shop group in the current context (will be empty if context is CONTEXT_ALL) */
    protected static $context_id_shop_group;
    /** @var Theme **/
    public $theme;
    /**
     * There are 3 kinds of shop context : shop, group shop and general
     */
    const CONTEXT_SHOP = 1;
    const CONTEXT_GROUP = 2;
    const CONTEXT_ALL = 4;
    /**
     * Some data can be shared between shops, like customers or orders
     */
    const SHARE_CUSTOMER = 'share_customer';
    const SHARE_ORDER = 'share_order';
    const SHARE_STOCK = 'share_stock';
    /**
     * On shop instance, get its URL data
     *
     * @param int $id
     * @param int $id_lang
     * @param int $id_shop
     */
    public function __construct($id = \null, $id_lang = \null, $id_shop = \null)
    {
    }
    /**
     * Initialize an array with all the multistore associations in the database
     */
    protected static function init()
    {
    }
    public function setUrl()
    {
    }
    /**
     * Add a shop, and clear the cache
     *
     * @param bool $autodate
     * @param bool $null_values
     * @return bool
     */
    public function add($autodate = \true, $null_values = \false)
    {
    }
    public function associateSuperAdmins()
    {
    }
    /**
     * Remove a shop only if it has no dependencies, and remove its associations
     *
     * @return bool
     */
    public function delete()
    {
    }
    /**
     * Detect dependency with customer or orders
     *
     * @param int $id_shop
     * @return bool
     */
    public static function hasDependency($id_shop)
    {
    }
    /**
     * Find the shop from current domain / uri and get an instance of this shop
     * if INSTALL_VERSION is defined, will return an empty shop object
     *
     * @return Shop
     */
    public static function initialize()
    {
    }
    /**
     * @return Address the current shop address
     */
    public function getAddress()
    {
    }
    /**
     * Set shop theme details from Json data
     */
    public function setTheme()
    {
    }
    /**
     * Get theme directory name
     *
     * @return string $this->theme->theme_name
     */
    public function getTheme()
    {
    }
    /**
     * Get shop URI
     *
     * @return string
     */
    public function getBaseURI()
    {
    }
    /**
     * Get shop URL
     *
     * @param string $auto_secure_mode if set to true, secure mode will be checked
     * @param string $add_base_uri if set to true, shop base uri will be added
     * @return string complete base url of current shop
     */
    public function getBaseURL($auto_secure_mode = \false, $add_base_uri = \true)
    {
    }
    /**
     * Get group of current shop
     *
     * @return ShopGroup
     */
    public function getGroup()
    {
    }
    /**
     * Get root category of current shop
     *
     * @return int
     */
    public function getCategory()
    {
    }
    /**
     * Get list of shop's urls
     *
     * @return array
     */
    public function getUrls()
    {
    }
    /**
     * Check if current shop ID is the same as default shop in configuration
     *
     * @return bool
     */
    public function isDefaultShop()
    {
    }
    /**
     * Get the associated table if available
     *
     * @return array
     */
    public static function getAssoTable($table)
    {
    }
    /**
     * check if the table has an id_shop_default
     *
     * @return bool
     */
    public static function checkIdShopDefault($table)
    {
    }
    /**
     * Get list of associated tables to shop
     *
     * @return array
     */
    public static function getAssoTables()
    {
    }
    /**
     * Add table associated to shop
     *
     * @param string $table_name
     * @param array $table_details
     * @return bool
     */
    public static function addTableAssociation($table_name, $table_details)
    {
    }
    /**
     * Check if given table is associated to shop
     *
     * @param string $table
     * @return bool
     */
    public static function isTableAssociated($table)
    {
    }
    /**
     * Load list of groups and shops, and cache it
     *
     * @param bool $refresh
     */
    public static function cacheShops($refresh = \false)
    {
    }
    public static function getCompleteListOfShopsID()
    {
    }
    /**
     * Get shops list
     *
     * @param bool $active
     * @param int $id_shop_group
     * @param bool $get_as_list_id
     * @return array
     */
    public static function getShops($active = \true, $id_shop_group = \null, $get_as_list_id = \false)
    {
    }
    public function getUrlsSharedCart()
    {
    }
    /**
     * Get a collection of shops
     *
     * @param bool $active
     * @param int $id_shop_group
     * @return PrestaShopCollection Collection of Shop
     */
    public static function getShopsCollection($active = \true, $id_shop_group = \null)
    {
    }
    /**
     * Return some informations cached for one shop
     *
     * @param int $shop_id
     * @return array
     */
    public static function getShop($shop_id)
    {
    }
    /**
     * Return a shop ID from shop name
     *
     * @param string $name
     * @return int
     */
    public static function getIdByName($name)
    {
    }
    /**
     * @param bool $active
     * @param int $id_shop_group
     * @return int Total of shops
     */
    public static function getTotalShops($active = \true, $id_shop_group = \null)
    {
    }
    /**
     * Retrieve group ID of a shop
     *
     * @param int $shop_id Shop ID
     * @return int Group ID
     */
    public static function getGroupFromShop($shop_id, $as_id = \true)
    {
    }
    /**
     * If the shop group has the option $type activated, get all shops ID of this group, else get current shop ID
     *
     * @param int $shop_id
     * @param int $type Shop::SHARE_CUSTOMER | Shop::SHARE_ORDER
     * @return array
     */
    public static function getSharedShops($shop_id, $type)
    {
    }
    /**
     * Get a list of ID concerned by the shop context (E.g. if context is shop group, get list of children shop ID)
     *
     * @param string $share If false, dont check share datas from group. Else can take a Shop::SHARE_* constant value
     * @return array
     */
    public static function getContextListShopID($share = \false)
    {
    }
    /**
     * Return the list of shop by id
     *
     * @param int $id
     * @param string $identifier
     * @param string $table
     * @return array
     */
    public static function getShopById($id, $identifier, $table)
    {
    }
    /**
     * Change the current shop context
     *
     * @param int $type Shop::CONTEXT_ALL | Shop::CONTEXT_GROUP | Shop::CONTEXT_SHOP
     * @param int $id ID shop if CONTEXT_SHOP or id shop group if CONTEXT_GROUP
     */
    public static function setContext($type, $id = \null)
    {
    }
    /**
     * Get current context of shop
     *
     * @return int
     */
    public static function getContext()
    {
    }
    /**
     * @return int
     */
    public function getContextType()
    {
    }
    /**
     * Get current ID of shop if context is CONTEXT_SHOP
     *
     * @return int
     */
    public static function getContextShopID($null_value_without_multishop = \false)
    {
    }
    /**
     * @return int
     */
    public function getContextualShopId()
    {
    }
    /**
     * Get current ID of shop group if context is CONTEXT_SHOP or CONTEXT_GROUP
     *
     * @return int
     */
    public static function getContextShopGroupID($null_value_without_multishop = \false)
    {
    }
    public static function getContextShopGroup()
    {
    }
    /**
     * Add an sql restriction for shops fields
     *
     * @param int $share If false, dont check share datas from group. Else can take a Shop::SHARE_* constant value
     * @param string $alias
     */
    public static function addSqlRestriction($share = \false, $alias = \null)
    {
    }
    /**
     * Add an SQL JOIN in query between a table and its associated table in multishop
     *
     * @param string $table Table name (E.g. product, module, etc.)
     * @param string $alias Alias of table
     * @param bool $inner_join Use or not INNER JOIN
     * @param string $on
     * @return string
     */
    public static function addSqlAssociation($table, $alias, $inner_join = \true, $on = \null, $force_not_default = \false)
    {
    }
    /**
     * Add a restriction on id_shop for multishop lang table
     *
     * @param string $alias
     * @param Context $context
     * @return string
     */
    public static function addSqlRestrictionOnLang($alias = \null, $id_shop = \null)
    {
    }
    /**
     * Get all groups and associated shops as subarrays
     *
     * @return array
     */
    public static function getTree()
    {
    }
    /**
     * @return bool Return true if multishop feature is active and at last 2 shops have been created
     */
    public static function isFeatureActive()
    {
    }
    public function copyShopData($old_id, $tables_import = \false, $deleted = \false)
    {
    }
    /**
     * @param int $id
     * @return array
     */
    public static function getCategories($id = 0, $only_id = \true)
    {
    }
    /**
     * @param string $entity
     * @param int $id_shop
     * @return array|bool
     */
    public static function getEntityIds($entity, $id_shop, $active = \false, $delete = \false)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class ShopUrl extends \ObjectModel
{
    public $id_shop;
    public $domain;
    public $domain_ssl;
    public $physical_uri;
    public $virtual_uri;
    public $main;
    public $active;
    protected static $main_domain = array();
    protected static $main_domain_ssl = array();
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'shop_url', 'primary' => 'id_shop_url', 'fields' => array('active' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'main' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'domain' => array('type' => self::TYPE_STRING, 'required' => \true, 'size' => 255, 'validate' => 'isCleanHtml'), 'domain_ssl' => array('type' => self::TYPE_STRING, 'size' => 255, 'validate' => 'isCleanHtml'), 'id_shop' => array('type' => self::TYPE_INT, 'required' => \true), 'physical_uri' => array('type' => self::TYPE_STRING, 'size' => 64), 'virtual_uri' => array('type' => self::TYPE_STRING, 'size' => 64)));
    protected $webserviceParameters = array('fields' => array('id_shop' => array('xlink_resource' => 'shops')));
    /**
     * @see ObjectModel::getFields()
     * @return array
     */
    public function getFields()
    {
    }
    public function getBaseURI()
    {
    }
    public function getURL($ssl = \false)
    {
    }
    /**
     * Get list of shop urls
     *
     * @param bool $id_shop
     * @return PrestaShopCollection Collection of ShopUrl
     */
    public static function getShopUrls($id_shop = \false)
    {
    }
    public function setMain()
    {
    }
    public function canAddThisUrl($domain, $domain_ssl, $physical_uri, $virtual_uri)
    {
    }
    public static function cacheMainDomainForShop($id_shop)
    {
    }
    public static function resetMainDomainCache()
    {
    }
    public static function getMainShopDomain($id_shop = \null)
    {
    }
    public static function getMainShopDomainSSL($id_shop = \null)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Uploader
 */
class Uploader
{
    const DEFAULT_MAX_SIZE = 10485760;
    /**
     * UploaderCore constructor.
     *
     * @param null $name
     */
    public function __construct($name = \null)
    {
    }
    /**
     * @param $value
     *
     * @return $this
     */
    public function setAcceptTypes($value)
    {
    }
    /**
     * @return mixed
     */
    public function getAcceptTypes()
    {
    }
    /**
     * @param $value
     *
     * @return $this
     */
    public function setCheckFileSize($value)
    {
    }
    /**
     * @param string|null $fileName
     *
     * @return string
     */
    public function getFilePath($fileName = \null)
    {
    }
    /**
     * @return array
     */
    public function getFiles()
    {
    }
    /**
     * @param $value
     *
     * @return $this
     */
    public function setMaxSize($value)
    {
    }
    /**
     * @return mixed
     */
    public function getMaxSize()
    {
    }
    /**
     * @param $value
     *
     * @return $this
     */
    public function setName($value)
    {
    }
    /**
     * @return mixed
     */
    public function getName()
    {
    }
    /**
     * @param $value
     *
     * @return $this
     */
    public function setSavePath($value)
    {
    }
    /**
     * @return int|null
     */
    public function getPostMaxSizeBytes()
    {
    }
    /**
     * @return string
     */
    public function getSavePath()
    {
    }
    /**
     * @param string $prefix
     *
     * @return string
     */
    public function getUniqueFileName($prefix = 'PS')
    {
    }
    /**
     * @return bool
     */
    public function checkFileSize()
    {
    }
    /**
     * @param null $dest
     *
     * @return array
     */
    public function process($dest = \null)
    {
    }
    /**
     * @param      $file
     * @param null $dest
     *
     * @return mixed
     */
    public function upload($file, $dest = \null)
    {
    }
    /**
     * @param $error_code
     *
     * @return array|int|mixed|string
     */
    protected function checkUploadError($error_code)
    {
    }
    /**
     * @param $file
     *
     * @return bool
     */
    protected function validate(&$file)
    {
    }
    /**
     * @param string $filePath
     * @param bool   $clearStatCache
     *
     * @return int
     *
     * @deprecated 1.7.0
     */
    protected function _getFileSize($filePath, $clearStatCache = \false)
    {
    }
    /**
     * @param string $filePath
     * @param bool   $clearStatCache
     *
     * @return int
     *
     * @since 1.7.0
     */
    protected function getFileSize($filePath, $clearStatCache = \false)
    {
    }
    /**
     * @param $var
     *
     * @return string
     *
     * @deprecated 1.7.0
     */
    protected function _getServerVars($var)
    {
    }
    /**
     * @param $var
     *
     * @return string
     *
     * @since 1.7.0
     */
    protected function getServerVars($var)
    {
    }
    /**
     * @param $directory
     *
     * @return string
     *
     * @deprecated 1.7.0
     */
    protected function _normalizeDirectory($directory)
    {
    }
    /**
     * @param $directory
     *
     * @return string
     *
     * @since 1.7.0
     */
    protected function normalizeDirectory($directory)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Guest
 */
class Guest extends \ObjectModel
{
    public $id_operating_system;
    public $id_web_browser;
    public $id_customer;
    public $javascript;
    public $screen_resolution_x;
    public $screen_resolution_y;
    public $screen_color;
    public $sun_java;
    public $adobe_flash;
    public $adobe_director;
    public $apple_quicktime;
    public $real_player;
    public $windows_media;
    public $accept_language;
    public $mobile_theme;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'guest', 'primary' => 'id_guest', 'fields' => array('id_operating_system' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_web_browser' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_customer' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'javascript' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'screen_resolution_x' => array('type' => self::TYPE_INT, 'validate' => 'isInt'), 'screen_resolution_y' => array('type' => self::TYPE_INT, 'validate' => 'isInt'), 'screen_color' => array('type' => self::TYPE_INT, 'validate' => 'isInt'), 'sun_java' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'adobe_flash' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'adobe_director' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'apple_quicktime' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'real_player' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'windows_media' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'accept_language' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'size' => 8), 'mobile_theme' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool')));
    protected $webserviceParameters = array('fields' => array('id_customer' => array('xlink_resource' => 'customers')));
    /**
     * Set user agent
     */
    public function userAgent()
    {
    }
    /**
     * Get Guest Language
     *
     * @param $acceptLanguage
     *
     * @return mixed|string
     */
    protected function getLanguage($acceptLanguage)
    {
    }
    /**
     * Get browser
     *
     * @param string $userAgent
     *
     * @return null
     */
    protected function getBrowser($userAgent)
    {
    }
    /**
     * Get OS
     *
     * @param string $userAgent
     *
     * @return null
     */
    protected function getOs($userAgent)
    {
    }
    /**
     * Get Guest ID from Customer ID
     *
     * @param int $idCustomer Customer ID
     *
     * @return bool
     */
    public static function getFromCustomer($idCustomer)
    {
    }
    /**
     * Merge with Customer
     *
     * @param int $idGuest    Guest ID
     * @param int $idCustomer Customer ID
     */
    public function mergeWithCustomer($idGuest, $idCustomer)
    {
    }
    /**
     * Set new guest
     *
     * @param Cookie $cookie
     */
    public static function setNewGuest($cookie)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class SpecificPriceRule extends \ObjectModel
{
    public $name;
    public $id_shop;
    public $id_currency;
    public $id_country;
    public $id_group;
    public $from_quantity;
    public $price;
    public $reduction;
    public $reduction_tax;
    public $reduction_type;
    public $from;
    public $to;
    protected static $rules_application_enable = \true;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'specific_price_rule', 'primary' => 'id_specific_price_rule', 'fields' => array('name' => array('type' => self::TYPE_STRING, 'validate' => 'isCleanHtml', 'required' => \true), 'id_shop' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_country' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_currency' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_group' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'from_quantity' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt', 'required' => \true), 'price' => array('type' => self::TYPE_FLOAT, 'validate' => 'isNegativePrice', 'required' => \true), 'reduction' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice', 'required' => \true), 'reduction_tax' => array('type' => self::TYPE_INT, 'validate' => 'isBool', 'required' => \true), 'reduction_type' => array('type' => self::TYPE_STRING, 'validate' => 'isReductionType', 'required' => \true), 'from' => array('type' => self::TYPE_DATE, 'validate' => 'isDateFormat', 'required' => \false), 'to' => array('type' => self::TYPE_DATE, 'validate' => 'isDateFormat', 'required' => \false)));
    protected $webserviceParameters = array('objectsNodeName' => 'specific_price_rules', 'objectNodeName' => 'specific_price_rule', 'fields' => array('id_shop' => array('xlink_resource' => 'shops', 'required' => \true), 'id_country' => array('xlink_resource' => 'countries', 'required' => \true), 'id_currency' => array('xlink_resource' => 'currencies', 'required' => \true), 'id_group' => array('xlink_resource' => 'groups', 'required' => \true)));
    public function delete()
    {
    }
    public function deleteConditions()
    {
    }
    public static function disableAnyApplication()
    {
    }
    public static function enableAnyApplication()
    {
    }
    public function addConditions($conditions)
    {
    }
    public function apply($products = \false)
    {
    }
    public function resetApplication($products = \false)
    {
    }
    /**
     * @param array|bool $products
     */
    public static function applyAllRules($products = \false)
    {
    }
    public function getConditions()
    {
    }
    /**
     * Return the product list affected by this specific rule.
     *
     * @param bool|array $products Products list limitation.
     * @return array Affected products list IDs.
     * @throws PrestaShopDatabaseException
     */
    public function getAffectedProducts($products = \false)
    {
    }
    public static function applyRuleToProduct($id_rule, $id_product, $id_product_attribute = \null)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Tab
 */
class Tab extends \ObjectModel
{
    /** @var string Displayed name*/
    public $name;
    /** @var string Class and file name*/
    public $class_name;
    public $module;
    /** @var int parent ID */
    public $id_parent;
    /** @var int position */
    public $position;
    /** @var bool active */
    public $active = \true;
    /** @var int hide_host_mode */
    public $hide_host_mode = \false;
    /** @var string Icon font*/
    public $icon;
    const TAB_MODULE_LIST_URL = \_PS_TAB_MODULE_LIST_URL_;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'tab', 'primary' => 'id_tab', 'multilang' => \true, 'fields' => array(
        'id_parent' => array('type' => self::TYPE_INT, 'validate' => 'isInt'),
        'position' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'),
        'module' => array('type' => self::TYPE_STRING, 'validate' => 'isTabName', 'size' => 64),
        'class_name' => array('type' => self::TYPE_STRING, 'required' => \true, 'size' => 64),
        'active' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'hide_host_mode' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'icon' => array('type' => self::TYPE_STRING, 'size' => 64),
        /* Lang fields */
        'name' => array('type' => self::TYPE_STRING, 'lang' => \true, 'required' => \true, 'validate' => 'isTabName', 'size' => 64),
    ));
    protected static $_getIdFromClassName = \null;
    /**
     * Additional treatments for Tab when creating new one:
     * - generate a new position
     * - add access for admin profile
     *
     * @param bool $autoDate
     * @param bool $nullValues
     *
     * @return int id_tab
     */
    public function add($autoDate = \true, $nullValues = \false)
    {
    }
    /**
     * @param bool $nullValues
     * @param bool $autoDate
     *
     * @return bool
     */
    public function save($nullValues = \false, $autoDate = \true)
    {
    }
    /** When creating a new tab $id_tab, this add default rights to the table access
     *
     * @todo this should not be public static but protected
     *
     * @param int           $idTab
     * @param Context $context
     *
     * @return bool true if succeed
     */
    public static function initAccess($idTab, \Context $context = \null)
    {
    }
    public function delete()
    {
    }
    /**
     * Get tab id
     *
     * @return int tab id
     */
    public static function getCurrentTabId()
    {
    }
    /**
     * Get tab parent id
     *
     * @return int tab parent id
     */
    public static function getCurrentParentId()
    {
    }
    /**
     * Get tab
     *
     * @return array tab
     */
    public static function getTab($idLang, $idTab)
    {
    }
    /**
     * Return the list of tab used by a module
     *
     * @return array
     */
    public static function getModuleTabList()
    {
    }
    /**
     * Get tabs
     *
     * @return array tabs
     */
    protected static $_cache_tabs = array();
    public static function getTabs($idLang, $idParent = \null)
    {
    }
    /**
     * Get tab id from name
     * @deprecated since version 1.7.1.0, available now in PrestaShopBundle\Entity\Repository\TabRepository::getOneIdByClassName($className)
     *
     * @param string $className
     *
     * @return int Tab ID
     */
    public static function getIdFromClassName($className)
    {
    }
    /**
     * Get collection from module name
     *
     * @param      $module string Module name
     * @param null $idLang integer Language ID
     *
     * @return array|PrestaShopCollection Collection of tabs (or empty array)
     */
    public static function getCollectionFromModule($module, $idLang = \null)
    {
    }
    /**
     * Enabling tabs for module
     *
     * @param $module string Module Name
     *
     * @return bool Status
     */
    public static function enablingForModule($module)
    {
    }
    /**
     * Disabling tabs for module
     *
     * @param $module string Module name
     * @return bool Status
     */
    public static function disablingForModule($module)
    {
    }
    /**
     * Get Instance from tab class name
     *
     * @param $className string Name of tab class
     * @param $idLang     integer id_lang
     *
     * @return Tab Tab object (empty if bad id or class name)
     */
    public static function getInstanceFromClassName($className, $idLang = \null)
    {
    }
    public static function getNbTabs($idParent = \null)
    {
    }
    /**
     * return an available position in subtab for parent $id_parent
     *
     * @param mixed $idParent
     *
     * @return int
     */
    public static function getNewLastPosition($idParent)
    {
    }
    public function move($direction)
    {
    }
    /**
     * Clean positions
     *
     * @param int $idParent Parent ID
     *
     * @return bool
     */
    public function cleanPositions($idParent)
    {
    }
    /**
     * Update position
     *
     * @param bool $way
     * @param int  $position
     *
     * @return bool
     */
    public function updatePosition($way, $position)
    {
    }
    /**
     * Check Tab rights
     *
     * @param int $idTab Tab ID
     *
     * @return bool Current employee has access to tab
     */
    public static function checkTabRights($idTab)
    {
    }
    public static function recursiveTab($idTab, $tabs)
    {
    }
    /**
     * Overrides update to set position to last when changing parent tab
     *
     * @see ObjectModel::update
     *
     * @param bool $nullValues
     *
     * @return bool
     */
    public function update($nullValues = \false)
    {
    }
    /**
     * Get Tab by Profile ID
     *
     * @param int $idParent
     * @param int $idProfile
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public static function getTabByIdProfile($idParent, $idProfile)
    {
    }
    /**
     * @since 1.5.0
     */
    public static function getClassNameById($idTab)
    {
    }
    public static function getTabModulesList($idTab)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @since 1.5
 */
class HTMLTemplateOrderSlip extends \HTMLTemplateInvoice
{
    public $order;
    public $order_slip;
    /**
     * @param OrderSlip $order_slip
     * @param $smarty
     * @throws PrestaShopException
     */
    public function __construct(\OrderSlip $order_slip, $smarty)
    {
    }
    /**
     * Returns the template's HTML header
     *
     * @return string HTML header
     */
    public function getHeader()
    {
    }
    /**
     * Returns the template's HTML content
     *
     * @return string HTML content
     */
    public function getContent()
    {
    }
    /**
     * Returns the template filename when using bulk rendering
     *
     * @return string filename
     */
    public function getBulkFilename()
    {
    }
    /**
     * Returns the template filename
     *
     * @return string filename
     */
    public function getFilename()
    {
    }
    /**
     * Returns the tax tab content
     *
     * @return String Tax tab html content
     */
    public function getTaxTabContent()
    {
    }
    /**
     * Returns different tax breakdown elements
     *
     * @return Array Different tax breakdown elements
     */
    protected function getTaxBreakdown()
    {
    }
    public function getProductTaxesBreakdown()
    {
    }
    /**
     * Returns Shipping tax breakdown elements
     *
     * @return Array Shipping tax breakdown elements
     */
    public function getShippingTaxesBreakdown()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @since 1.5
 */
class PDFGenerator extends \TCPDF
{
    const DEFAULT_FONT = 'helvetica';
    public $header;
    public $footer;
    public $pagination;
    public $content;
    public $font;
    public $font_by_lang = array('ja' => 'cid0jp', 'bg' => 'freeserif', 'ru' => 'freeserif', 'uk' => 'freeserif', 'mk' => 'freeserif', 'el' => 'freeserif', 'en' => 'dejavusans', 'vn' => 'dejavusans', 'pl' => 'dejavusans', 'ar' => 'dejavusans', 'fa' => 'dejavusans', 'ur' => 'dejavusans', 'az' => 'dejavusans', 'ca' => 'dejavusans', 'gl' => 'dejavusans', 'hr' => 'dejavusans', 'sr' => 'dejavusans', 'si' => 'dejavusans', 'cs' => 'dejavusans', 'sk' => 'dejavusans', 'ka' => 'dejavusans', 'he' => 'dejavusans', 'lo' => 'dejavusans', 'lt' => 'dejavusans', 'lv' => 'dejavusans', 'tr' => 'dejavusans', 'ko' => 'cid0kr', 'zh' => 'cid0cs', 'tw' => 'cid0cs', 'th' => 'freeserif');
    /**
     * @param bool $use_cache
     * @param string $orientation
     */
    public function __construct($use_cache = \false, $orientation = 'P')
    {
    }
    /**
     * set the PDF encoding
     *
     * @param string $encoding
     */
    public function setEncoding($encoding)
    {
    }
    /**
     *
     * set the PDF header
     *
     * @param string $header HTML
     */
    public function createHeader($header)
    {
    }
    /**
     *
     * set the PDF footer
     *
     * @param string $footer HTML
     */
    public function createFooter($footer)
    {
    }
    /**
     *
     * create the PDF content
     *
     * @param string $content HTML
     */
    public function createContent($content)
    {
    }
    /**
     *
     * create the PDF pagination
     *
     * @param string $pagination HTML
     */
    public function createPagination($pagination)
    {
    }
    /**
     * Change the font
     *
     * @param string $iso_lang
     */
    public function setFontForLang($iso_lang)
    {
    }
    /**
     * @see TCPDF::Header()
     */
    public function Header()
    {
    }
    /**
     * @see TCPDF::Footer()
     */
    public function Footer()
    {
    }
    /**
     * Render HTML template
     * @param string $filename
     * @param bool $display true:display to user, false:save, 'I','D','S' as fpdf display
     * @throws PrestaShopException
     *
     * @return string HTML rendered
     */
    public function render($filename, $display = \true)
    {
    }
    /**
     * Write a PDF page
     */
    public function writePage()
    {
    }
    /**
     * Override of TCPDF::getRandomSeed() - getmypid() is blocked on several hosting
     */
    protected function getRandomSeed($seed = '')
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @since 1.5
 */
class HTMLTemplateSupplyOrderForm extends \HTMLTemplate
{
    public $supply_order;
    public $warehouse;
    public $address_warehouse;
    public $address_supplier;
    public $context;
    /**
     * @param SupplyOrder $supply_order
     * @param $smarty
     * @throws PrestaShopException
     */
    public function __construct(\SupplyOrder $supply_order, $smarty)
    {
    }
    /**
     * @see HTMLTemplate::getContent()
     */
    public function getContent()
    {
    }
    /**
     * Returns the invoice logo
     *
     * @return String Logo path
     */
    protected function getLogo()
    {
    }
    /**
     * @see HTMLTemplate::getBulkFilename()
     */
    public function getBulkFilename()
    {
    }
    /**
     * @see HTMLTemplate::getFileName()
     */
    public function getFilename()
    {
    }
    /**
     * Get order taxes summary
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     * @throws PrestaShopDatabaseException
     */
    protected function getTaxOrderSummary()
    {
    }
    /**
     * @see HTMLTemplate::getHeader()
     */
    public function getHeader()
    {
    }
    /**
     * @see HTMLTemplate::getFooter()
     */
    public function getFooter()
    {
    }
    /**
     * Rounds values of a SupplyOrderDetail object
     *
     * @param array|PrestaShopCollection $collection
     */
    protected function roundSupplyOrderDetails(&$collection)
    {
    }
    /**
     * Rounds values of a SupplyOrder object
     *
     * @param SupplyOrder $supply_order
     */
    protected function roundSupplyOrder(\SupplyOrder &$supply_order)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @since 1.5
 */
class HTMLTemplateDeliverySlip extends \HTMLTemplate
{
    public $order;
    /**
     * @param OrderInvoice $order_invoice
     * @param $smarty
     * @throws PrestaShopException
     */
    public function __construct(\OrderInvoice $order_invoice, $smarty, $bulk_mode = \false)
    {
    }
    /**
     * Returns the template's HTML header
     *
     * @return string HTML header
     */
    public function getHeader()
    {
    }
    /**
     * Returns the template's HTML content
     *
     * @return string HTML content
     */
    public function getContent()
    {
    }
    /**
     * Returns the template filename when using bulk rendering
     *
     * @return string filename
     */
    public function getBulkFilename()
    {
    }
    /**
     * Returns the template filename
     *
     * @return string filename
     */
    public function getFilename()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @since 1.5
 */
abstract class HTMLTemplate
{
    public $title;
    public $date;
    public $available_in_your_account = \true;
    /** @var Smarty */
    public $smarty;
    /** @var Shop */
    public $shop;
    /**
     * Returns the template's HTML header
     *
     * @return string HTML header
     */
    public function getHeader()
    {
    }
    /**
     * Returns the template's HTML footer
     *
     * @return string HTML footer
     */
    public function getFooter()
    {
    }
    /**
     * Returns the shop address
     *
     * @return string
     */
    protected function getShopAddress()
    {
    }
    /**
     * Returns the invoice logo
     */
    protected function getLogo()
    {
    }
    /**
     * Assign common header data to smarty variables
     */
    public function assignCommonHeaderData()
    {
    }
    /**
     * Assign hook data
     *
     * @param ObjectModel $object generally the object used in the constructor
     */
    public function assignHookData($object)
    {
    }
    /**
     * Returns the template's HTML content
     *
     * @return string HTML content
     */
    public abstract function getContent();
    /**
     * Returns the template filename
     *
     * @return string filename
     */
    public abstract function getFilename();
    /**
     * Returns the template filename when using bulk rendering
     *
     * @return string filename
     */
    public abstract function getBulkFilename();
    /**
     * If the template is not present in the theme directory, it will return the default template
     * in _PS_PDF_DIR_ directory
     *
     * @param $template_name
     *
     * @return string
     */
    protected function getTemplate($template_name)
    {
    }
    /**
     * Translation method
     *
     * @param string $string
     *
     * @return string translated text
     */
    protected static function l($string)
    {
    }
    protected function setShopId()
    {
    }
    /**
     * Returns the template's HTML pagination block
     *
     * @return string HTML pagination block
     */
    public function getPagination()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @since 1.5
 */
class PDF
{
    public $filename;
    public $pdf_renderer;
    public $objects;
    public $template;
    public $send_bulk_flag = \false;
    const TEMPLATE_INVOICE = 'Invoice';
    const TEMPLATE_ORDER_RETURN = 'OrderReturn';
    const TEMPLATE_ORDER_SLIP = 'OrderSlip';
    const TEMPLATE_DELIVERY_SLIP = 'DeliverySlip';
    const TEMPLATE_SUPPLY_ORDER_FORM = 'SupplyOrderForm';
    /**
     * @param $objects
     * @param $template
     * @param $smarty
     * @param string $orientation
     */
    public function __construct($objects, $template, $smarty, $orientation = 'P')
    {
    }
    /**
     * Render PDF.
     *
     * @param bool $display
     *
     * @return mixed
     *
     * @throws PrestaShopException
     */
    public function render($display = \true)
    {
    }
    /**
     * Get correct PDF template classes.
     *
     * @param mixed $object
     *
     * @return HTMLTemplate|false
     *
     * @throws PrestaShopException
     */
    public function getTemplateObject($object)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @since 1.5
 */
class HTMLTemplateOrderReturn extends \HTMLTemplate
{
    public $order_return;
    public $order;
    /**
     * @param OrderReturn $order_return
     * @param $smarty
     * @throws PrestaShopException
     */
    public function __construct(\OrderReturn $order_return, $smarty)
    {
    }
    /**
     * Returns the template's HTML content
     *
     * @return string HTML content
     */
    public function getContent()
    {
    }
    /**
     * Returns the template filename
     *
     * @return string filename
     */
    public function getFilename()
    {
    }
    /**
     * Returns the template filename when using bulk rendering
     *
     * @return string filename
     */
    public function getBulkFilename()
    {
    }
    /**
     * Returns the template's HTML header
     *
     * @return string HTML header
     */
    public function getHeader()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @since 1.5
 */
class HTMLTemplateInvoice extends \HTMLTemplate
{
    public $order;
    public $order_invoice;
    public $available_in_your_account = \false;
    /**
     * @param OrderInvoice $order_invoice
     * @param $smarty
     * @throws PrestaShopException
     */
    public function __construct(\OrderInvoice $order_invoice, $smarty, $bulk_mode = \false)
    {
    }
    /**
     * Returns the template's HTML header
     *
     * @return string HTML header
     */
    public function getHeader()
    {
    }
    /**
     * Compute layout elements size
     *
     * @param $params Array Layout elements
     *
     * @return Array Layout elements columns size
     */
    protected function computeLayout($params)
    {
    }
    /**
     * Returns the template's HTML content
     *
     * @return string HTML content
     */
    public function getContent()
    {
    }
    /**
     * Returns the tax tab content
     *
     * @return String Tax tab html content
     */
    public function getTaxTabContent()
    {
    }
    /**
     * Returns different tax breakdown elements
     *
     * @return Array Different tax breakdown elements
     */
    protected function getTaxBreakdown()
    {
    }
    /*
    protected function getTaxLabel($tax_breakdowns)
    {
        $tax_label = '';
        $all_taxes = array();
    
        foreach ($tax_breakdowns as $type => $bd)
            foreach ($bd as $line)
                if(isset($line['id_tax']))
                    $all_taxes[] = $line['id_tax'];
    
        $taxes = array_unique($all_taxes);
    
        foreach ($taxes as $id_tax) {
            $tax = new Tax($id_tax);
            $tax_label .= $tax->id.': '.$tax->name[$this->order->id_lang].' ('.$tax->rate.'%) ';
        }
    
        return $tax_label;
    }
    */
    /**
     * Returns the invoice template associated to the country iso_code
     *
     * @param string $iso_country
     */
    protected function getTemplateByCountry($iso_country)
    {
    }
    /**
     * Returns the template filename when using bulk rendering
     *
     * @return string filename
     */
    public function getBulkFilename()
    {
    }
    /**
     * Returns the template filename
     *
     * @return string filename
     */
    public function getFilename()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class QuickAccess
 */
class QuickAccess extends \ObjectModel
{
    /** @var string Name */
    public $name;
    /** @var string Link */
    public $link;
    /** @var bool New windows or not */
    public $new_window;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'quick_access', 'primary' => 'id_quick_access', 'multilang' => \true, 'fields' => array(
        'link' => array('type' => self::TYPE_STRING, 'validate' => 'isUrl', 'required' => \true, 'size' => 255),
        'new_window' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool', 'required' => \true),
        /* Lang fields */
        'name' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isCleanHtml', 'required' => \true, 'size' => 32),
    ));
    /**
     * Get all available quick_accesses
     *
     * @return array QuickAccesses
     */
    public static function getQuickAccesses($idLang)
    {
    }
    /**
     * Get all available quick_accesses with token
     *
     * @return array QuickAccesses
     */
    public static function getQuickAccessesWithToken($idLang, $idEmployee)
    {
    }
    /**
     * Toggle new window
     *
     * @return bool
     *
     * @throws PrestaShopException
     */
    public function toggleNewWindow()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * ProductSupplierCore class
 *
 * @since 1.5.0
 */
class ProductSupplier extends \ObjectModel
{
    /**
     * @var int product ID
     * */
    public $id_product;
    /**
     * @var int product attribute ID
     * */
    public $id_product_attribute;
    /**
     * @var int the supplier ID
     * */
    public $id_supplier;
    /**
     * @var string The supplier reference of the product
     * */
    public $product_supplier_reference;
    /**
     * @var int the currency ID for unit price tax excluded
     * */
    public $id_currency;
    /**
     * @var string The unit price tax excluded of the product
     * */
    public $product_supplier_price_te;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'product_supplier', 'primary' => 'id_product_supplier', 'fields' => array('product_supplier_reference' => array('type' => self::TYPE_STRING, 'validate' => 'isReference', 'size' => 32), 'id_product' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_product_attribute' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_supplier' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'product_supplier_price_te' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'id_currency' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId')));
    /**
     * @see ObjectModel::$webserviceParameters
     */
    protected $webserviceParameters = array('objectsNodeName' => 'product_suppliers', 'objectNodeName' => 'product_supplier', 'fields' => array('id_product' => array('xlink_resource' => 'products'), 'id_product_attribute' => array('xlink_resource' => 'combinations'), 'id_supplier' => array('xlink_resource' => 'suppliers'), 'id_currency' => array('xlink_resource' => 'currencies')));
    /**
     * @see ObjectModel::delete()
     */
    public function delete()
    {
    }
    /**
     * For a given product and supplier, gets the product supplier reference
     *
     * @param int $idProduct          Product ID
     * @param int $idProductAttribute Product Attribute ID
     * @param int $idSupplier         Supplier ID
     *
     * @return string Product Supplier reference
     */
    public static function getProductSupplierReference($idProduct, $idProductAttribute, $idSupplier)
    {
    }
    /**
     * For a given product and supplier, gets the product supplier unit price
     *
     * @param int  $idProduct          Product ID
     * @param int  $idProductAttribute Product Attribute ID
     * @param int  $idSupplier         Supplier ID
     * @param bool $withCurrency       Optional With currency
     *
     * @return array
     */
    public static function getProductSupplierPrice($idProduct, $idProductAttribute, $idSupplier, $withCurrency = \false)
    {
    }
    /**
     * For a given product and supplier, gets corresponding ProductSupplier ID
     *
     * @param int $idProduct
     * @param int $idProductAttribute
     * @param int $idSupplier
     *
     * @return array
     */
    public static function getIdByProductAndSupplier($idProduct, $idProductAttribute, $idSupplier)
    {
    }
    /**
     * For a given product, retrieves its suppliers
     *
     * @param int $idProduct
     * @param int $groupBySupplier
     *
     * @return PrestaShopCollection Collection of ProductSupplier
     */
    public static function getSupplierCollection($idProduct, $groupBySupplier = \true)
    {
    }
    /**
     * For a given Supplier, Product, returns the purchased price
     *
     * @param int  $idProduct
     * @param int  $idProductAttribute Optional
     * @param bool $convertedPrice     Optional
     *
     * @return array keys: price_te, id_currency
     */
    public static function getProductPrice($idSupplier, $idProduct, $idProductAttribute = 0, $convertedPrice = \false)
    {
    }
    /**
     * For a given product and supplier, gets the product supplier datas
     *
     * @param int $idProduct Product ID
     * @param int $idProductAttribute Product Attribute ID
     * @param int $idSupplier Supplier ID
     *
     * @return array
     */
    public static function getProductSupplierData($idProduct, $idProductAttribute, $idSupplier)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Meta
 */
class Meta extends \ObjectModel
{
    public $page;
    public $configurable = 1;
    public $title;
    public $description;
    public $keywords;
    public $url_rewrite;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'meta', 'primary' => 'id_meta', 'multilang' => \true, 'multilang_shop' => \true, 'fields' => array(
        'page' => array('type' => self::TYPE_STRING, 'validate' => 'isFileName', 'required' => \true, 'size' => 64),
        'configurable' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'),
        /* Lang fields */
        'title' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'size' => 128),
        'description' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'size' => 255),
        'keywords' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'size' => 255),
        'url_rewrite' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isLinkRewrite', 'size' => 255),
    ));
    /**
     * Get pages
     *
     * @param bool $excludeFilled
     * @param bool $addPage
     *
     * @return array
     */
    public static function getPages($excludeFilled = \false, $addPage = \false)
    {
    }
    /**
     * Get all Metas
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public static function getMetas()
    {
    }
    /**
     * Get all metas, but filter by Language
     *
     * @param int $idLang Language ID
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public static function getMetasByIdLang($idLang)
    {
    }
    /**
     * Get metas by page
     *
     * @param string $page
     * @param int    $idLang Language ID
     *
     * @return array|bool|null|object
     */
    public static function getMetaByPage($page, $idLang)
    {
    }
    /**
     * Get all metas
     *
     * @param int $idLang
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public static function getAllMeta($idLang)
    {
    }
    /**
     * Updates the current Meta in the database
     *
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Indicates whether the Meta has been successfully updated
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function update($nullValues = \false)
    {
    }
    /**
     * Deletes current Meta from the database
     *
     * @return bool `true` if delete was successful
     * @throws PrestaShopException
     */
    public function delete()
    {
    }
    /**
     * Delete selection
     *
     * @param array $selection
     *
     * @return bool
     */
    public function deleteSelection($selection)
    {
    }
    /**
     * Get equivalent URL rewrite
     *
     * @param int    $newIdLang
     * @param int    $idLang
     * @param string $urlRewrite
     *
     * @return false|null|string
     */
    public static function getEquivalentUrlRewrite($newIdLang, $idLang, $urlRewrite)
    {
    }
    /**
     * Get meta tags
     *
     * @since 1.5.0
     */
    public static function getMetaTags($idLang, $pageName, $title = '')
    {
    }
    /**
     * Get meta tags for a given page
     *
     * @param int    $idLang   Language ID
     * @param string $pageName Page name
     *
     * @return array Meta tags
     *
     * @since 1.5.0
     */
    public static function getHomeMetas($idLang, $pageName)
    {
    }
    /**
     * Get product meta tags
     *
     * @param int          $idProduct
     * @param int    $idLang
     * @param string $pageName
     *
     * @return array
     *
     * @since 1.5.0
     */
    public static function getProductMetas($idProduct, $idLang, $pageName)
    {
    }
    /**
     * Get category meta tags
     *
     * @param int    $idCategory
     * @param int    $idLang
     * @param string $pageName
     *
     * @return array
     *
     * @since 1.5.0
     */
    public static function getCategoryMetas($idCategory, $idLang, $pageName, $title = '')
    {
    }
    /**
     * Get manufacturer meta tags
     *
     *
     * @param int    $idManufacturer
     * @param int    $idLang
     * @param string $pageName
     *
     * @return array
     *
     * @since 1.5.0
     */
    public static function getManufacturerMetas($idManufacturer, $idLang, $pageName)
    {
    }
    /**
     * Get supplier meta tags
     *
     *
     * @param int    $idSupplier
     * @param int    $idLang
     * @param string $pageName
     *
     * @return array
     *
     * @since 1.5.0
     */
    public static function getSupplierMetas($idSupplier, $idLang, $pageName)
    {
    }
    /**
     * Get CMS meta tags
     *
     * @param int          $idCms
     * @param int    $idLang
     * @param string $pageName
     *
     * @return array
     *
     * @since 1.5.0
     */
    public static function getCmsMetas($idCms, $idLang, $pageName)
    {
    }
    /**
     * Get CMS category meta tags
     *
     * @param int    $idCmsCategory
     * @param int    $idLang
     * @param string $pageName
     *
     * @return array
     *
     * @since 1.5.0
     */
    public static function getCmsCategoryMetas($idCmsCategory, $idLang, $pageName)
    {
    }
    /**
     * @since 1.5.0
     */
    public static function completeMetaTags($metaTags, $defaultValue, \Context $context = \null)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
abstract class TaxManagerModule extends \Module
{
    public $tax_manager_class;
    public function install()
    {
    }
    public function hookTaxManager($args)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @since 1.5.0
 *
 * TaxCaculator is responsible of the tax computation
 */
class TaxCalculator
{
    /**
     * COMBINE_METHOD sum taxes
     * eg: 100€ * (10% + 15%)
     */
    const COMBINE_METHOD = 1;
    /**
     * ONE_AFTER_ANOTHER_METHOD apply taxes one after another
     * eg: (100€ * 10%) * 15%
     */
    const ONE_AFTER_ANOTHER_METHOD = 2;
    /**
     * @var array $taxes
     */
    public $taxes;
    /**
     * @var int $computation_method (COMBINE_METHOD | ONE_AFTER_ANOTHER_METHOD)
     */
    public $computation_method;
    /**
     * @param array $taxes
     * @param int $computation_method (COMBINE_METHOD | ONE_AFTER_ANOTHER_METHOD)
     */
    public function __construct(array $taxes = array(), $computation_method = \TaxCalculator::COMBINE_METHOD)
    {
    }
    /**
     * Compute and add the taxes to the specified price
     *
     * @param float $price_te price tax excluded
     * @return float price with taxes
     */
    public function addTaxes($price_te)
    {
    }
    /**
     * Compute and remove the taxes to the specified price
     *
     * @param float $price_ti price tax inclusive
     * @return float price without taxes
     */
    public function removeTaxes($price_ti)
    {
    }
    /**
     * @return float total taxes rate
     */
    public function getTotalRate()
    {
    }
    public function getTaxesName()
    {
    }
    /**
     * Return the tax amount associated to each taxes of the TaxCalculator
     *
     * @param float $price_te
     * @return array $taxes_amount
     */
    public function getTaxesAmount($price_te)
    {
    }
    /**
     * Return the total taxes amount
     *
     * @param float $price_te
     * @return float $amount
     */
    public function getTaxesTotalAmount($price_te)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
* A TaxManager define a way to retrieve tax.
*/
interface TaxManagerInterface
{
    /**
     * This method determine if the tax manager is available for the specified address.
     *
     * @param Address $address
     *
     * @return bool
     */
    public static function isAvailableForThisAddress(\Address $address);
    /**
     * Return the tax calculator associated to this address
     *
     * @return TaxCalculator
     */
    public function getTaxCalculator();
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
* @since 1.5
*/
class TaxManagerFactory
{
    protected static $cache_tax_manager;
    /**
     * Returns a tax manager able to handle this address
     *
     * @param Address $address
     * @param string $type
     *
     * @return TaxManagerInterface
     */
    public static function getManager(\Address $address, $type)
    {
    }
    /**
     * Check for a tax manager able to handle this type of address in the module list
     *
     * @param Address $address
     * @param string $type
     *
     * @return TaxManagerInterface|false
     */
    public static function execHookTaxManagerFactory(\Address $address, $type)
    {
    }
    /**
     * Create a unique identifier for the address
     * @param Address
     */
    protected static function getCacheKey(\Address $address)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class TaxConfiguration
{
    public function includeTaxes()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class TaxRule extends \ObjectModel
{
    public $id_tax_rules_group;
    public $id_country;
    public $id_state;
    public $zipcode_from;
    public $zipcode_to;
    public $id_tax;
    public $behavior;
    public $description;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'tax_rule', 'primary' => 'id_tax_rule', 'fields' => array('id_tax_rules_group' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_country' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_state' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'zipcode_from' => array('type' => self::TYPE_STRING, 'validate' => 'isPostCode'), 'zipcode_to' => array('type' => self::TYPE_STRING, 'validate' => 'isPostCode'), 'id_tax' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'behavior' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'), 'description' => array('type' => self::TYPE_STRING, 'validate' => 'isString')));
    protected $webserviceParameters = array('fields' => array('id_tax_rules_group' => array('xlink_resource' => 'tax_rule_groups'), 'id_state' => array('xlink_resource' => 'states'), 'id_country' => array('xlink_resource' => 'countries')));
    public static function deleteByGroupId($id_group)
    {
    }
    public static function retrieveById($id_tax_rule)
    {
    }
    public static function getTaxRulesByGroupId($id_lang, $id_group)
    {
    }
    public static function deleteTaxRuleByIdTax($id_tax)
    {
    }
    /**
     * @deprecated since 1.5
     */
    public static function deleteTaxRuleByIdCounty($id_county)
    {
    }
    /**
     * @param int $id_tax
     * @return bool
     */
    public static function isTaxInUse($id_tax)
    {
    }
    /**
     * @param string $zipcode a range of zipcode (eg: 75000 / 75000-75015)
     * @return array an array containing two zipcode ordered by zipcode
     */
    public function breakDownZipCode($zip_codes)
    {
    }
    /**
     * Replace a tax_rule id by an other one in the tax_rule table
     *
     * @param int $old_id
     * @param int $new_id
     */
    public static function swapTaxId($old_id, $new_id)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class TaxRulesGroup extends \ObjectModel
{
    public $name;
    /** @var bool active state */
    public $active;
    public $deleted = 0;
    /** @var string Object creation date */
    public $date_add;
    /** @var string Object last modification date */
    public $date_upd;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'tax_rules_group', 'primary' => 'id_tax_rules_group', 'fields' => array('name' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'required' => \true, 'size' => 64), 'active' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'deleted' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'), 'date_upd' => array('type' => self::TYPE_DATE, 'validate' => 'isDate')));
    protected $webserviceParameters = array('objectsNodeName' => 'tax_rule_groups', 'objectNodeName' => 'tax_rule_group', 'fields' => array());
    protected static $_taxes = array();
    public function update($null_values = \false)
    {
    }
    /**
     * Save the object with the field deleted to true
     *
     *  @return bool
     */
    public function historize(\TaxRulesGroup $tax_rules_group)
    {
    }
    public function getIdTaxRuleGroupFromHistorizedId($id_tax_rule)
    {
    }
    public static function getTaxRulesGroups($only_active = \true)
    {
    }
    /**
     * @return array an array of tax rules group formatted as $id => $name
     */
    public static function getTaxRulesGroupsForOptions()
    {
    }
    public function delete()
    {
    }
    /**
     * @return array
     */
    public static function getAssociatedTaxRatesByIdCountry($id_country)
    {
    }
    /**
     * Returns the tax rules group id corresponding to the name
     *
     * @param string $name
     * @return int id of the tax rules
     */
    public static function getIdByName($name)
    {
    }
    public function hasUniqueTaxRuleForCountry($id_country, $id_state, $id_tax_rule = \false)
    {
    }
    public function isUsed()
    {
    }
    /**
     * @deprecated since 1.5
     */
    public static function getTaxesRate($id_tax_rules_group, $id_country, $id_state, $zipcode)
    {
    }
    /**
     * Return taxes associated to this para
     * @deprecated since 1.5
     */
    public static function getTaxes($id_tax_rules_group, $id_country, $id_state, $id_county)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class AverageTaxOfProductsTaxCalculator
{
    public $computation_method = 'average_tax_of_products';
    public function __construct(\PrestaShop\PrestaShop\Core\Foundation\Database\DatabaseInterface $db, \PrestaShop\PrestaShop\Core\ConfigurationInterface $configuration)
    {
    }
    public function setIdOrder($id_order)
    {
    }
    public function getTaxesAmount($price_before_tax, $price_after_tax = \null, $round_precision = 2, $round_mode = \null)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class Tax extends \ObjectModel
{
    /** @var string Name */
    public $name;
    /** @var float Rate (%) */
    public $rate;
    /** @var bool active state */
    public $active;
    /** @var bool true if the tax has been historized */
    public $deleted = 0;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'tax', 'primary' => 'id_tax', 'multilang' => \true, 'fields' => array(
        'rate' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat', 'required' => \true),
        'active' => array('type' => self::TYPE_BOOL),
        'deleted' => array('type' => self::TYPE_BOOL),
        /* Lang fields */
        'name' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'required' => \true, 'size' => 32),
    ));
    protected static $_product_country_tax = array();
    protected static $_product_tax_via_rules = array();
    protected $webserviceParameters = array('objectsNodeName' => 'taxes');
    public function delete()
    {
    }
    /**
     * Save the object with the field deleted to true
     *
     *  @return bool
     */
    public function historize()
    {
    }
    public function toggleStatus()
    {
    }
    public function update($null_values = \false)
    {
    }
    protected function _onStatusChange()
    {
    }
    /**
     * Returns true if the tax is used in an order details
     *
     * @return bool
     */
    public function isUsed()
    {
    }
    /**
     * Get all available taxes
     *
     * @return array Taxes
     */
    public static function getTaxes($id_lang = \false, $active_only = \true)
    {
    }
    public static function excludeTaxeOption()
    {
    }
    /**
     * Return the tax id associated to the specified name
     *
     * @param string $tax_name
     * @param bool $active (true by default)
     */
    public static function getTaxIdByName($tax_name, $active = 1)
    {
    }
    /**
     * Returns the ecotax tax rate
     *
     * @param id_address
     * @return float $tax_rate
     */
    public static function getProductEcotaxRate($id_address = \null)
    {
    }
    /**
     * Returns the carrier tax rate
     *
     * @param id_address
     * @return float $tax_rate
     */
    public static function getCarrierTaxRate($id_carrier, $id_address = \null)
    {
    }
    /**
     * Return the product tax rate using the tax rules system
     *
     * @param int $id_product
     * @param int $id_country
     * @return Tax
     *
     * @deprecated since 1.5
     */
    public static function getProductTaxRateViaRules($id_product, $id_country, $id_state, $zipcode)
    {
    }
    /**
     * Returns the product tax
     *
     * @param int $id_product
     * @param int $id_country
     * @return Tax
     */
    public static function getProductTaxRate($id_product, $id_address = \null, \Context $context = \null)
    {
    }
}
/**
 * @since 1.5.0.1
 */
class TaxRulesTaxManager implements \TaxManagerInterface
{
    public $address;
    public $type;
    public $tax_calculator;
    /**
     *
     * @param Address $address
     * @param mixed $type An additional parameter for the tax manager (ex: tax rules id for TaxRuleTaxManager)
     */
    public function __construct(\Address $address, $type, \PrestaShop\PrestaShop\Core\ConfigurationInterface $configurationManager = \null)
    {
    }
    /**
     * Returns true if this tax manager is available for this address
     *
     * @return bool
     */
    public static function isAvailableForThisAddress(\Address $address)
    {
    }
    /**
     * Return the tax calculator associated to this address
     *
     * @return TaxCalculator
     */
    public function getTaxCalculator()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Upgrader
 */
class Upgrader
{
    const DEFAULT_CHECK_VERSION_DELAY_HOURS = 24;
    public $rss_version_link;
    public $rss_md5file_link_dir;
    /**
     * @var bool contains true if last version is not installed
     */
    protected $need_upgrade = \false;
    protected $changed_files = array();
    protected $missing_files = array();
    public $version_name;
    public $version_num;
    public $version_is_modified = \null;
    /**
     * @var string contains hte url where to download the file
     */
    public $link;
    public $autoupgrade;
    public $autoupgrade_module;
    public $autoupgrade_last_version;
    public $autoupgrade_module_link;
    public $changelog;
    public $md5;
    /**
     * UpgraderCore constructor.
     *
     * @param bool $autoload
     */
    public function __construct($autoload = \false)
    {
    }
    public function __get($var)
    {
    }
    /**
     * downloadLast download the last version of PrestaShop and save it in $dest/$filename
     *
     * @param string $dest directory where to save the file
     * @param string $filename new filename
     * @return bool
     *
     * @TODO ftp if copy is not possible (safe_mode for example)
     */
    public function downloadLast($dest, $filename = 'prestashop.zip')
    {
    }
    /**
     * @return bool
     */
    public function isLastVersion()
    {
    }
    /**
     * checkPSVersion ask to prestashop.com if there is a new version. return an array if yes, false otherwise
     *
     * @return mixed
     */
    public function checkPSVersion($force = \false)
    {
    }
    /**
     * load the last version informations stocked in base
     *
     * @return Upgrader
     */
    public function loadFromConfig()
    {
    }
    /**
     * return an array of files
     * that the md5file does not match to the original md5file (provided by $rss_md5file_link_dir )
     * @return array
     */
    public function getChangedFilesList()
    {
    }
    /** populate $this->changed_files with $path
     * in sub arrays  mail, translation and core items
     * @param string $path filepath to add, relative to _PS_ROOT_DIR_
     */
    protected function addChangedFile($path)
    {
    }
    /** populate $this->missing_files with $path
     *
     * @param string $path filepath to add, relative to _PS_ROOT_DIR_
     */
    protected function addMissingFile($path)
    {
    }
    /**
     * @param       $node
     * @param array $currentPath
     * @param int   $level
     */
    protected function browseXmlAndCompare($node, &$currentPath = array(), $level = 1)
    {
    }
    /**
     * Compare checksum
     *
     * @param string $path
     * @param string $originalSum
     *
     * @return bool
     */
    protected function compareChecksum($path, $originalSum)
    {
    }
    /**
     * Is this an authentic PrestaShop version?
     *
     * @return bool
     */
    public function isAuthenticPrestashopVersion()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class Chart
{
    protected static $poolId = 0;
    protected $width = 600;
    protected $height = 300;
    /* Time mode */
    protected $timeMode = \false;
    protected $from;
    protected $to;
    protected $format;
    protected $granularity;
    protected $curves = array();
    /** @prototype void public static function init(void) */
    public static function init()
    {
    }
    /** @prototype void public function __construct() */
    public function __construct()
    {
    }
    /** @prototype void public function setSize(int $width, int $height) */
    public function setSize($width, $height)
    {
    }
    /** @prototype void public function setTimeMode($from, $to, $granularity) */
    public function setTimeMode($from, $to, $granularity)
    {
    }
    public function getCurve($i)
    {
    }
    /** @prototype void public function display() */
    public function display()
    {
    }
    public function fetch()
    {
    }
}
class Curve
{
    protected $values = array();
    protected $label;
    protected $type;
    /** @prototype void public function setValues($values) */
    public function setValues($values)
    {
    }
    public function getValues($time_mode = \false)
    {
    }
    /** @prototype void public function setPoint(float $x, float $y) */
    public function setPoint($x, $y)
    {
    }
    public function setLabel($label)
    {
    }
    public function setType($type)
    {
    }
    public function getPoint($x)
    {
    }
}
/**
 * class ValidateConstraintTranslator
 */
class ValidateConstraintTranslator
{
    /**
     * ValidateConstraintTranslatorCore constructor.
     *
     * @param TranslatorInterface $translator
     */
    public function __construct(\Symfony\Contracts\Translation\TranslatorInterface $translator)
    {
    }
    /**
     * @param string $validator
     *
     * @return string
     */
    public function translate($validator)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Translate
 *
 * @since 1.5.0
 */
class Translate
{
    public static function getFrontTranslation($string, $class, $addslashes = \false, $htmlentities = \true, $sprintf = \null)
    {
    }
    /**
     * Get a translation for an admin controller
     *
     * @param $string
     * @param string $class
     * @param bool $addslashes
     * @param bool $htmlentities
     * @return string
     */
    public static function getAdminTranslation($string, $class = 'AdminTab', $addslashes = \false, $htmlentities = \true, $sprintf = \null)
    {
    }
    /**
     * Return the translation for a string if it exists for the base AdminController or for helpers
     *
     * @param       $string     string to translate
     * @param null  $key        md5 key if already calculated (optional)
     * @param array $langArray  Global array of admin translations
     *
     * @return string translation
     */
    public static function getGenericAdminTranslation($string, $key = \null, &$langArray)
    {
    }
    /**
     * Get a translation for a module
     *
     * @param string|Module $module
     * @param string $string
     * @param string $source
     * @return string
     */
    public static function getModuleTranslation($module, $originalString, $source, $sprintf = \null, $js = \false)
    {
    }
    /**
     * Get a translation for a PDF
     *
     * @param string $string
     * @return string
     */
    public static function getPdfTranslation($string, $sprintf = \null)
    {
    }
    /**
     * Check if string use a specif syntax for sprintf and replace arguments if use it
     *
     * @param $string
     * @param $args
     *
     * @return string
     */
    public static function checkAndReplaceArgs($string, $args)
    {
    }
    /**
     * Perform operations on translations after everything is escaped and before displaying it
     */
    public static function postProcessTranslation($string, $params)
    {
    }
    /**
     * Compatibility method that just calls postProcessTranslation.
     * @deprecated renamed this to postProcessTranslation, since it is not only used in relation to smarty.
     */
    public static function smartyPostProcessTranslation($string, $params)
    {
    }
    /**
     * Helper function to make calls to postProcessTranslation more readable.
     * @deprecated 1.7.1.0
     */
    public static function ppTags($string, $tags)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Configuration
 */
class Configuration extends \ObjectModel
{
    public $id;
    /** @var string Key */
    public $name;
    public $id_shop_group;
    public $id_shop;
    /** @var string Value */
    public $value;
    /** @var string Object creation date */
    public $date_add;
    /** @var string Object last modification date */
    public $date_upd;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'configuration', 'primary' => 'id_configuration', 'multilang' => \true, 'fields' => array('name' => array('type' => self::TYPE_STRING, 'validate' => 'isConfigName', 'required' => \true, 'size' => 254), 'id_shop_group' => array('type' => self::TYPE_NOTHING, 'validate' => 'isUnsignedId'), 'id_shop' => array('type' => self::TYPE_NOTHING, 'validate' => 'isUnsignedId'), 'value' => array('type' => self::TYPE_STRING), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'), 'date_upd' => array('type' => self::TYPE_DATE, 'validate' => 'isDate')));
    /** @var array Configuration cache (kept for backward compat) */
    protected static $_cache = \null;
    /** @var array Configuration cache with optimised key order */
    protected static $_new_cache_shop = \null;
    protected static $_new_cache_group = \null;
    protected static $_new_cache_global = \null;
    protected static $_initialized = \false;
    /** @var array Vars types */
    protected static $types = array();
    protected $webserviceParameters = array('fields' => array('value' => array()));
    /**
     * @see ObjectModel::getFieldsLang()
     * @return bool|array Multilingual fields
     */
    public function getFieldsLang()
    {
    }
    /**
     * Return ID a configuration key
     *
     * @param string $key
     * @param int    $idShopGroup
     * @param int    $idShop
     *
     * @return int Configuration key ID
     */
    public static function getIdByName($key, $idShopGroup = \null, $idShop = \null)
    {
    }
    /**
     * Is the configuration loaded
     *
     * @return bool `true` if configuration is loaded
     */
    public static function configurationIsLoaded()
    {
    }
    /**
     * WARNING: For testing only. Do NOT rely on this method, it may be removed at any time.
     * @todo Delegate static calls from Configuration to an instance
     * of a class to be created.
     */
    public static function clearConfigurationCacheForTesting()
    {
    }
    /**
     * Load all configuration data
     */
    public static function loadConfiguration()
    {
    }
    /**
     * Get a single configuration value (in one language only)
     *
     * @param string $key    Key wanted
     * @param int    $idLang Language ID
     *
     * @return string Value
     */
    public static function get($key, $idLang = \null, $idShopGroup = \null, $idShop = \null, $default = \false)
    {
    }
    /**
     * Get global value
     *
     * @param string   $key    Configuration key
     * @param int|null $idLang Language ID
     *
     * @return string
     */
    public static function getGlobalValue($key, $idLang = \null)
    {
    }
    /**
     * Get a single configuration value (in multiple languages)
     *
     * @param string $key         Configuration Key
     * @param int    $idShopGroup Shop Group ID
     * @param int    $idShop      Shop ID
     *
     * @return array Values in multiple languages
     */
    public static function getInt($key, $idShopGroup = \null, $idShop = \null)
    {
    }
    /**
     * Get a single configuration value for all shops
     *
     * @param string $key Key wanted
     * @param int    $idLang
     *
     * @return array Values for all shops
     */
    public static function getMultiShopValues($key, $idLang = \null)
    {
    }
    /**
     * Get several configuration values (in one language only)
     *
     * @throws PrestaShopException
     *
     * @param array     $keys Keys wanted
     * @param int $idLang Language ID
     * @param int $idShopGroup
     * @param int $idShop
     *
     * @return array Values
     */
    public static function getMultiple($keys, $idLang = \null, $idShopGroup = \null, $idShop = \null)
    {
    }
    /**
     * Check if key exists in configuration
     *
     * @param string $key
     * @param int    $idLang
     * @param int    $idShopGroup
     * @param int    $idShop
     *
     * @return bool
     */
    public static function hasKey($key, $idLang = \null, $idShopGroup = \null, $idShop = \null)
    {
    }
    /**
     * Set TEMPORARY a single configuration value (in one language only)
     *
     * @param string $key         Configuration key
     * @param mixed  $values      `$values` is an array if the configuration is multilingual, a single string else.
     * @param int    $idShopGroup
     * @param int    $idShop
     */
    public static function set($key, $values, $idShopGroup = \null, $idShop = \null)
    {
    }
    /**
     * Update configuration key for global context only
     *
     * @param string $key
     * @param mixed $values
     * @param bool $html
     * @return bool
     */
    public static function updateGlobalValue($key, $values, $html = \false)
    {
    }
    /**
     * Update configuration key and value into database (automatically insert if key does not exist)
     *
     * Values are inserted/updated directly using SQL, because using (Configuration) ObjectModel
     * may not insert values correctly (for example, HTML is escaped, when it should not be).
     *
     * @TODO Fix saving HTML values in Configuration model
     *
     * @param string $key    Configuration key
     * @param mixed  $values $values is an array if the configuration is multilingual, a single string else.
     * @param bool   $html   Specify if html is authorized in value
     * @param int    $idShopGroup
     * @param int    $idShop
     *
     * @return bool Update result
     */
    public static function updateValue($key, $values, $html = \false, $idShopGroup = \null, $idShop = \null)
    {
    }
    /**
     * Delete a configuration key in database (with or without language management)
     *
     * @param string $key Key to delete
     *
     * @return bool Deletion result
     */
    public static function deleteByName($key)
    {
    }
    /**
     * Delete configuration key from current context.
     *
     * @param string $key
     */
    public static function deleteFromContext($key)
    {
    }
    /**
     * Check if configuration var is defined in given context
     *
     * @param string $key
     * @param int    $idLang
     * @param int    $context
     */
    public static function hasContext($key, $idLang, $context)
    {
    }
    /**
     *
     * @param string $key
     *
     * @return bool
     */
    public static function isOverridenByCurrentContext($key)
    {
    }
    /**
     * Check if a key was loaded as multi lang
     *
     * @param string $key
     * @return bool
     */
    public static function isLangKey($key)
    {
    }
    /**
     * @return bool
     */
    public static function isCatalogMode()
    {
    }
    /**
     * @return bool
     */
    public static function showPrices()
    {
    }
    /**
     * Add SQL restriction on shops for configuration table
     *
     * @param int $idShopGroup
     * @param int $idShop
     *
     * @return string
     */
    protected static function sqlRestriction($idShopGroup, $idShop)
    {
    }
    /**
     * This method is override to allow TranslatedConfiguration entity
     *
     * @param string $sqlJoin
     * @param string $sqlFilter
     * @param string $sqlSort
     * @param string $sqlLimit
     *
     * @return array
     */
    public function getWebserviceObjectList($sqlJoin, $sqlFilter, $sqlSort, $sqlLimit)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * Override module templates easily.
 *
 * @since 1.7.0.0
 */
class SmartyResourceModule extends \Smarty_Resource_Custom
{
    public function __construct(array $paths, $isAdmin = \false)
    {
    }
    /**
     * Fetch a template.
     *
     * @param string $name   template name
     * @param string $source template source
     * @param int    $mtime  template modification timestamp (epoch)
     */
    protected function fetch($name, &$source, &$mtime)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * Determine the best existing template.
 *
 * @since 1.7.0.0
 */
class TemplateFinder
{
    public function __construct(array $directories, $extension)
    {
    }
    public function getTemplate($template, $entity, $id, $locale)
    {
    }
    /**
     * Get productListEntities.
     *
     * @return array
     */
    public function getProductListEntities()
    {
    }
    /**
     * Set productListEntities.
     *
     * @param array $productListEntities
     *
     * @return TemplateFinderCore
     */
    public function setProductListEntities($productListEntities)
    {
    }
    /**
     * Get productListSearch.
     *
     * @return array
     */
    public function getProductListSearchEntities()
    {
    }
    /**
     * Set productListSearch.
     *
     * @param array $productListSearch
     *
     * @return TemplateFinderCore
     */
    public function setProductListSearchEntities($productListSearchEntities)
    {
    }
    /**
     * Get productEntities.
     *
     * @return array
     */
    public function getProductEntities()
    {
    }
    /**
     * Set productEntities.
     *
     * @param array $productEntities
     *
     * @return TemplateFinderCore
     */
    public function setProductEntities($productEntities)
    {
    }
    /**
     * Get brandListEntities.
     *
     * @return array
     */
    public function getBrandListEntities()
    {
    }
    /**
     * Set brandListEntities.
     *
     * @param array $brandListEntities
     *
     * @return TemplateFinderCore
     */
    public function setBrandListEntities($brandListEntities)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * Override module templates easily.
 *
 * @since 1.7.0.0
 */
class SmartyResourceParent extends \Smarty_Resource_Custom
{
    public function __construct(array $paths)
    {
    }
    /**
     * Fetch a template.
     *
     * @param string $name   template name
     * @param string $source template source
     * @param int    $mtime  template modification timestamp (epoch)
     */
    protected function fetch($name, &$source, &$mtime)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class SmartyDev extends \Smarty
{
    public function __construct()
    {
    }
    /**
     * {@inheritDoc}
     */
    public function fetch($template = \null, $cache_id = \null, $compile_id = \null, $parent = \null, $display = \false, $merge_tpl_vars = \true, $no_output_filter = \false)
    {
    }
}
class Smarty_Dev_Template extends \Smarty_Internal_Template
{
    /** @var SmartyCustom|null */
    public $smarty = \null;
    public function fetch($template = \null, $cache_id = \null, $compile_id = \null, $parent = \null, $display = \false, $merge_tpl_vars = \true, $no_output_filter = \false)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class SmartyCustom extends \Smarty
{
    public function __construct()
    {
    }
    /**
     * Delete compiled template file (lazy delete if resource_name is not specified)
     *
     * @param  string  $resource_name template name
     * @param  string  $compile_id    compile id
     * @param  int $exp_time      expiration time
     *
     * @return int number of template files deleted
     */
    public function clearCompiledTemplate($resource_name = \null, $compile_id = \null, $exp_time = \null)
    {
    }
    /**
     * Mark all template files to be regenerated
     *
     * @param  int $exp_time expiration time
     * @param  string  $type     resource type
     *
     * @return int number of cache files which needs to be updated
     */
    public function clearAllCache($exp_time = \null, $type = \null)
    {
    }
    /**
     * Mark file to be regenerated for a specific template
     *
     * @param  string  $template_name template name
     * @param  string  $cache_id      cache id
     * @param  string  $compile_id    compile id
     * @param  int $exp_time      expiration time
     * @param  string  $type          resource type
     *
     * @return int number of cache files which needs to be updated
     */
    public function clearCache($template_name, $cache_id = \null, $compile_id = \null, $exp_time = \null, $type = \null)
    {
    }
    /**
     * Check the compile cache needs to be invalidated (multi front + local cache compatible)
     */
    public function check_compile_cache_invalidation()
    {
    }
    /**
     * {@inheritDoc}
     */
    public function fetch($template = \null, $cache_id = \null, $compile_id = \null, $parent = \null, $display = \false, $merge_tpl_vars = \true, $no_output_filter = \false)
    {
    }
    /**
     * {@inheritDoc}
     */
    public function createTemplate($template, $cache_id = \null, $compile_id = \null, $parent = \null, $do_clone = \true)
    {
    }
    /**
     * Handle the lazy template cache invalidation
     *
     * @param  string  $template template name
     * @param  string  $cache_id      cache id
     * @param  string  $compile_id    compile id
     */
    public function check_template_invalidation($template, $cache_id, $compile_id)
    {
    }
    /**
     * Store the cache file path
     *
     * @param  string  $filepath cache file path
     * @param  string  $template template name
     * @param  string  $cache_id      cache id
     * @param  string  $compile_id    compile id
     */
    public function update_filepath($filepath, $template, $cache_id, $compile_id)
    {
    }
    /**
     * Check if the current template is stored in the lazy cache
     * Entry in the lazy cache = no need to regenerate the template
     *
     * @param  string  $template template name
     * @param  string  $cache_id      cache id
     * @param  string  $compile_id    compile id
     *
     * @return bool
     */
    public function is_in_lazy_cache($template, $cache_id, $compile_id)
    {
    }
    /**
     * Insert the current template in the lazy cache
     *
     * @param  string  $template template name
     * @param  string  $cache_id      cache id
     * @param  string  $compile_id    compile id
     *
     * @return bool
     */
    public function insert_in_lazy_cache($template, $cache_id, $compile_id)
    {
    }
    /**
     * Delete the current template from the lazy cache or the whole cache if no template name is given
     *
     * @param  string  $template template name
     * @param  string  $cache_id      cache id
     * @param  string  $compile_id    compile id
     *
     * @return bool
     */
    public function delete_from_lazy_cache($template, $cache_id, $compile_id)
    {
    }
}
class Smarty_Custom_Template extends \Smarty_Internal_Template
{
    /** @var SmartyCustom|null */
    public $smarty = \null;
    public function fetch($template = \null, $cache_id = \null, $compile_id = \null, $parent = \null, $display = \false, $merge_tpl_vars = \true, $no_output_filter = \false)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * Used to delay loading of external classes with smarty->register_plugin.
 */
class SmartyLazyRegister
{
    protected $registry = array();
    protected static $instances = array();
    /**
     * Register a function or method to be dynamically called later.
     *
     * @param string|array $params function name or array(object name, method name)
     */
    public function register($params)
    {
    }
    public function isRegistered($params)
    {
    }
    /**
     * Dynamically call static function or method.
     *
     * @param string $name      function name
     * @param mixed  $arguments function argument
     *
     * @return mixed function return
     */
    public function __call($name, $arguments)
    {
    }
    public static function getInstance($smarty)
    {
    }
}
class Smarty_CacheResource_Mysql extends \Smarty_CacheResource_Custom
{
    /**
     * fetch cached content and its modification time from data source
     *
     * @param string $id unique cache content identifier
     * @param string $name template name
     * @param string $cache_id cache id
     * @param string $compile_id compile id
     * @param string $content cached content
     * @param int $mtime cache modification timestamp (epoch)
     * @return void
     */
    protected function fetch($id, $name, $cache_id, $compile_id, &$content, &$mtime)
    {
    }
    /**
     * Fetch cached content's modification timestamp from data source
     *
     * @note implementing this method is optional. Only implement it if modification times can be accessed faster than loading the complete cached content.
     * @param string $id unique cache content identifier
     * @param string $name template name
     * @param string $cache_id cache id
     * @param string $compile_id compile id
     * @return int|boolean timestamp (epoch) the template was modified, or false if not found
     */
    protected function fetchTimestamp($id, $name, $cache_id, $compile_id)
    {
    }
    /**
     * Save content to cache
     *
     * @param string $id unique cache content identifier
     * @param string $name template name
     * @param string $cache_id cache id
     * @param string $compile_id compile id
     * @param int|null $exp_time seconds till expiration time in seconds or null
     * @param string $content content to cache
     * @return bool success
     */
    protected function save($id, $name, $cache_id, $compile_id, $exp_time, $content)
    {
    }
    /**
     * Delete content from cache
     *
     * @param string $name template name
     * @param string $cache_id cache id
     * @param string $compile_id compile id
     * @param int|null $exp_time seconds till expiration or null
     * @return int number of deleted caches
     */
    protected function delete($name, $cache_id, $compile_id, $exp_time)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class RequestSql
 */
class RequestSql extends \ObjectModel
{
    public $name;
    public $sql;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'request_sql', 'primary' => 'id_request_sql', 'fields' => array('name' => array('type' => self::TYPE_STRING, 'validate' => 'isString', 'required' => \true, 'size' => 200), 'sql' => array('type' => self::TYPE_SQL, 'validate' => 'isString', 'required' => \true)));
    /** @var array : List of params to tested */
    public $tested = array('required' => array('SELECT', 'FROM'), 'option' => array('WHERE', 'ORDER', 'LIMIT', 'HAVING', 'GROUP', 'UNION'), 'operator' => array('AND', '&&', 'BETWEEN', 'AND', 'BINARY', '&', '~', '|', '^', 'CASE', 'WHEN', 'END', 'DIV', '/', '<=>', '=', '>=', '>', 'IS', 'NOT', 'NULL', '<<', '<=', '<', 'LIKE', '-', '%', '!=', '<>', 'REGEXP', '!', '||', 'OR', '+', '>>', 'RLIKE', 'SOUNDS', '*', '-', 'XOR', 'IN'), 'function' => array('AVG', 'SUM', 'COUNT', 'MIN', 'MAX', 'STDDEV', 'STDDEV_SAMP', 'STDDEV_POP', 'VARIANCE', 'VAR_SAMP', 'VAR_POP', 'GROUP_CONCAT', 'BIT_AND', 'BIT_OR', 'BIT_XOR'), 'unauthorized' => array('DELETE', 'ALTER', 'INSERT', 'REPLACE', 'CREATE', 'TRUNCATE', 'OPTIMIZE', 'GRANT', 'REVOKE', 'SHOW', 'HANDLER', 'LOAD', 'ROLLBACK', 'SAVEPOINT', 'UNLOCK', 'INSTALL', 'UNINSTALL', 'ANALZYE', 'BACKUP', 'CHECK', 'CHECKSUM', 'REPAIR', 'RESTORE', 'CACHE', 'DESCRIBE', 'EXPLAIN', 'USE', 'HELP', 'SET', 'DUPLICATE', 'VALUES', 'INTO', 'RENAME', 'CALL', 'PROCEDURE', 'FUNCTION', 'DATABASE', 'SERVER', 'LOGFILE', 'DEFINER', 'RETURNS', 'EVENT', 'TABLESPACE', 'VIEW', 'TRIGGER', 'DATA', 'DO', 'PASSWORD', 'USER', 'PLUGIN', 'FLUSH', 'KILL', 'RESET', 'START', 'STOP', 'PURGE', 'EXECUTE', 'PREPARE', 'DEALLOCATE', 'LOCK', 'USING', 'DROP', 'FOR', 'UPDATE', 'BEGIN', 'BY', 'ALL', 'SHARE', 'MODE', 'TO', 'KEY', 'DISTINCTROW', 'DISTINCT', 'HIGH_PRIORITY', 'LOW_PRIORITY', 'DELAYED', 'IGNORE', 'FORCE', 'STRAIGHT_JOIN', 'SQL_SMALL_RESULT', 'SQL_BIG_RESULT', 'QUICK', 'SQL_BUFFER_RESULT', 'SQL_CACHE', 'SQL_NO_CACHE', 'SQL_CALC_FOUND_ROWS', 'WITH'));
    public $attributes = array('passwd' => '*******************', 'secure_key' => '*******************');
    /** @var array : list of errors */
    public $error_sql = array();
    /**
     * Get list of request SQL
     *
     * @return array|bool
     */
    public static function getRequestSql()
    {
    }
    /**
     * Get list of request SQL by id request
     *
     * @param int $id
     *
     * @return array
     */
    public static function getRequestSqlById($id)
    {
    }
    /**
     * Call the parserSQL() method in Tools class
     * Cut the request in table for check it
     *
     * @param string $sql
     *
     * @return bool
     */
    public function parsingSql($sql)
    {
    }
    /**
     * Check if the parsing of the SQL request is good or not
     *
     * @param array $tab
     * @param bool $in
     * @param string $sql
     *
     * @return bool
     */
    public function validateParser($tab, $in = \false, $sql)
    {
    }
    /**
     * Cut the request for check each cutting
     *
     * @param $tab
     * @param $in
     * @param $sql
     *
     * @return bool
     */
    public function validateSql($tab, $in, $sql)
    {
    }
    /**
     * Get list of all tables
     *
     * @return array
     */
    public function getTables()
    {
    }
    /**
     * Get list of all attributes by an table
     *
     * @param $table
     *
     * @return array
     */
    public function getAttributesByTable($table)
    {
    }
    /**
     * Cut an join sentence
     *
     * @param $attrs
     * @param $from
     *
     * @return array|bool
     */
    public function cutJoin($attrs, $from)
    {
    }
    /**
     * Cut an attribute with or without the alias
     *
     * @param $attr
     * @param $from
     *
     * @return array|bool
     */
    public function cutAttribute($attr, $from)
    {
    }
    /**
     * Get name of table by alias
     *
     * @param bool $alias
     * @param $tables
     *
     * @return array|bool
     */
    public function returnNameTable($alias = \false, $tables, $attr = \null)
    {
    }
    /**
     * Check if an attributes exists in a table
     *
     * @param string $attr
     * @param $table
     *
     * @return bool
     */
    public function attributExistInTable($attr, $table)
    {
    }
    /**
     * Check if all required sentence existing
     *
     * @param $tab
     *
     * @return bool
     */
    public function testedRequired($tab)
    {
    }
    /**
     * Check if an unauthorized existing in an array
     *
     * @param string $tab
     *
     * @return bool
     */
    public function testedUnauthorized($tab)
    {
    }
    /**
     * Check a "FROM" sentence
     *
     * @param string $from
     *
     * @return bool
     */
    public function checkedFrom($from)
    {
    }
    /**
     * Check a "SELECT" sentence
     *
     * @param string $select
     * @param string $from
     * @param bool $in
     *
     * @return bool
     */
    public function checkedSelect($select, $from, $in = \false)
    {
    }
    /**
     * Check a "WHERE" sentence
     *
     * @param string $where
     * @param string $from
     * @param string $sql
     *
     * @return bool
     */
    public function checkedWhere($where, $from, $sql)
    {
    }
    /**
     * Check a "HAVING" sentence
     *
     * @param string $having
     * @param string $from
     *
     * @return bool
     */
    public function checkedHaving($having, $from)
    {
    }
    /**
     * Check a "ORDER" sentence
     *
     * @param string $order
     * @param string $from
     *
     * @return bool
     */
    public function checkedOrder($order, $from)
    {
    }
    /**
     * Check a "GROUP BY" sentence
     *
     * @param string $group
     * @param string $from
     *
     * @return bool
     */
    public function checkedGroupBy($group, $from)
    {
    }
    /**
     * Check a "LIMIT" sentence
     *
     * @param string $limit
     *
     * @return bool
     */
    public function checkedLimit($limit)
    {
    }
}
class Tools
{
    const CACERT_LOCATION = 'https://curl.haxx.se/ca/cacert.pem';
    protected static $file_exists_cache = array();
    protected static $_forceCompile;
    protected static $_caching;
    protected static $_user_plateform;
    protected static $_user_browser;
    protected static $request;
    public static $round_mode = \null;
    public function __construct(\Symfony\Component\HttpFoundation\Request $request = \null)
    {
    }
    /**
     * Random password generator
     *
     * @param int $length Desired length (optional)
     * @param string $flag Output type (NUMERIC, ALPHANUMERIC, NO_NUMERIC, RANDOM)
     * @return bool|string Password
     */
    public static function passwdGen($length = 8, $flag = 'ALPHANUMERIC')
    {
    }
    /**
     * Random bytes generator
     *
     * Limited to OpenSSL since 1.7.0.0
     *
     * @param int $length Desired length of random bytes
     *
     * @return bool|string Random bytes
     */
    public static function getBytes($length)
    {
    }
    public static function strReplaceFirst($search, $replace, $subject, $cur = 0)
    {
    }
    /**
     * Redirect user to another page
     *
     * @param string $url Desired URL
     * @param string $base_uri Base URI (optional)
     * @param Link $link
     * @param string|array $headers A list of headers to send before redirection
     */
    public static function redirect($url, $base_uri = \__PS_BASE_URI__, \Link $link = \null, $headers = \null)
    {
    }
    /**
     * Redirect URLs already containing PS_BASE_URI
     *
     * @param string $url Desired URL
     */
    public static function redirectLink($url)
    {
    }
    /**
     * Redirect user to another admin page
     *
     * @param string $url Desired URL
     */
    public static function redirectAdmin($url)
    {
    }
    /**
     * getShopProtocol return the available protocol for the current shop in use
     * SSL if Configuration is set on and available for the server
     *
     * @return String
     */
    public static function getShopProtocol()
    {
    }
    /**
     * getProtocol return the set protocol according to configuration (http[s])
     * @param bool $use_ssl true if require ssl
     * @return String (http|https)
     */
    public static function getProtocol($use_ssl = \null)
    {
    }
    /**
     * getHttpHost return the <b>current</b> host used, with the protocol (http or https) if $http is true
     * This function should not be used to choose http or https domain name.
     * Use Tools::getShopDomain() or Tools::getShopDomainSsl instead
     *
     * @param bool $http
     * @param bool $entities
     * @return string host
     */
    public static function getHttpHost($http = \false, $entities = \false, $ignore_port = \false)
    {
    }
    /**
     * getShopDomain returns domain name according to configuration and ignoring ssl
     *
     * @param bool $http if true, return domain name with protocol
     * @param bool $entities if true, convert special chars to HTML entities
     * @return string domain
     */
    public static function getShopDomain($http = \false, $entities = \false)
    {
    }
    /**
     * getShopDomainSsl returns domain name according to configuration and depending on ssl activation
     *
     * @param bool $http if true, return domain name with protocol
     * @param bool $entities if true, convert special chars to HTML entities
     * @return string domain
     */
    public static function getShopDomainSsl($http = \false, $entities = \false)
    {
    }
    /**
     * Get the server variable SERVER_NAME
     *
     * @return string server name
     */
    public static function getServerName()
    {
    }
    /**
     * Get the server variable REMOTE_ADDR, or the first ip of HTTP_X_FORWARDED_FOR (when using proxy)
     *
     * @return string $remote_addr ip of client
     */
    public static function getRemoteAddr()
    {
    }
    /**
     * Check if the current page use SSL connection on not
     *
     * @return bool uses SSL
     */
    public static function usingSecureMode()
    {
    }
    /**
     * Get the current url prefix protocol (https/http)
     *
     * @return string protocol
     */
    public static function getCurrentUrlProtocolPrefix()
    {
    }
    /**
     * Secure an URL referrer
     *
     * @param string $referrer URL referrer
     * @return string secured referrer
     */
    public static function secureReferrer($referrer)
    {
    }
    /**
     * Get a value from $_POST / $_GET
     * if unavailable, take a default value
     *
     * @param string $key Value key
     * @param mixed $default_value (optional)
     * @return mixed Value
     */
    public static function getValue($key, $default_value = \false)
    {
    }
    /**
     * Get all values from $_POST/$_GET
     * @return mixed
     */
    public static function getAllValues()
    {
    }
    public static function getIsset($key)
    {
    }
    /**
     * Change language in cookie while clicking on a flag
     *
     * @return string iso code
     */
    public static function setCookieLanguage($cookie = \null)
    {
    }
    /**
     * Set cookie id_lang
     */
    public static function switchLanguage(\Context $context = \null)
    {
    }
    public static function getCountry($address = \null)
    {
    }
    /**
     * Set cookie currency from POST or default currency
     *
     * @return Currency object
     */
    public static function setCurrency($cookie)
    {
    }
    /**
     * Return the CLDR associated with the context or given language_code
     *
     * @param Context|null $context
     * @param null         $language_code
     * @return \PrestaShop\PrestaShop\Core\Cldr\Repository
     * @throws PrestaShopException
     */
    public static function getCldr(\Context $context = \null, $language_code = \null)
    {
    }
    /**
     * Return price with currency sign for a given product
     *
     * @param float $price Product price
     * @param object|array $currency Current currency (object, id_currency, NULL => context currency)
     * @return string Price correctly formated (sign, decimal separator...)
     * if you modify this function, don't forget to modify the Javascript function formatCurrency (in tools.js)
     */
    public static function displayPrice($price, $currency = \null, $no_utf8 = \false, \Context $context = \null)
    {
    }
    /*
     * Return a number well formatted
     * @param float $number A number
     * @param nullable $currency / not used anymaore
     */
    public static function displayNumber($number, $currency = \null)
    {
    }
    public static function displayPriceSmarty($params, &$smarty)
    {
    }
    /**
     * Return price converted
     *
     * @param float $price Product price
     * @param object|array $currency Current currency object
     * @param bool $to_currency convert to currency or from currency to default currency
     * @param Context $context
     * @return float Price
     */
    public static function convertPrice($price, $currency = \null, $to_currency = \true, \Context $context = \null)
    {
    }
    /**
     * Implement array_replace for PHP <= 5.2
     *
     * @return array|mixed|null
     */
    public static function array_replace()
    {
    }
    /**
     *
     * Convert amount from a currency to an other currency automatically
     * @param float $amount
     * @param Currency $currency_from if null we used the default currency
     * @param Currency $currency_to if null we used the default currency
     */
    public static function convertPriceFull($amount, \Currency $currency_from = \null, \Currency $currency_to = \null)
    {
    }
    /**
     * Display date regarding to language preferences
     *
     * @param array $params Date, format...
     * @param object $smarty Smarty object for language preferences
     * @return string Date
     */
    public static function dateFormat($params, &$smarty)
    {
    }
    /**
     * Display date regarding to language preferences
     *
     * @param string $date Date to display format UNIX
     * @param int $id_lang Language id DEPRECATED
     * @param bool $full With time or not (optional)
     * @param string $separator DEPRECATED
     * @return string Date
     */
    public static function displayDate($date, $id_lang = \null, $full = \false, $separator = \null)
    {
    }
    /**
     * Get localized date format
     *
     * @return string Date format
     */
    public static function getDateFormat()
    {
    }
    /**
     * Get formatted date
     *
     * @param string $date_str Date string
     * @param bool $full With time or not (optional)
     * @return string Formatted date
     */
    public static function formatDateStr($date_str, $full = \false)
    {
    }
    /**
     * Sanitize a string
     *
     * @param string $string String to sanitize
     * @param bool $full String contains HTML or not (optional)
     * @return string Sanitized string
     */
    public static function safeOutput($string, $html = \false)
    {
    }
    public static function htmlentitiesUTF8($string, $type = \ENT_QUOTES)
    {
    }
    public static function htmlentitiesDecodeUTF8($string)
    {
    }
    public static function safePostVars()
    {
    }
    /**
     * Delete directory and subdirectories
     *
     * @param string $dirname Directory name
     */
    public static function deleteDirectory($dirname, $delete_self = \true)
    {
    }
    /**
     * Delete file
     *
     * @param string $file File path
     * @param array $exclude_files Excluded files
     */
    public static function deleteFile($file, $exclude_files = array())
    {
    }
    /**
     * Clear XML cache folder
     */
    public static function clearXMLCache()
    {
    }
    /**
     * Display an error according to an error code
     *
     * @param string $string Error message
     * @param bool $htmlentities By default at true for parsing error message with htmlentities
     */
    public static function displayError($string = 'Fatal error', $htmlentities = \true, \Context $context = \null)
    {
    }
    /**
     * Display an error with detailed object
     *
     * @param mixed $object
     * @param bool $kill
     * @return $object if $kill = false;
     */
    public static function dieObject($object, $kill = \true)
    {
    }
    public static function debug_backtrace($start = 0, $limit = \null)
    {
    }
    /**
     * Prints object information into error log
     *
     * @see error_log()
     * @param mixed $object
     * @param int|null    $message_type
     * @param string|null $destination
     * @param string|null $extra_headers
     * @return bool
     */
    public static function error_log($object, $message_type = \null, $destination = \null, $extra_headers = \null)
    {
    }
    /**
     * Check if submit has been posted
     *
     * @param string $submit submit name
     */
    public static function isSubmit($submit)
    {
    }
    /**
     * Hash password
     *
     * @param string $passwd String to hash
     *
     * @return string Hashed password
     *
     * @deprecated 1.7.0
     */
    public static function encrypt($passwd)
    {
    }
    /**
     * Hash password
     *
     * @param string $passwd String to has
     *
     * @return string Hashed password
     *
     * @since 1.7.0
     */
    public static function hash($passwd)
    {
    }
    /**
     * Hash data string
     *
     * @param string $data String to encrypt
     *
     * @return string Hashed IV
     *
     * @deprecated 1.7.0
     */
    public static function encryptIV($data)
    {
    }
    /**
     * Hash data string
     *
     * @param string $data String to encrypt
     *
     * @return string Hashed IV
     *
     * @since 1.7.0
     */
    public static function hashIV($data)
    {
    }
    /**
     * Get token to prevent CSRF
     *
     * @param string $token token to encrypt
     */
    public static function getToken($page = \true, \Context $context = \null)
    {
    }
    /**
     * Tokenize a string
     *
     * @param string $string string to encript
     */
    public static function getAdminToken($string)
    {
    }
    public static function getAdminTokenLite($tab, \Context $context = \null)
    {
    }
    public static function getAdminTokenLiteSmarty($params, &$smarty)
    {
    }
    /**
     * Get a valid URL to use from BackOffice
     *
     * @param string $url An URL to use in BackOffice
     * @param bool $entites Set to true to use htmlentities function on URL param
     */
    public static function getAdminUrl($url = \null, $entities = \false)
    {
    }
    /**
     * Get a valid image URL to use from BackOffice
     *
     * @param string $image Image name
     * @param bool $entites Set to true to use htmlentities function on image param
     */
    public static function getAdminImageUrl($image = \null, $entities = \false)
    {
    }
    /**
     * Return the friendly url from the provided string
     *
     * @param string $str
     * @param bool $utf8_decode (deprecated)
     * @return string
     */
    public static function link_rewrite($str, $utf8_decode = \null)
    {
    }
    /**
     * Return a friendly url made from the provided string
     * If the mbstring library is available, the output is the same as the js function of the same name
     *
     * @param string $str
     * @return string
     */
    public static function str2url($str)
    {
    }
    /**
     * Replace all accented chars by their equivalent non accented chars.
     *
     * @param string $str
     * @return string
     */
    public static function replaceAccentedChars($str)
    {
    }
    /**
     * Truncate strings
     *
     * @param string $str
     * @param int $max_length Max length
     * @param string $suffix Suffix optional
     * @return string $str truncated
     */
    /* CAUTION : Use it only on module hookEvents.
     ** For other purposes use the smarty function instead */
    public static function truncate($str, $max_length, $suffix = '...')
    {
    }
    /*Copied from CakePHP String utility file*/
    public static function truncateString($text, $length = 120, $options = array())
    {
    }
    public static function normalizeDirectory($directory)
    {
    }
    /**
     * Generate date form
     *
     * @param int $year Year to select
     * @param int $month Month to select
     * @param int $day Day to select
     * @return array $tab html data with 3 cells :['days'], ['months'], ['years']
     *
     */
    public static function dateYears()
    {
    }
    public static function dateDays()
    {
    }
    public static function dateMonths()
    {
    }
    public static function hourGenerate($hours, $minutes, $seconds)
    {
    }
    public static function dateFrom($date)
    {
    }
    public static function dateTo($date)
    {
    }
    public static function strtolower($str)
    {
    }
    public static function strlen($str, $encoding = 'UTF-8')
    {
    }
    public static function stripslashes($string)
    {
    }
    public static function strtoupper($str)
    {
    }
    public static function substr($str, $start, $length = \false, $encoding = 'utf-8')
    {
    }
    public static function strpos($str, $find, $offset = 0, $encoding = 'UTF-8')
    {
    }
    public static function strrpos($str, $find, $offset = 0, $encoding = 'utf-8')
    {
    }
    public static function ucfirst($str)
    {
    }
    public static function ucwords($str)
    {
    }
    public static function orderbyPrice(&$array, $order_way)
    {
    }
    public static function iconv($from, $to, $string)
    {
    }
    public static function isEmpty($field)
    {
    }
    /**
     * returns the rounded value of $value to specified precision, according to your configuration;
     *
     * @note : PHP 5.3.0 introduce a 3rd parameter mode in round function
     *
     * @param float $value
     * @param int $precision
     * @return float
     */
    public static function ps_round($value, $precision = 0, $round_mode = \null)
    {
    }
    public static function math_round($value, $places, $mode = \PS_ROUND_HALF_UP)
    {
    }
    public static function round_helper($value, $mode)
    {
    }
    /**
     * returns the rounded value up of $value to specified precision
     *
     * @param float $value
     * @param int $precision
     * @return float
     */
    public static function ceilf($value, $precision = 0)
    {
    }
    /**
     * returns the rounded value down of $value to specified precision
     *
     * @param float $value
     * @param int $precision
     * @return float
     */
    public static function floorf($value, $precision = 0)
    {
    }
    /**
     * file_exists() wrapper with cache to speedup performance
     *
     * @param string $filename File name
     * @return bool Cached result of file_exists($filename)
     */
    public static function file_exists_cache($filename)
    {
    }
    /**
     * file_exists() wrapper with a call to clearstatcache prior
     *
     * @param string $filename File name
     * @return bool Cached result of file_exists($filename)
     */
    public static function file_exists_no_cache($filename)
    {
    }
    /**
     * refresh a local cacert file
     *
     * @return void
     */
    public static function refreshCACertFile()
    {
    }
    /**
     * This method allows to get the content from either a URL or a local file
     * @param string $url the url to get the content from
     * @param bool $use_include_path second parameter of http://php.net/manual/en/function.file-get-contents.php
     * @param resource $stream_context third parameter of http://php.net/manual/en/function.file-get-contents.php
     * @param int $curl_timeout
     * @param bool $fallback whether or not to use the fallback if the main solution fails
     * @return bool|string false or the string content
     */
    public static function file_get_contents($url, $use_include_path = \false, $stream_context = \null, $curl_timeout = 60, $fallback = \false)
    {
    }
    /**
     * Create a local file from url
     * required because ZipArchive is unable to extract from remote files.
     * @param string $url the remote location
     * @return bool|string false if failure, else the local filename
     */
    public static function createFileFromUrl($url)
    {
    }
    public static function simplexml_load_file($url, $class_name = \null)
    {
    }
    public static function copy($source, $destination, $stream_context = \null)
    {
    }
    /**
     * Translates a string with underscores into camel case (e.g. first_name -> firstName)
     * @prototype string public static function toCamelCase(string $str[, bool $capitalise_first_char = false])
     */
    public static function toCamelCase($str, $catapitalise_first_char = \false)
    {
    }
    /**
     * Transform a CamelCase string to underscore_case string
     *
     * @param string $string
     * @return string
     */
    public static function toUnderscoreCase($string)
    {
    }
    /**
     * Converts SomethingLikeThis to something-like-this
     * The name comes from Perl, we like Perl.
     */
    public static function camelCaseToKebabCase($string)
    {
    }
    public static function getBrightness($hex)
    {
    }
    public static function parserSQL($sql)
    {
    }
    public static function replaceByAbsoluteURL($matches)
    {
    }
    protected static $_cache_nb_media_servers = \null;
    public static function getMediaServer($filename)
    {
    }
    public static function generateHtaccess($path = \null, $rewrite_settings = \null, $cache_control = \null, $specific = '', $disable_multiviews = \null, $medias = \false, $disable_modsec = \null)
    {
    }
    public static function generateRobotsFile($executeHook = \false)
    {
    }
    public static function getRobotsContent()
    {
    }
    public static function generateIndex()
    {
    }
    public static function getDefaultIndexContent()
    {
    }
    /**
     * @deprecated Deprecated since 1.7.0
     * Use json_decode instead
     * jsonDecode convert json string to php array / object
     *
     * @param string $data
     * @param bool $assoc  (since 1.4.2.4) if true, convert to associativ array
     * @return array
     */
    public static function jsonDecode($data, $assoc = \false, $depth = 512, $options = 0)
    {
    }
    /**
     * @deprecated Deprecated since 1.7.0
     * Use json_encode instead
     * Convert an array to json string
     *
     * @param array $data
     * @return string json
     */
    public static function jsonEncode($data, $options = 0, $depth = 512)
    {
    }
    /**
     * Display a warning message indicating that the method is deprecated
     */
    public static function displayAsDeprecated($message = \null)
    {
    }
    /**
     * Display a warning message indicating that the parameter is deprecated
     */
    public static function displayParameterAsDeprecated($parameter)
    {
    }
    public static function displayFileAsDeprecated()
    {
    }
    protected static function throwDeprecated($error, $message, $class)
    {
    }
    public static function enableCache($level = 1, \Context $context = \null)
    {
    }
    public static function restoreCacheSettings(\Context $context = \null)
    {
    }
    public static function isCallable($function)
    {
    }
    public static function pRegexp($s, $delim)
    {
    }
    public static function str_replace_once($needle, $replace, $haystack)
    {
    }
    /**
     * @desc identify the version of php
     * @return string
     */
    public static function checkPhpVersion()
    {
    }
    /**
     * @desc try to open a zip file in order to check if it's valid
     * @return bool success
     */
    public static function ZipTest($from_file)
    {
    }
    /**
     * @deprecated Deprecated since 1.7.0
     * @return boolean
     */
    public static function getSafeModeStatus()
    {
    }
    /**
     * @desc extract a zip file to the given directory
     * @return bool success
     */
    public static function ZipExtract($from_file, $to_dir)
    {
    }
    public static function chmodr($path, $filemode)
    {
    }
    /**
     * Get products order field name for queries.
     *
     * @param string $type by|way
     * @param string $value If no index given, use default order from admin -> pref -> products
     * @param bool|\bool(false)|string $prefix
     *
     * @return string Order by sql clause
     */
    public static function getProductsOrder($type, $value = \null, $prefix = \false)
    {
    }
    /**
     * Convert a shorthand byte value from a PHP configuration directive to an integer value
     * @param string $value value to convert
     * @return int
     */
    public static function convertBytes($value)
    {
    }
    /**
     * @deprecated as of 1.5 use Controller::getController('PageNotFoundController')->run();
     */
    public static function display404Error()
    {
    }
    /**
     * Concat $begin and $end, add ? or & between strings
     *
     * @since 1.5.0
     * @param string $begin
     * @param string $end
     * @return string
     */
    public static function url($begin, $end)
    {
    }
    /**
     * Display error and dies or silently log the error.
     *
     * @param string $msg
     * @param bool $die
     * @return bool success of logging
     */
    public static function dieOrLog($msg, $die = \true)
    {
    }
    /**
     * Convert \n and \r\n and \r to <br />
     *
     * @param string $string String to transform
     * @return string New string
     */
    public static function nl2br($str)
    {
    }
    /**
     * Clear cache for Smarty
     *
     * @param Smarty $smarty
     */
    public static function clearCache($smarty = \null, $tpl = \false, $cache_id = \null, $compile_id = \null)
    {
    }
    /**
     * Clear compile for Smarty
     */
    public static function clearCompile($smarty = \null)
    {
    }
    /**
     * Clear Smarty cache and compile folders
     */
    public static function clearSmartyCache()
    {
    }
    /**
     * Clear Symfony cache
     */
    public static function clearSf2Cache($env = \null)
    {
    }
    /**
     * Clear both Smarty and Symfony cache
     */
    public static function clearAllCache()
    {
    }
    public static function clearColorListCache($id_product = \false)
    {
    }
    /**
     * getMemoryLimit allow to get the memory limit in octet
     *
     * @since 1.4.5.0
     * @return int the memory limit value in octet
     */
    public static function getMemoryLimit()
    {
    }
    /**
     * getOctet allow to gets the value of a configuration option in octet
     *
     * @since 1.5.0
     * @return int the value of a configuration option in octet
     */
    public static function getOctets($option)
    {
    }
    /**
     *
     * @return bool true if the server use 64bit arch
     */
    public static function isX86_64arch()
    {
    }
    /**
     *
     * @return bool true if php-cli is used
     */
    public static function isPHPCLI()
    {
    }
    public static function argvToGET($argc, $argv)
    {
    }
    /**
     * Get max file upload size considering server settings and optional max value
     *
     * @param int $max_size optional max file size
     * @return int max file size in bytes
     */
    public static function getMaxUploadSize($max_size = 0)
    {
    }
    /**
     * apacheModExists return true if the apache module $name is loaded
     * @TODO move this method in class Information (when it will exist)
     *
     * Notes: This method requires either apache_get_modules or phpinfo()
     * to be available. With CGI mod, we cannot get php modules
     *
     * @param string $name module name
     * @return bool true if exists
     * @since 1.4.5.0
     */
    public static function apacheModExists($name)
    {
    }
    /**
     * Fix native uasort see: http://php.net/manual/en/function.uasort.php#114535
     *
     * @param $array
     * @param $cmp_function
     */
    public static function uasort(&$array, $cmp_function)
    {
    }
    /**
     * Copy the folder $src into $dst, $dst is created if it do not exist
     * @param      $src
     * @param      $dst
     * @param bool $del if true, delete the file after copy
     */
    public static function recurseCopy($src, $dst, $del = \false)
    {
    }
    /**
     * @params string $path Path to scan
     * @params string $ext Extention to filter files
     * @params string $dir Add this to prefix output for example /path/dir/*
     *
     * @return array List of file found
     * @since 1.5.0
     */
    public static function scandir($path, $ext = 'php', $dir = '', $recursive = \false)
    {
    }
    /**
     * Align version sent and use internal function
     *
     * @param $v1
     * @param $v2
     * @param string $operator
     * @return mixed
     */
    public static function version_compare($v1, $v2, $operator = '<')
    {
    }
    /**
     * Align 2 version with the same number of sub version
     * version_compare will work better for its comparison :)
     * (Means: '1.8' to '1.9.3' will change '1.8' to '1.8.0')
     *
     * @param $v1
     * @param $v2
     */
    public static function alignVersionNumber(&$v1, &$v2)
    {
    }
    public static function modRewriteActive()
    {
    }
    public static function unSerialize($serialized, $object = \false)
    {
    }
    /**
     * Reproduce array_unique working before php version 5.2.9
     * @param array $array
     * @return array
     */
    public static function arrayUnique($array)
    {
    }
    /**
     * Delete unicode class from regular expression patterns
     * @param string $pattern
     * @return string pattern
     */
    public static function cleanNonUnicodeSupport($pattern)
    {
    }
    protected static $is_addons_up = \true;
    public static function addonsRequest($request, $params = array())
    {
    }
    /**
     * Returns an array containing information about
     * HTTP file upload variable ($_FILES)
     *
     * @param string $input          File upload field name
     * @param bool   $return_content If true, returns uploaded file contents
     *
     * @return array|null
     */
    public static function fileAttachment($input = 'fileUpload', $return_content = \true)
    {
    }
    public static function changeFileMTime($file_name)
    {
    }
    public static function waitUntilFileIsModified($file_name, $timeout = 180)
    {
    }
    /**
     * Delete a substring from another one starting from the right
     * @param string $str
     * @param string $str_search
     * @return string
     */
    public static function rtrimString($str, $str_search)
    {
    }
    /**
     * Format a number into a human readable format
     * e.g. 24962496 => 23.81M
     * @param     $size
     * @param int $precision
     *
     * @return string
     */
    public static function formatBytes($size, $precision = 2)
    {
    }
    public static function boolVal($value)
    {
    }
    public static function getUserPlatform()
    {
    }
    public static function getUserBrowser()
    {
    }
    /**
     * Allows to display the category description without HTML tags and slashes
     * @return string
     */
    public static function getDescriptionClean($description)
    {
    }
    public static function purifyHTML($html, $uri_unescape = \null, $allow_style = \false)
    {
    }
    /**
     * Check if a constant was already defined
     * @param string $constant Constant name
     * @param mixed $value Default value to set if not defined
     */
    public static function safeDefine($constant, $value)
    {
    }
    /**
     * Spread an amount on lines, adjusting the $column field,
     * with the biggest adjustments going to the rows having the
     * highest $sort_column.
     *
     * E.g.:
     *
     * $rows = [['a' => 5.1], ['a' => 8.2]];
     *
     * spreadAmount(0.3, 1, $rows, 'a');
     *
     * => $rows is [['a' => 8.4], ['a' => 5.2]]
     *
     * @param $amount float  The amount to spread across the rows
     * @param $precision int Rounding precision
     *                       e.g. if $amount is 1, $precision is 0 and $rows = [['a' => 2], ['a' => 1]]
     *                       then the resulting $rows will be [['a' => 3], ['a' => 1]]
     *                       But if $precision were 1, then the resulting $rows would be [['a' => 2.5], ['a' => 1.5]]
     * @param &$rows array   An array, associative or not, containing arrays that have at least $column and $sort_column fields
     * @param $column string The column on which to perform adjustments
     */
    public static function spreadAmount($amount, $precision, &$rows, $column)
    {
    }
    /**
     * Replaces elements from passed arrays into the first array recursively
     * @param array $base The array in which elements are replaced.
     * @param array $replacements The array from which elements will be extracted.
     */
    public static function arrayReplaceRecursive($base, $replacements)
    {
    }
    /**
     * Return path to a Product or a CMS category
     *
     * @param string $url_base Start URL
     * @param int $id_category Start category
     * @param string $path Current path
     * @param string $highlight String to highlight (in XHTML/CSS)
     * @param string $type Category type (products/cms)
     */
    public static function getPath($url_base, $id_category, $path = '', $highlight = '', $category_type = 'catalog', $home = \false)
    {
    }
    public static function redirectToInstall()
    {
    }
}
class Search
{
    public static function sanitize($string, $id_lang, $indexation = \false, $iso_code = \false)
    {
    }
    public static function find($id_lang, $expr, $page_number = 1, $page_size = 1, $order_by = 'position', $order_way = 'desc', $ajax = \false, $use_cookie = \true, \Context $context = \null)
    {
    }
    /**
     * @param Db $db
     * @param int $id_product
     * @param int $id_lang
     * @return string
     */
    public static function getTags($db, $id_product, $id_lang)
    {
    }
    /**
     * @param Db $db
     * @param int $id_product
     * @param int $id_lang
     * @return string
     */
    public static function getAttributes($db, $id_product, $id_lang)
    {
    }
    /**
     * @param Db $db
     * @param int $id_product
     * @param int $id_lang
     * @return string
     */
    public static function getFeatures($db, $id_product, $id_lang)
    {
    }
    /**
     * @param $weight_array
     * @return string
     */
    protected static function getSQLProductAttributeFields(&$weight_array)
    {
    }
    protected static function getProductsToIndex($total_languages, $id_product = \false, $limit = 50, $weight_array = array())
    {
    }
    /**
     * @param Db     $db
     * @param int    $id_product
     * @param string $sql_attribute
     *
     * @return array|null
     */
    protected static function getAttributesFields($db, $id_product, $sql_attribute)
    {
    }
    /**
     * @param $product_array
     * @param $weight_array
     * @param $key
     * @param $value
     * @param $id_lang
     * @param $iso_code
     */
    protected static function fillProductArray(&$product_array, $weight_array, $key, $value, $id_lang, $iso_code)
    {
    }
    public static function indexation($full = \false, $id_product = \false)
    {
    }
    public static function removeProductsSearchIndex($products)
    {
    }
    protected static function setProductsAsIndexed(&$products)
    {
    }
    /** $queryArray3 is automatically emptied in order to be reused immediatly */
    protected static function saveIndex(&$queryArray3)
    {
    }
    public static function searchTag($id_lang, $tag, $count = \false, $pageNumber = 0, $pageSize = 10, $orderBy = \false, $orderWay = \false, $useCookie = \true, \Context $context = \null)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Contact
 */
class Contact extends \ObjectModel
{
    public $id;
    /** @var string Name */
    public $name;
    /** @var string e-mail */
    public $email;
    /** @var string Detailed description */
    public $description;
    public $customer_service;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'contact', 'primary' => 'id_contact', 'multilang' => \true, 'fields' => array(
        'email' => array('type' => self::TYPE_STRING, 'validate' => 'isEmail', 'size' => 128),
        'customer_service' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        /* Lang fields */
        'name' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'required' => \true, 'size' => 32),
        'description' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isCleanHtml'),
    ));
    /**
     * Return available contacts
     *
     * @param int $idLang Language ID
     *
     * @return array Contacts
     */
    public static function getContacts($idLang)
    {
    }
    /**
     * Return available categories contacts
     * @return array Contacts
     */
    public static function getCategoriesContacts()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class DateRange
 */
class DateRange extends \ObjectModel
{
    /** @var string $time_start */
    public $time_start;
    /** @var string $time_end */
    public $time_end;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'date_range', 'primary' => 'id_date_range', 'fields' => array('time_start' => array('type' => self::TYPE_DATE, 'validate' => 'isDate', 'required' => \true), 'time_end' => array('type' => self::TYPE_DATE, 'validate' => 'isDate', 'required' => \true)));
    /**
     * Get current range
     *
     * @return mixed
     */
    public static function getCurrentRange()
    {
    }
}
interface CheckoutStepInterface extends \PrestaShop\PrestaShop\Core\Foundation\Templating\RenderableInterface
{
    public function getTitle();
    public function handleRequest(array $requestParameters = array());
    public function setCheckoutProcess(\CheckoutProcess $checkoutProcess);
    public function isReachable();
    public function isComplete();
    public function isCurrent();
    public function getIdentifier();
    public function getDataToPersist();
    public function restorePersistedData(array $data);
    public function getTemplate();
}
abstract class AbstractCheckoutStep implements \CheckoutStepInterface
{
    protected $step_is_reachable = \false;
    protected $step_is_complete = \false;
    protected $step_is_current = \false;
    protected $context;
    protected $template;
    protected $unreachableStepTemplate = 'checkout/_partials/steps/unreachable.tpl';
    public function __construct(\Context $context, \Symfony\Contracts\Translation\TranslatorInterface $translator)
    {
    }
    public function setTemplate($templatePath)
    {
    }
    public function getTemplate()
    {
    }
    protected function getTranslator()
    {
    }
    protected function renderTemplate($template, array $extraParams = array(), array $params = array())
    {
    }
    public function setTitle($title)
    {
    }
    public function getTitle()
    {
    }
    public function setCheckoutProcess(\CheckoutProcess $checkoutProcess)
    {
    }
    public function getCheckoutProcess()
    {
    }
    public function getCheckoutSession()
    {
    }
    public function setReachable($step_is_reachable)
    {
    }
    public function isReachable()
    {
    }
    public function setComplete($step_is_complete)
    {
    }
    public function isComplete()
    {
    }
    public function setCurrent($step_is_current)
    {
    }
    public function isCurrent()
    {
    }
    public function getIdentifier()
    {
    }
    public function getDataToPersist()
    {
    }
    public function restorePersistedData(array $data)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class CartChecksum implements \ChecksumInterface
{
    public $addressChecksum = \null;
    public function __construct(\AddressChecksum $addressChecksum)
    {
    }
    public function generateChecksum($cart)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class CheckoutSession
{
    public function __construct(\Context $context, \DeliveryOptionsFinder $deliveryOptionsFinder)
    {
    }
    public function customerHasLoggedIn()
    {
    }
    public function getCustomer()
    {
    }
    public function getCart()
    {
    }
    public function getCustomerAddressesCount()
    {
    }
    public function setIdAddressDelivery($id_address)
    {
    }
    public function setIdAddressInvoice($id_address)
    {
    }
    public function getIdAddressDelivery()
    {
    }
    public function getIdAddressInvoice()
    {
    }
    public function setMessage($message)
    {
    }
    public function getMessage()
    {
    }
    public function setDeliveryOption($option)
    {
    }
    public function getSelectedDeliveryOption()
    {
    }
    public function getDeliveryOptions()
    {
    }
    public function setRecyclable($option)
    {
    }
    public function isRecyclable()
    {
    }
    public function setGift($gift, $gift_message)
    {
    }
    public function getGift()
    {
    }
    public function isGuestAllowed()
    {
    }
    public function getCheckoutURL()
    {
    }
}
class DeliveryOptionsFinder
{
    public function __construct(\Context $context, \Symfony\Contracts\Translation\TranslatorInterface $translator, \PrestaShop\PrestaShop\Adapter\ObjectPresenter $objectPresenter, \PrestaShop\PrestaShop\Adapter\Product\PriceFormatter $priceFormatter)
    {
    }
    public function getSelectedDeliveryOption()
    {
    }
    public function getDeliveryOptions()
    {
    }
}
class ConditionsToApproveFinder
{
    public function __construct(\Context $context, \Symfony\Contracts\Translation\TranslatorInterface $translator)
    {
    }
    public function getConditionsToApproveForTemplate()
    {
    }
}
class CheckoutPaymentStep extends \AbstractCheckoutStep
{
    protected $template = 'checkout/_partials/steps/payment.tpl';
    public function __construct(\Context $context, \Symfony\Contracts\Translation\TranslatorInterface $translator, \PaymentOptionsFinder $paymentOptionsFinder, \ConditionsToApproveFinder $conditionsToApproveFinder)
    {
    }
    public function handleRequest(array $requestParams = array())
    {
    }
    public function render(array $extraParams = array())
    {
    }
}
class CheckoutDeliveryStep extends \AbstractCheckoutStep
{
    protected $template = 'checkout/_partials/steps/shipping.tpl';
    public function setRecyclablePackAllowed($recyclablePackAllowed)
    {
    }
    public function isRecyclablePackAllowed()
    {
    }
    public function setGiftAllowed($giftAllowed)
    {
    }
    public function isGiftAllowed()
    {
    }
    public function setGiftCost($giftCost)
    {
    }
    public function getGiftCost()
    {
    }
    public function setIncludeTaxes($includeTaxes)
    {
    }
    public function getIncludeTaxes()
    {
    }
    public function setDisplayTaxesLabel($displayTaxesLabel)
    {
    }
    public function getDisplayTaxesLabel()
    {
    }
    public function getGiftCostForLabel()
    {
    }
    public function handleRequest(array $requestParams = array())
    {
    }
    public function render(array $extraParams = array())
    {
    }
    protected function isModuleComplete($requestParams)
    {
    }
}
class PaymentOptionsFinder extends \PrestaShopBundle\Service\Hook\HookFinder
{
    public function find()
    {
    }
    public function findFree()
    {
    }
    public function present($free = \false)
    {
    }
}
class CheckoutProcess implements \PrestaShop\PrestaShop\Foundation\Templating\RenderableInterface {
    public function __construct(\Context $context, \CheckoutSession $checkoutSession)
    {
    }
    public function getTemplate()
    {
    }
    public function handleRequest(array $requestParameters = array())
    {
    }
    public function getCheckoutSession()
    {
    }
    public function addStep(\CheckoutStepInterface $step)
    {
    }
    public function getSteps()
    {
    }
    public function setTemplate($templatePath)
    {
    }
    public function render(array $extraParams = array())
    {
    }
    public function setHasErrors($has_errors = \true)
    {
    }
    public function hasErrors()
    {
    }
    public function getDataToPersist()
    {
    }
    public function restorePersistedData(array $data)
    {
    }
    public function setNextStepReachable()
    {
    }
    public function markCurrentStep()
    {
    }
    public function invalidateAllStepsAfterCurrent()
    {
    }
}
class CheckoutAddressesStep extends \AbstractCheckoutStep
{
    protected $template = 'checkout/_partials/steps/addresses.tpl';
    public function __construct(\Context $context, \Symfony\Contracts\Translation\TranslatorInterface $translator, \CustomerAddressForm $addressForm)
    {
    }
    public function getDataToPersist()
    {
    }
    public function restorePersistedData(array $data)
    {
    }
    public function handleRequest(array $requestParams = array())
    {
    }
    public function getTemplateParameters()
    {
    }
    public function render(array $extraParams = array())
    {
    }
}
class CheckoutPersonalInformationStep extends \AbstractCheckoutStep
{
    protected $template = 'checkout/_partials/steps/personal-information.tpl';
    public function __construct(\Context $context, \Symfony\Contracts\Translation\TranslatorInterface $translator, \CustomerLoginForm $loginForm, \CustomerForm $registerForm)
    {
    }
    public function handleRequest(array $requestParameters = array())
    {
    }
    public function render(array $extraParams = array())
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class AttributeGroup
 */
class AttributeGroup extends \ObjectModel
{
    /** @var string Name */
    public $name;
    /** @var bool $is_color_group Whether the attribute group is a color group */
    public $is_color_group;
    /** @var int $position Position */
    public $position;
    /** @var string $group_type Group type */
    public $group_type;
    /** @var string Public Name */
    public $public_name;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'attribute_group', 'primary' => 'id_attribute_group', 'multilang' => \true, 'fields' => array(
        'is_color_group' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'group_type' => array('type' => self::TYPE_STRING, 'required' => \true),
        'position' => array('type' => self::TYPE_INT, 'validate' => 'isInt'),
        /* Lang fields */
        'name' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'required' => \true, 'size' => 128),
        'public_name' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'required' => \true, 'size' => 64),
    ));
    /** @var array $webserviceParameters Web service parameters */
    protected $webserviceParameters = array('objectsNodeName' => 'product_options', 'objectNodeName' => 'product_option', 'fields' => array(), 'associations' => array('product_option_values' => array('resource' => 'product_option_value', 'fields' => array('id' => array()))));
    /**
     * Adds current AttributeGroup as a new Object to the database
     *
     * @param bool $autoDate   Automatically set `date_upd` and `date_add` column
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Whether the AttributeGroup has been successfully added
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function add($autoDate = \true, $nullValues = \false)
    {
    }
    /**
     * Updates the current object in the database
     *
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Whether the AttributeGroup has been succesfully updated
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function update($nullValues = \false)
    {
    }
    /**
     * Clean dead combinations
     * A combination is considered dead when its Attribute ID cannot be found
     *
     * @return bool Whether the dead combinations have been successfully deleted
     */
    public static function cleanDeadCombinations()
    {
    }
    /**
     * Deletes current AttributeGroup from database
     *
     * @return bool True if delete was successful
     * @throws PrestaShopException
     */
    public function delete()
    {
    }
    /**
     * Get all attributes for a given language / group
     *
     * @param int  $idLang           Language ID
     * @param bool $idAttributeGroup AttributeGroup ID
     *
     * @return array Attributes
     */
    public static function getAttributes($idLang, $idAttributeGroup)
    {
    }
    /**
     * Get all attributes groups for a given language
     *
     * @param int $idLang Language id
     *
     * @return array Attributes groups
     */
    public static function getAttributesGroups($idLang)
    {
    }
    /**
     * Delete several objects from database
     *
     * @param array $selection Array with AttributeGroup IDs
     *
     * @return bool Deletion result
     */
    public function deleteSelection($selection)
    {
    }
    /**
     * Set the values of the current AttributeGroup for the webservice
     *
     * @param array $values
     *
     * @return bool Whether the update was successful
     */
    public function setWsProductOptionValues($values)
    {
    }
    /**
     * Get values of current AttributeGroup instance for the webservice
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public function getWsProductOptionValues()
    {
    }
    /**
     * Move a group attribute
     *
     * @param bool $direction Up (1) or Down (0)
     * @param int  $position
     *
     * @return bool Update result
     */
    public function updatePosition($direction, $position)
    {
    }
    /**
     * Reorder group attribute position
     * Call it after deleting a group attribute.
     *
     * @return bool $return
     */
    public static function cleanPositions()
    {
    }
    /**
     * Get the highest AttributeGroup position
     *
     * @return int $position Position
     */
    public static function getHigherPosition()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class CustomerMessage
 */
class CustomerMessage extends \ObjectModel
{
    public $id;
    /** @var int CustomerThread ID */
    public $id_customer_thread;
    /** @var   */
    public $id_employee;
    /** @var string $message */
    public $message;
    /** @var string $file_name */
    public $file_name;
    /** @var string $ip_address */
    public $ip_address;
    /** @var string $user_agent */
    public $user_agent;
    /** @var int $private */
    public $private;
    /** @var string $date_add */
    public $date_add;
    /** @var string $date_upd */
    public $date_upd;
    /** @var bool $read */
    public $read;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'customer_message', 'primary' => 'id_customer_message', 'fields' => array('id_employee' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_customer_thread' => array('type' => self::TYPE_INT), 'ip_address' => array('type' => self::TYPE_STRING, 'validate' => 'isIp2Long', 'size' => 15), 'message' => array('type' => self::TYPE_STRING, 'validate' => 'isCleanHtml', 'required' => \true, 'size' => 16777216), 'file_name' => array('type' => self::TYPE_STRING), 'user_agent' => array('type' => self::TYPE_STRING), 'private' => array('type' => self::TYPE_INT), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'), 'date_upd' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'), 'read' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool')));
    /** @var array $webserviceParameters */
    protected $webserviceParameters = array('fields' => array('id_employee' => array('xlink_resource' => 'employees'), 'id_customer_thread' => array('xlink_resource' => 'customer_threads')));
    /**
     * Get CustomerMessages by Order ID
     *
     * @param int  $idOrder Order ID
     * @param bool $private Private
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public static function getMessagesByOrderId($idOrder, $private = \true)
    {
    }
    /**
     * Get total CustomerMessages
     *
     * @param string|null $where Additional SQL query
     *
     * @return int Amount of CustomerMessages found
     */
    public static function getTotalCustomerMessages($where = \null)
    {
    }
    /**
     * Deletes current CustomerMessage from the database
     *
     * @return bool `true` if delete was successful
     * @throws PrestaShopException
     */
    public function delete()
    {
    }
    /**
     * Get the last message for a thread customer
     *
     * @param $id_customer_thread   Thread customer reference
     * @return string               Last message
     */
    public static function getLastMessageForCustomerThread($id_customer_thread)
    {
    }
}
class AdminController extends \Controller
{
    /** @var string */
    public $path;
    /** @var string */
    public static $currentIndex;
    /** @var string */
    public $content;
    /** @var array */
    public $warnings = array();
    /** @var array */
    public $informations = array();
    /** @var array */
    public $confirmations = array();
    /** @var string|false */
    public $shopShareDatas = \false;
    /** @var array */
    public $_languages = array();
    /** @var int */
    public $default_form_language;
    /** @var bool */
    public $allow_employee_form_lang;
    /** @var string */
    public $layout = 'layout.tpl';
    /** @var bool */
    public $bootstrap = \false;
    /** @var string|array */
    protected $meta_title = array();
    /** @var string */
    public $template = 'content.tpl';
    /** @var string Associated table name */
    public $table = 'configuration';
    /** @var string */
    public $list_id;
    /** @var string|false Object identifier inside the associated table */
    protected $identifier = \false;
    /** @var string */
    protected $identifier_name = 'name';
    /** @var string Associated object class name */
    public $className;
    /** @var array */
    public $tabAccess;
    /** @var int Tab id */
    public $id = -1;
    /** @var bool */
    public $required_database = \false;
    /** @var string Security token */
    public $token;
    /** @var string "shop" or "group_shop" */
    public $shopLinkType;
    /** @var string Default ORDER BY clause when $_orderBy is not defined */
    protected $_defaultOrderBy = \false;
    /** @var string */
    protected $_defaultOrderWay = 'ASC';
    /** @var array */
    public $tpl_form_vars = array();
    /** @var array */
    public $tpl_list_vars = array();
    /** @var array */
    public $tpl_delete_link_vars = array();
    /** @var array */
    public $tpl_option_vars = array();
    /** @var array */
    public $tpl_view_vars = array();
    /** @var array */
    public $tpl_required_fields_vars = array();
    /** @var string|null */
    public $base_tpl_view = \null;
    /** @var string|null */
    public $base_tpl_form = \null;
    /** @var bool If you want more fieldsets in the form */
    public $multiple_fieldsets = \false;
    /** @var array|false */
    public $fields_value = \false;
    /** @var array Errors displayed after post processing */
    public $errors = array();
    /** @var bool Define if the header of the list contains filter and sorting links or not */
    protected $list_simple_header;
    /** @var array List to be generated */
    protected $fields_list;
    /** @var array Modules list filters */
    protected $filter_modules_list = \null;
    /** @var array Modules list filters */
    protected $modules_list = array();
    /** @var array Edit form to be generated */
    protected $fields_form;
    /** @var array Override of $fields_form */
    protected $fields_form_override;
    /** @var string Override form action */
    protected $submit_action;
    /** @var array List of option forms to be generated */
    protected $fields_options = array();
    /** @var string */
    protected $shopLink;
    /** @var string SQL query */
    protected $_listsql = '';
    /** @var array Cache for query results */
    protected $_list = array();
    /** @var string MySQL error */
    protected $_list_error;
    /** @var string|array Toolbar title */
    protected $toolbar_title;
    /** @var array List of toolbar buttons */
    protected $toolbar_btn = \null;
    /** @var bool Scrolling toolbar */
    protected $toolbar_scroll = \true;
    /** @var bool Set to false to hide toolbar and page title */
    protected $show_toolbar = \true;
    /** @var bool Set to true to show toolbar and page title for options */
    protected $show_toolbar_options = \false;
    /** @var int Number of results in list */
    protected $_listTotal = 0;
    /** @var bool Automatically join language table if true */
    public $lang = \false;
    /** @var array WHERE clause determined by filter fields */
    protected $_filter;
    /** @var string */
    protected $_filterHaving;
    /** @var array Temporary SQL table WHERE clause determined by filter fields */
    protected $_tmpTableFilter = '';
    /** @var array Number of results in list per page (used in select field) */
    protected $_pagination = array(20, 50, 100, 300, 1000);
    /** @var int Default number of results in list per page */
    protected $_default_pagination = 50;
    /** @var string ORDER BY clause determined by field/arrows in list header */
    protected $_orderBy;
    /** @var string Order way (ASC, DESC) determined by arrows in list header */
    protected $_orderWay;
    /** @var array List of available actions for each list row - default actions are view, edit, delete, duplicate */
    protected $actions_available = array('view', 'edit', 'duplicate', 'delete');
    /** @var array List of required actions for each list row */
    protected $actions = array();
    /** @var array List of row ids associated with a given action for witch this action have to not be available */
    protected $list_skip_actions = array();
    /* @var bool Don't show header & footer */
    protected $lite_display = \false;
    /** @var bool List content lines are clickable if true */
    protected $list_no_link = \false;
    /** @var bool */
    protected $allow_export = \false;
    /** @var array Cache for translations */
    public static $cache_lang = array();
    /** @var array Required_fields to display in the Required Fields form */
    public $required_fields = array();
    /** @var HelperList */
    protected $helper;
    /** @var array Cache for translations */
    const LEVEL_DELETE = 4;
    /** @var array Cache for translations */
    const LEVEL_EDIT = 2;
    /** @var array Cache for translations */
    const LEVEL_ADD = 3;
    /** @var array Cache for translations */
    const LEVEL_VIEW = 1;
    /**
     * Actions to execute on multiple selections.
     *
     * Usage:
     *
     * array(
     *      'actionName' => array(
     *      'text' => $this->l('Message displayed on the submit button (mandatory)'),
     *      'confirm' => $this->l('If set, this confirmation message will pop-up (optional)')),
     *      'anotherAction' => array(...)
     * );
     *
     * If your action is named 'actionName', you need to have a method named bulkactionName() that will be executed when the button is clicked.
     *
     * @var array
     */
    protected $bulk_actions;
    /* @var array Ids of the rows selected */
    protected $boxes;
    /** @var string Do not automatically select * anymore but select only what is necessary */
    protected $explicitSelect = \false;
    /** @var string Add fields into data query to display list */
    protected $_select;
    /** @var string Join tables into data query to display list */
    protected $_join;
    /** @var string Add conditions into data query to display list */
    protected $_where;
    /** @var string Group rows into data query to display list */
    protected $_group;
    /** @var string Having rows into data query to display list */
    protected $_having;
    /** @var string Use SQL_CALC_FOUND_ROWS / FOUND_ROWS to count the number of records */
    protected $_use_found_rows = \true;
    /** @var bool */
    protected $is_cms = \false;
    /** @var string Identifier to use for changing positions in lists (can be omitted if positions cannot be changed) */
    protected $position_identifier;
    /** @var string|int */
    protected $position_group_identifier;
    /** @var bool Table records are not deleted but marked as deleted if set to true */
    protected $deleted = \false;
    /**  @var bool Is a list filter set */
    protected $filter;
    /** @var bool */
    protected $noLink;
    /** @var bool|null */
    protected $specificConfirmDelete = \null;
    /** @var bool */
    protected $colorOnBackground;
    /** @var bool If true, activates color on hover */
    protected $row_hover = \true;
    /** @var string Action to perform : 'edit', 'view', 'add', ... */
    protected $action;
    /** @var string */
    protected $display;
    /** @var array */
    protected $tab_modules_list = array('default_list' => array(), 'slider_list' => array());
    /** @var string */
    public $tpl_folder;
    /** @var string */
    protected $bo_theme;
    /** @var bool Redirect or not after a creation */
    protected $_redirect = \true;
    /** @var array Name and directory where class image are located */
    public $fieldImageSettings = array();
    /** @var string Image type */
    public $imageType = 'jpg';
    /** @var ObjectModel Instantiation of the class associated with the AdminController */
    protected $object;
    /** @var int Current object ID */
    protected $id_object;
    /** @var string Current controller name without suffix */
    public $controller_name;
    /** @var int */
    public $multishop_context = -1;
    /** @var false */
    public $multishop_context_group = \true;
    /** @var array Current breadcrumb position as an array of tab names */
    protected $breadcrumbs;
    /** @var bool Bootstrap variable */
    public $show_page_header_toolbar = \false;
    /** @var string Bootstrap variable */
    public $page_header_toolbar_title;
    /** @var array|Traversable Bootstrap variable */
    public $page_header_toolbar_btn = array();
    /** @var bool Bootstrap variable */
    public $show_form_cancel_button;
    /** @var string */
    public $admin_webpath;
    /** @var array */
    protected $list_natives_modules = array();
    /** @var array */
    protected $list_partners_modules = array();
    /** @var array */
    public $modals = array();
    /** @var bool */
    protected $logged_on_addons = \false;
    /** @var bool if logged employee has access to AdminImport */
    protected $can_import = \false;
    /** @var string */
    protected $tabSlug;
    public function __construct($forceControllerName = '', $default_theme_name = 'default')
    {
    }
    /**
     * Set breadcrumbs array for the controller page
     *
     * @param int|null $tab_id
     * @param array|null $tabs
     */
    public function initBreadcrumbs($tab_id = \null, $tabs = \null)
    {
    }
    /**
     * Set default toolbar_title to admin breadcrumb
     *
     * @return void
     */
    public function initToolbarTitle()
    {
    }
    /**
     * @return string|void
     */
    public function addFiltersToBreadcrumbs()
    {
    }
    /**
     *
     * @param string $action
     * @param bool $disable
     */
    public function access($action, $disable = \false)
    {
    }
    /**
     * Check rights to view the current tab
     *
     * @param bool $disable
     * @return bool
     */
    public function viewAccess($disable = \false)
    {
    }
    /**
     * Check for security token
     *
     * @return bool
     */
    public function checkToken()
    {
    }
    /**
     * Set the filters used for the list display
     */
    protected function getCookieFilterPrefix()
    {
    }
    public function processFilter()
    {
    }
    /**
     * @TODO uses redirectAdmin only if !$this->ajax
     * @return ObjectModel|bool
     */
    public function postProcess()
    {
    }
    /**
     * Object Delete images
     *
     * @return ObjectModel|false
     */
    public function processDeleteImage()
    {
    }
    /**
     * @param string $text_delimiter
     * @throws PrestaShopException
     */
    public function processExport($text_delimiter = '"')
    {
    }
    /**
     * Object Delete
     *
     * @return ObjectModel|false
     * @throws PrestaShopException
     */
    public function processDelete()
    {
    }
    /**
     * Call the right method for creating or updating object
     *
     * @return ObjectModel|false|void
     */
    public function processSave()
    {
    }
    /**
     * Object creation
     *
     * @return ObjectModel|false
     * @throws PrestaShopException
     */
    public function processAdd()
    {
    }
    /**
     * Object update
     *
     * @return ObjectModel|false|void
     * @throws PrestaShopException
     */
    public function processUpdate()
    {
    }
    /**
     * Change object required fields
     *
     * @return ObjectModel
     */
    public function processUpdateFields()
    {
    }
    /**
     * Change object status (active, inactive)
     *
     * @return ObjectModel|false
     * @throws PrestaShopException
     */
    public function processStatus()
    {
    }
    /**
     * Change object position
     *
     * @return ObjectModel|false
     */
    public function processPosition()
    {
    }
    /**
     * Cancel all filters for this tab
     *
     * @param int|null $list_id
     */
    public function processResetFilters($list_id = \null)
    {
    }
    /**
     * Update options and preferences
     */
    protected function processUpdateOptions()
    {
    }
    public function initPageHeaderToolbar()
    {
    }
    /**
     * assign default action in toolbar_btn smarty var, if they are not set.
     * uses override to specifically add, modify or remove items
     *
     */
    public function initToolbar()
    {
    }
    /**
     * Load class object using identifier in $_GET (if possible)
     * otherwise return an empty object, or die
     *
     * @param bool $opt Return an empty object if load fail
     * @return ObjectModel|false
     */
    protected function loadObject($opt = \false)
    {
    }
    /**
     * Check if the token is valid, else display a warning page
     *
     * @return bool
     */
    public function checkAccess()
    {
    }
    /**
     * @param string $key
     * @param string $filter
     * @return array|false
     */
    protected function filterToField($key, $filter)
    {
    }
    /**
     * @return void
     */
    public function displayAjax()
    {
    }
    protected function redirect()
    {
    }
    /**
     * @return void
     * @throws Exception
     * @throws SmartyException
     */
    public function display()
    {
    }
    /**
     * Add a warning message to display at the top of the page
     *
     * @param string $msg
     */
    protected function displayWarning($msg)
    {
    }
    /**
     * Add a info message to display at the top of the page
     *
     * @param string $msg
     */
    protected function displayInformation($msg)
    {
    }
    /**
     * Assign smarty variables for the header
     */
    public function initHeader()
    {
    }
    /**
     * Declare an action to use for each row in the list
     *
     * @param string $action
     */
    public function addRowAction($action)
    {
    }
    /**
     * Add an action to use for each row in the list
     *
     * @param string $action
     * @param array $list
     */
    public function addRowActionSkipList($action, $list)
    {
    }
    /**
     * Assign smarty variables for all default views, list and form, then call other init functions
     */
    public function initContent()
    {
    }
    public function initToolbarFlags()
    {
    }
    /**
     * Init tab modules list and add button in toolbar
     */
    protected function initTabModuleList()
    {
    }
    protected function addPageHeaderToolBarModulesListButton()
    {
    }
    protected function addToolBarModulesListButton()
    {
    }
    protected function getAdminModulesUrl()
    {
    }
    protected function filterTabModuleList()
    {
    }
    /**
     * Initialize the invalid doom page of death
     *
     * @return void
     */
    public function initCursedPage()
    {
    }
    /**
     * Assign smarty variables for the footer
     */
    public function initFooter()
    {
    }
    /**
     * @throws Exception
     * @throws SmartyException
     */
    public function initModal()
    {
    }
    /**
     * @return string
     * @throws Exception
     * @throws SmartyException
     */
    public function renderModal()
    {
    }
    /**
     * @param string|bool $tracking_source Source information for URL used by "Install" button
     * @return string
     */
    public function renderModulesList($tracking_source = \false)
    {
    }
    /**
     * Function used to render the list to display for this controller
     *
     * @return string|false
     * @throws PrestaShopException
     */
    public function renderList()
    {
    }
    public function getTemplateListVars()
    {
    }
    /**
     * Override to render the view page
     *
     * @return string
     */
    public function renderView()
    {
    }
    public function getTemplateViewVars()
    {
    }
    /**
     * Override to render the view page
     *
     * @return string|false
     */
    public function renderDetails()
    {
    }
    /**
     * Function used to render the form for this controller
     *
     * @return string
     * @throws Exception
     * @throws SmartyException
     */
    public function renderForm()
    {
    }
    public function getTemplateFormVars()
    {
    }
    public function renderKpis()
    {
    }
    /**
     * Function used to render the options for this controller
     *
     * @return string
     */
    public function renderOptions()
    {
    }
    /**
     * This function sets various display options for helper list
     *
     * @param Helper $helper
     * @return void
     */
    public function setHelperDisplay(\Helper $helper)
    {
    }
    /**
     * @deprecated 1.6.0
     */
    public function setDeprecatedMedia()
    {
    }
    public function setMedia($isNewTheme = \false)
    {
    }
    /**
     * Non-static method which uses AdminController::translate()
     *
     * @deprecated use Context::getContext()->getTranslator()->trans($id, $parameters, $domain, $locale); instead
     * @param string  $string Term or expression in english
     * @param string|null $class Name of the class
     * @param bool $addslashes If set to true, the return value will pass through addslashes(). Otherwise, stripslashes().
     * @param bool $htmlentities If set to true(default), the return value will pass through htmlentities($string, ENT_QUOTES, 'utf-8')
     * @return string The translation if available, or the english default text.
     */
    protected function l($string, $class = \null, $addslashes = \false, $htmlentities = \true)
    {
    }
    /**
     * Init context and dependencies, handles POST and GET
     */
    public function init()
    {
    }
    /**
     * Sets the smarty variables and js defs used to show / hide some notifications
     */
    public function initNotifications()
    {
    }
    /**
     * @throws PrestaShopException
     */
    public function initShopContext()
    {
    }
    /**
     * Retrieve GET and POST value and translate them to actions
     */
    public function initProcess()
    {
    }
    /**
     * Get the current objects' list form the database
     *
     * @param int $id_lang Language used for display
     * @param string|null $order_by ORDER BY clause
     * @param string|null $order_way Order way (ASC, DESC)
     * @param int $start Offset in LIMIT clause
     * @param int|null $limit Row count in LIMIT clause
     * @param int|bool $id_lang_shop
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function getList($id_lang, $order_by = \null, $order_way = \null, $start = 0, $limit = \null, $id_lang_shop = \false)
    {
    }
    /**
     * @return string
     */
    protected function getFromClause()
    {
    }
    /**
     * @param $id_lang
     * @param $id_lang_shop
     * @return string
     */
    protected function getJoinClause($id_lang, $id_lang_shop)
    {
    }
    /**
     * @param $idLang
     * @param $idLangShop
     * @return string
     */
    protected function getLanguageJoinClause($idLang, $idLangShop)
    {
    }
    /**
     * @return string
     */
    protected function getWhereClause()
    {
    }
    /**
     * @param $orderBy
     * @param $orderDirection
     * @return string
     */
    protected function getOrderByClause($orderBy, $orderDirection)
    {
    }
    /**
     * @param $orderBy
     * @return false|string
     */
    protected function checkOrderBy($orderBy)
    {
    }
    /**
     * @param $orderDirection
     * @return string
     */
    protected function checkOrderDirection($orderDirection)
    {
    }
    /**
     * @return mixed
     */
    protected function getCookieOrderByPrefix()
    {
    }
    /**
     * @return string
     */
    protected function getHavingClause()
    {
    }
    /**
     * @param $limit
     * @return bool
     */
    protected function shouldLimitSqlResults($limit)
    {
    }
    /**
     * @param $limit
     * @return int
     */
    protected function checkSqlLimit($limit)
    {
    }
    /**
     * @param array|string $filter_modules_list
     * @param string|bool $tracking_source
     * @return bool
     * @throws PrestaShopException
     */
    public function getModulesList($filter_modules_list, $tracking_source = \false)
    {
    }
    /**
     * @return array
     */
    public function getLanguages()
    {
    }
    /**
     * Return the list of fields value
     *
     * @param ObjectModel $obj Object
     * @return array
     */
    public function getFieldsValue($obj)
    {
    }
    /**
     * Return field value if possible (both classical and multilingual fields)
     *
     * Case 1 : Return value if present in $_POST / $_GET
     * Case 2 : Return object value
     *
     * @param ObjectModel $obj Object
     * @param string $key Field name
     * @param int|null $id_lang Language id (optional)
     * @return string
     */
    public function getFieldValue($obj, $key, $id_lang = \null)
    {
    }
    /**
     * Manage page display (form, list...)
     *
     * @param string|bool $class_name Allow to validate a different class than the current one
     * @throws PrestaShopException
     */
    public function validateRules($class_name = \false)
    {
    }
    /**
     * Overload this method for custom checking
     */
    protected function _childValidation()
    {
    }
    /**
     * Display object details
     */
    public function viewDetails()
    {
    }
    /**
     * Called before deletion
     *
     * @param ObjectModel $object Object
     * @return bool
     */
    protected function beforeDelete($object)
    {
    }
    /**
     * Called before deletion
     *
     * @param ObjectModel $object Object
     * @param int $old_id
     * @return bool
     */
    protected function afterDelete($object, $old_id)
    {
    }
    /**
     * @param ObjectModel $object
     * @return bool
     */
    protected function afterAdd($object)
    {
    }
    /**
     * @param ObjectModel $object
     * @return bool
     */
    protected function afterUpdate($object)
    {
    }
    /**
     * Check rights to view the current tab
     *
     * @return bool
     */
    protected function afterImageUpload()
    {
    }
    /**
     * Copy data values from $_POST to object
     *
     * @param ObjectModel &$object Object
     * @param string $table Object table
     */
    protected function copyFromPost(&$object, $table)
    {
    }
    /**
     * Returns an array with selected shops and type (group or boutique shop)
     *
     * @param string $table
     * @return array
     */
    protected function getSelectedAssoShop($table)
    {
    }
    /**
     * Update the associations of shops
     *
     * @param int $id_object
     * @return bool|void
     * @throws PrestaShopDatabaseException
     */
    protected function updateAssoShop($id_object)
    {
    }
    /**
     * @param mixed $value
     * @param array $field
     * @return bool
     */
    protected function validateField($value, $field)
    {
    }
    /**
     * Can be overridden
     */
    public function beforeUpdateOptions()
    {
    }
    /**
     * Overload this method for custom checking
     *
     * @param int $id Object id used for deleting images
     * @return bool
     */
    protected function postImage($id)
    {
    }
    /**
     * @param int $id
     * @param string $name
     * @param string $dir
     * @param string|bool $ext
     * @param int|null $width
     * @param int|null $height
     * @return bool
     */
    protected function uploadImage($id, $name, $dir, $ext = \false, $width = \null, $height = \null)
    {
    }
    /**
     * Delete multiple items
     *
     * @return bool true if success
     */
    protected function processBulkDelete()
    {
    }
    protected function ajaxProcessOpenHelp()
    {
    }
    /**
     * Enable multiple items
     *
     * @return bool true if success
     */
    protected function processBulkEnableSelection()
    {
    }
    /**
     * Disable multiple items
     *
     * @return bool true if success
     */
    protected function processBulkDisableSelection()
    {
    }
    /**
     * Toggle status of multiple items
     *
     * @param bool $status
     * @return bool true if success
     * @throws PrestaShopException
     */
    protected function processBulkStatusSelection($status)
    {
    }
    /**
     * @return bool
     */
    protected function processBulkAffectZone()
    {
    }
    /**
     * Called before Add
     *
     * @param ObjectModel $object Object
     * @return bool
     */
    protected function beforeAdd($object)
    {
    }
    /**
     * Prepare the view to display the required fields form
     *
     * @return string|void
     */
    public function displayRequiredFields()
    {
    }
    /**
     * Create a template from the override file, else from the base file.
     *
     * @param string $tpl_name filename
     * @return Smarty_Internal_Template
     */
    public function createTemplate($tpl_name)
    {
    }
    /**
     * Shortcut to set up a json success payload
     *
     * @param string $message Success message
     */
    public function jsonConfirmation($message)
    {
    }
    /**
     * Shortcut to set up a json error payload
     *
     * @param string $message Error message
     */
    public function jsonError($message)
    {
    }
    /**
     * @param string $file
     * @param int $timeout
     * @return bool
     */
    public function isFresh($file, $timeout = 604800)
    {
    }
    /** @var bool */
    protected static $is_prestashop_up = \true;
    /**
     * @param string $file_to_refresh
     * @param string $external_file
     * @return bool
     */
    public function refresh($file_to_refresh, $external_file)
    {
    }
    /**
     * @param Module $module
     * @param string $output_type
     * @param string|null $back
     * @param string|bool $install_source_tracking
     */
    public function fillModuleData(&$module, $output_type = 'link', $back = \null, $install_source_tracking = \false)
    {
    }
    /** @var array */
    protected $translationsTab = array();
    /**
     * Display modules list
     *
     * @param Module $module
     * @param string $output_type (link or select)
     * @param string|null $back
     * @param string|bool $install_source_tracking
     * @return string|array
     */
    public function displayModuleOptions($module, $output_type = 'link', $back = \null, $install_source_tracking = \false)
    {
    }
    public function ajaxProcessGetModuleQuickView()
    {
    }
    /**
     * Add an entry to the meta title.
     *
     * @param string $entry New entry.
     */
    public function addMetaTitle($entry)
    {
    }
    /**
     * Set action
     *
     * @param string $action
     */
    public function setAction($action)
    {
    }
    /**
     * Set IdObject
     *
     * @param int $id_object
     */
    public function setIdObject($id_object)
    {
    }
    /**
     *
     * @return string
     */
    public function getTabSlug()
    {
    }
    protected function buildContainer()
    {
    }
    /**
     * Return the type of authorization on module page.
     *
     * @return int(integer)
     */
    public function authorizationLevel()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @since 1.5.0
 */
class ModuleFrontController extends \FrontController
{
    /** @var Module */
    public $module;
    public function __construct()
    {
    }
    /**
     * Assigns module template for page content.
     *
     * @param string $template Template filename
     *
     * @throws PrestaShopException
     */
    public function setTemplate($template, $params = array(), $locale = \null)
    {
    }
    public function initContent()
    {
    }
    /**
     * Non-static translation method for frontoffice modules.
     *
     * @deprecated use Context::getContext()->getTranslator()->trans($id, $parameters, $domain, $locale); instead
     *
     * @param string       $string       Term or expression in english
     * @param false|string $specific     Specific name, only for ModuleFrontController
     * @param string|null  $class        Name of the class
     * @param bool         $addslashes   If set to true, the return value will pass through addslashes(). Otherwise, stripslashes()
     * @param bool         $htmlentities If set to true(default), the return value will pass through htmlentities($string, ENT_QUOTES, 'utf-8')
     *
     * @return string The translation if available, or the english default text
     */
    protected function l($string, $specific = \false, $class = \null, $addslashes = \false, $htmlentities = \true)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @TODO Move undeclared variables and methods to this (base) class: $errors, $layout, checkLiveEditAccess, etc.
 * @since 1.5.0
 */
abstract class Controller
{
    /** @var Context */
    protected $context;
    /** @var array List of CSS files */
    public $css_files = array();
    /** @var array List of JavaScript files */
    public $js_files = array();
    /** @var array List of PHP errors */
    public static $php_errors = array();
    /** @var bool Set to true to display page header */
    protected $display_header;
    /** @var bool Set to true to display page header javascript */
    protected $display_header_javascript;
    /** @var string Template filename for the page content */
    protected $template;
    /** @var string Set to true to display page footer */
    protected $display_footer;
    /** @var bool Set to true to only render page content (used to get iframe content) */
    protected $content_only = \false;
    /** @var bool If AJAX parameter is detected in request, set this flag to true */
    public $ajax = \false;
    /** @var bool If set to true, page content and messages will be encoded to JSON before responding to AJAX request */
    protected $json = \false;
    /** @var string JSON response status string */
    protected $status = '';
    /**
     * @see Controller::run()
     * @var string|null Redirect link. If not empty, the user will be redirected after initializing and processing input.
     */
    protected $redirect_after = \null;
    /** @var string Controller type. Possible values: 'front', 'modulefront', 'admin', 'moduleadmin' */
    public $controller_type;
    /** @var string Controller name */
    public $php_self;
    /** @var PrestaShopBundle\Translation\Translator */
    protected $translator;
    /** @var ContainerBuilder legacy container */
    protected $container;
    /**
     * Check if the controller is available for the current user/visitor
     */
    public abstract function checkAccess();
    /**
     * Check if the current user/visitor has valid view permissions
     */
    public abstract function viewAccess();
    /**
     * Initialize the page
     */
    public function init()
    {
    }
    /**
     * Do the page treatment: process input, process AJAX, etc.
     */
    public abstract function postProcess();
    /**
     * Displays page view
     */
    public abstract function display();
    /**
     * Sets default media list for this controller
     */
    public abstract function setMedia();
    /**
     * returns a new instance of this controller
     *
     * @param string $class_name
     * @param bool $auth
     * @param bool $ssl
     * @return Controller
     */
    public static function getController($class_name, $auth = \false, $ssl = \false)
    {
    }
    public function __construct()
    {
    }
    /**
     * Starts the controller process (this method should not be overridden!)
     */
    public function run()
    {
    }
    protected function trans($id, array $parameters = array(), $domain = \null, $locale = \null)
    {
    }
    /**
     * Sets page header display
     *
     * @param bool $display
     */
    public function displayHeader($display = \true)
    {
    }
    /**
     * Sets page header javascript display
     *
     * @param bool $display
     */
    public function displayHeaderJavaScript($display = \true)
    {
    }
    /**
     * Sets page header display
     *
     * @param bool $display
     */
    public function displayFooter($display = \true)
    {
    }
    /**
     * Sets template file for page content output
     *
     * @param string $template
     */
    public function setTemplate($template)
    {
    }
    /**
     * Assigns Smarty variables for the page header
     */
    public abstract function initHeader();
    /**
     * Assigns Smarty variables for the page main content
     */
    public abstract function initContent();
    /**
     * Assigns Smarty variables when access is forbidden
     */
    public abstract function initCursedPage();
    /**
     * Assigns Smarty variables for the page footer
     */
    public abstract function initFooter();
    /**
     * Redirects to $this->redirect_after after the process if there is no error
     */
    protected abstract function redirect();
    /**
     * Set $this->redirect_after that will be used by redirect() after the process
     */
    public function setRedirectAfter($url)
    {
    }
    /**
     * Adds a new stylesheet(s) to the page header.
     *
     * @param string|array $css_uri Path to CSS file, or list of css files like this : array(array(uri => media_type), ...)
     * @param string $css_media_type
     * @param int|null $offset
     * @param bool $check_path
     * @return true
     */
    public function addCSS($css_uri, $css_media_type = 'all', $offset = \null, $check_path = \true)
    {
    }
    /**
     * Removes CSS stylesheet(s) from the queued stylesheet list
     *
     * @param string|array $css_uri Path to CSS file or an array like: array(array(uri => media_type), ...)
     * @param string $css_media_type
     * @param bool $check_path
     */
    public function removeCSS($css_uri, $css_media_type = 'all', $check_path = \true)
    {
    }
    /**
     * Adds a new JavaScript file(s) to the page header.
     *
     * @param string|array $js_uri Path to JS file or an array like: array(uri, ...)
     * @param bool $check_path
     * @return void
     */
    public function addJS($js_uri, $check_path = \true)
    {
    }
    /**
     * Removes JS file(s) from the queued JS file list
     *
     * @param string|array $js_uri Path to JS file or an array like: array(uri, ...)
     * @param bool $check_path
     */
    public function removeJS($js_uri, $check_path = \true)
    {
    }
    /**
     * Adds jQuery library file to queued JS file list
     *
     * @param string|null $version jQuery library version
     * @param string|null $folder jQuery file folder
     * @param bool $minifier If set tot true, a minified version will be included.
     */
    public function addJquery($version = \null, $folder = \null, $minifier = \true)
    {
    }
    /**
     * Adds jQuery UI component(s) to queued JS file list
     *
     * @param string|array $component
     * @param string $theme
     * @param bool $check_dependencies
     */
    public function addJqueryUI($component, $theme = 'base', $check_dependencies = \true)
    {
    }
    /**
     * Adds jQuery plugin(s) to queued JS file list
     *
     * @param string|array $name
     * @param string null $folder
     * @param bool $css
     */
    public function addJqueryPlugin($name, $folder = \null, $css = \true)
    {
    }
    /**
     * Checks if the controller has been called from XmlHttpRequest (AJAX)
     *
     * @since 1.5
     * @return bool
     */
    public function isXmlHttpRequest()
    {
    }
    public function getLayout()
    {
    }
    /**
     * Renders controller templates and generates page content
     *
     * @param array|string $content Template file(s) to be rendered
     * @throws Exception
     * @throws SmartyException
     */
    protected function smartyOutputContent($content)
    {
    }
    /**
     * Checks if a template is cached
     *
     * @param string $template
     * @param string|null $cache_id Cache item ID
     * @param string|null $compile_id
     * @return bool
     */
    protected function isCached($template, $cache_id = \null, $compile_id = \null)
    {
    }
    /**
     * Custom error handler
     *
     * @param string $errno
     * @param string $errstr
     * @param string $errfile
     * @param int $errline
     * @return bool
     */
    public static function myErrorHandler($errno, $errstr, $errfile, $errline)
    {
    }
    /**
     * Dies and echoes output value
     *
     * @param string|null $value
     * @param string|null $controller
     * @param string|null $method
     */
    protected function ajaxDie($value = \null, $controller = \null, $method = \null)
    {
    }
    /**
     * Construct the container of dependencies
     */
    protected function buildContainer()
    {
    }
    public function get($serviceId)
    {
    }
    public function getParameter($parameterId)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
abstract class ProductPresentingFrontController extends \FrontController
{
    protected function getProductPresentationSettings()
    {
    }
    protected function getProductPresenter()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @since 1.5.0
 */
abstract class ModuleAdminController extends \AdminController
{
    /** @var Module */
    public $module;
    /**
     * @throws PrestaShopException
     */
    public function __construct()
    {
    }
    /**
     * Creates a template object
     *
     * @param string $tpl_name Template filename
     * @return Smarty_Internal_Template
     */
    public function createTemplate($tpl_name)
    {
    }
    /**
     * Get path to back office templates for the module
     *
     * @return string
     */
    public function getTemplatePath()
    {
    }
}
class FrontController extends \Controller
{
    /**
     * @deprecated Deprecated shortcuts as of 1.5.0.1 - Use $context->smarty instead
     *
     * @var Smarty
     */
    protected static $smarty;
    /**
     * @deprecated Deprecated shortcuts as of 1.5.0.1 - Use $context->cookie instead
     *
     * @var Cookie
     */
    protected static $cookie;
    /**
     * @deprecated Deprecated shortcuts as of 1.5.0.1 - Use $context->link instead
     *
     * @var Link
     */
    protected static $link;
    /**
     * @deprecated Deprecated shortcuts as of 1.5.0.1 - Use $context->cart instead
     *
     * @var Cart
     */
    protected static $cart;
    /** @var array Controller errors */
    public $errors = array();
    /** @var array Controller warning notifications */
    public $warning = array();
    /** @var array Controller success notifications */
    public $success = array();
    /** @var array Controller info notifications */
    public $info = array();
    /** @var string Language ISO code */
    public $iso;
    /** @var string ORDER BY field */
    public $orderBy;
    /** @var string Order way string ('ASC', 'DESC') */
    public $orderWay;
    /** @var int Current page number */
    public $p;
    /** @var int Items (products) per page */
    public $n;
    /** @var bool If set to true, will redirected user to login page during init function. */
    public $auth = \false;
    /**
     * If set to true, user can be logged in as guest when checking if logged in.
     *
     * @see $auth
     *
     * @var bool
     */
    public $guestAllowed = \false;
    /**
     * Route of PrestaShop page to redirect to after forced login.
     *
     * @see $auth
     *
     * @var bool
     */
    public $authRedirection = \false;
    /** @var bool SSL connection flag */
    public $ssl = \false;
    /** @var bool If true, switches display to restricted country page during init. */
    protected $restrictedCountry = \Country::GEOLOC_ALLOWED;
    /** @var bool If true, forces display to maintenance page. */
    protected $maintenance = \false;
    /** @var string[] Adds excluded $_GET keys for redirection */
    protected $redirectionExtraExcludedKeys = array();
    /**
     * True if controller has already been initialized.
     * Prevents initializing controller more than once.
     *
     * @var bool
     */
    public static $initialized = \false;
    /**
     * @var array Holds current customer's groups
     */
    protected static $currentCustomerGroups;
    /**
     * @var int
     */
    public $nb_items_per_page;
    /**
     * @var object ObjectSerializer
     */
    public $objectPresenter;
    /**
     * @var object CartPresenter
     */
    public $cart_presenter;
    /**
     * @var object StylesheetManager
     */
    protected $stylesheetManager;
    /**
     * @var object JavascriptManager
     */
    protected $javascriptManager;
    /**
     * @var object CccReducer
     */
    protected $cccReducer;
    /**
     * Controller constructor.
     *
     * @global bool $useSSL SSL connection flag
     */
    public function __construct()
    {
    }
    /**
     * Check if the controller is available for the current user/visitor.
     *
     * @see Controller::checkAccess()
     *
     * @return bool
     */
    public function checkAccess()
    {
    }
    /**
     * Check if the current user/visitor has valid view permissions.
     *
     * @see Controller::viewAccess
     *
     * @return bool
     */
    public function viewAccess()
    {
    }
    /**
     * Initializes front controller: sets smarty variables,
     * class properties, redirects depending on context, etc.
     *
     * @global bool     $useSSL           SSL connection flag
     * @global Cookie   $cookie           Visitor's cookie
     * @global Smarty   $smarty
     * @global Cart     $cart             Visitor's cart
     * @global string   $iso              Language ISO
     * @global Country  $defaultCountry   Visitor's country object
     * @global string   $protocol_link
     * @global string   $protocol_content
     * @global Link     $link
     * @global array    $css_files
     * @global array    $js_files
     * @global Currency $currency         Visitor's selected currency
     *
     * @throws PrestaShopException
     */
    public function init()
    {
    }
    /**
     * Method that is executed after init() and checkAccess().
     * Used to process user input.
     *
     * @see Controller::run()
     */
    public function postProcess()
    {
    }
    protected function assignGeneralPurposeVariables()
    {
    }
    /**
     * Initializes common front page content: header, footer and side columns.
     */
    public function initContent()
    {
    }
    public function initFooter()
    {
    }
    /**
     * Renders and outputs maintenance page and ends controller process.
     */
    public function initCursedPage()
    {
    }
    /**
     * Called before compiling common page sections (header, footer, columns).
     * Good place to modify smarty variables.
     *
     * @see FrontController::initContent()
     */
    public function process()
    {
    }
    /**
     * @return mixed
     */
    public function getStylesheets()
    {
    }
    /**
     * @return mixed
     */
    public function getJavascript()
    {
    }
    /**
     * Redirects to redirect_after link.
     *
     * @see $redirect_after
     */
    protected function redirect()
    {
    }
    public function redirectWithNotifications()
    {
    }
    /**
     * Renders page content.
     * Used for retrocompatibility with PS 1.4.
     */
    public function displayContent()
    {
    }
    /**
     * Compiles and outputs full page content.
     *
     * @return bool
     *
     * @throws Exception
     * @throws SmartyException
     */
    public function display()
    {
    }
    protected function smartyOutputContent($content)
    {
    }
    protected function prepareNotifications()
    {
    }
    /**
     * Displays maintenance page if shop is closed.
     */
    protected function displayMaintenancePage()
    {
    }
    /**
     * Displays 'country restricted' page if user's country is not allowed.
     */
    protected function displayRestrictedCountryPage()
    {
    }
    /**
     * Redirects to correct protocol if settings and request methods don't match.
     */
    protected function sslRedirection()
    {
    }
    /**
     * Redirects to canonical URL.
     *
     * @param string $canonical_url
     */
    protected function canonicalRedirection($canonical_url = '')
    {
    }
    /**
     * Geolocation management.
     *
     * @param Country $defaultCountry
     *
     * @return Country|false
     */
    protected function geolocationManagement($defaultCountry)
    {
    }
    /**
     * Sets controller CSS and JS files.
     *
     * @return bool
     */
    public function setMedia()
    {
    }
    /**
     * Initializes page header variables.
     */
    public function initHeader()
    {
    }
    /**
     * Sets and returns customer groups that the current customer(visitor) belongs to.
     *
     * @return array
     *
     * @throws PrestaShopDatabaseException
     */
    public static function getCurrentCustomerGroups()
    {
    }
    /**
     * Checks if user's location is whitelisted.
     *
     * @staticvar bool|null $allowed
     *
     * @return bool
     */
    protected static function isInWhitelistForGeolocation()
    {
    }
    /**
     * Checks if token is valid.
     *
     * @since 1.5.0.1
     *
     * @return bool
     */
    public function isTokenValid()
    {
    }
    /**
     * @deprecated 1.7 use $this->registerJavascript() and $this->registerStylesheet() to manage your assets.
     */
    public function addMedia($media_uri, $css_media_type = \null, $offset = \null, $remove = \false, $check_path = \true)
    {
    }
    /**
     * @deprecated 1.7 this method has not effect with PrestaShop 1.7+
     */
    public function removeMedia($media_uri, $css_media_type = \null, $check_path = \true)
    {
    }
    public function registerStylesheet($id, $relativePath, $params = array())
    {
    }
    public function unregisterStylesheet($id)
    {
    }
    public function registerJavascript($id, $relativePath, $params = array())
    {
    }
    public function unregisterJavascript($id)
    {
    }
    /**
     * @deprecated 1.7 This function shouldn't be used, use $this->registerStylesheet() instead
     */
    public function addCSS($css_uri, $css_media_type = 'all', $offset = \null, $check_path = \true)
    {
    }
    /**
     * @deprecated 1.7 This function has no effect in PrestaShop 1.7 theme, use $this->unregisterStylesheet() instead
     */
    public function removeCSS($css_uri, $css_media_type = 'all', $check_path = \true)
    {
    }
    /**
     * @deprecated 1.7 This function has no effect in PrestaShop 1.7 theme, use $this->registerJavascript() instead
     */
    public function addJS($js_uri, $check_path = \true)
    {
    }
    /**
     * @deprecated 1.7 This function has no effect in PrestaShop 1.7 theme, use $this->unregisterJavascript() instead
     */
    public function removeJS($js_uri, $check_path = \true)
    {
    }
    /**
     * @deprecated 1.7  This function has no effect in PrestaShop 1.7 theme. jQuery2 is register by the core on every theme.
     *                  Have a look at the /themes/_core folder.
     */
    public function addJquery($version = \null, $folder = \null, $minifier = \true)
    {
    }
    /**
     * Adds jQuery UI component(s) to queued JS file list
     *
     * @param string|array $component
     * @param string $theme
     * @param bool $check_dependencies
     */
    public function addJqueryUI($component, $theme = 'base', $check_dependencies = \true)
    {
    }
    /**
     * Add Library not included with classic theme
     */
    public function requireAssets(array $libraries)
    {
    }
    /**
     * Adds jQuery plugin(s) to queued JS file list
     *
     * @param string|array $name
     * @param string null $folder
     * @param bool $css
     */
    public function addJqueryPlugin($name, $folder = \null, $css = \true)
    {
    }
    /**
     * Recovers cart information.
     *
     * @return int|false
     */
    protected function recoverCart()
    {
    }
    /**
     * Sets template file for page content output.
     *
     * @param string $default_template
     */
    public function setTemplate($template, $params = array(), $locale = \null)
    {
    }
    /**
     * Removed in PrestaShop 1.7.
     *
     * @return bool
     */
    protected function useMobileTheme()
    {
    }
    /**
     * Returns theme directory (regular or mobile).
     *
     * @return string
     */
    protected function getThemeDir()
    {
    }
    /**
     * Returns the layout corresponding to the current page by using the override system
     * Ex:
     * On the url: http://localhost/index.php?id_product=1&controller=product, this method will
     * check if the layout exists in the following files (in that order), and return the first found:
     * - /themes/default/override/layout-product-1.tpl
     * - /themes/default/override/layout-product.tpl
     * - /themes/default/layout.tpl.
     *
     * @since 1.5.0.13
     *
     * @return bool|string
     */
    public function getLayout()
    {
    }
    /**
     * Returns template path.
     *
     * @param string $template
     *
     * @return string
     */
    public function getTemplatePath($template)
    {
    }
    public function getTemplateFile($template, $params = array(), $locale = \null)
    {
    }
    /**
     * Renders and adds color list HTML for each product in a list.
     *
     * @param array $products
     */
    public function addColorsToProductList(&$products)
    {
    }
    /**
     * Returns cache ID for product color list.
     *
     * @param int $id_product
     *
     * @return string
     */
    protected function getColorsListCacheId($id_product)
    {
    }
    public function getTemplateVarUrls()
    {
    }
    public function getTemplateVarConfiguration()
    {
    }
    protected function getDisplayTaxesLabel()
    {
    }
    public function getTemplateVarCurrency()
    {
    }
    public function getTemplateVarCustomer($customer = \null)
    {
    }
    public function getTemplateVarShop()
    {
    }
    public function getTemplateVarPage()
    {
    }
    public function getBreadcrumb()
    {
    }
    protected function getBreadcrumbLinks()
    {
    }
    protected function getCategoryPath($category)
    {
    }
    protected function addMyAccountToBreadcrumb()
    {
    }
    public function getCanonicalURL()
    {
    }
    /**
     * Generate a URL corresponding to the current page but
     * with the query string altered.
     *
     * If $extraParams is set to NULL, then all query params are stripped.
     *
     * Otherwise, params from $extraParams that have a null value are stripped,
     * and other params are added. Params not in $extraParams are unchanged.
     */
    protected function updateQueryString(array $extraParams = \null)
    {
    }
    protected function getCurrentURL()
    {
    }
    public function getPageName()
    {
    }
    protected function render($template, array $params = array())
    {
    }
    protected function getTranslator()
    {
    }
    protected function makeLoginForm()
    {
    }
    protected function makeCustomerFormatter()
    {
    }
    protected function makeCustomerForm()
    {
    }
    protected function makeAddressPersister()
    {
    }
    protected function makeAddressForm()
    {
    }
    // @altered method visibility
    protected function initDebugguer()
    {
    }
    /**
     * Get templateFinder.
     *
     * @return object
     */
    public function getTemplateFinder()
    {
    }
    public function getRestrictedCountry()
    {
    }
    public function getAssetUriFromLegacyDeprecatedMethod($legacy_uri)
    {
    }
    protected function buildContainer()
    {
    }
}
/**
 * This class is the base class for all front-end "product listing" controllers,
 * like "CategoryController", that is, controllers whose primary job is
 * to display a list of products and filters to make navigation easier.
 */
abstract class ProductListingFrontController extends \ProductPresentingFrontController
{
    /**
     * Runs "prepareProductForTemplate" on the collection
     * of product ids passed in.
     *
     * @param array $products array of arrays containing at list the "id_product" key
     *
     * @return array of products ready for templating
     */
    protected function prepareMultipleProductsForTemplate(array $products)
    {
    }
    /**
     * The ProductSearchContext is passed to search providers
     * so that they can avoid using the global id_lang and such
     * variables. This method acts as a factory for the ProductSearchContext.
     *
     * @return ProductSearchContext a search context for the queries made by this controller
     */
    protected function getProductSearchContext()
    {
    }
    /**
     * Converts a Facet to an array with all necessary
     * information for templating.
     *
     * @param Facet $facet
     *
     * @return array ready for templating
     */
    protected function prepareFacetForTemplate(\PrestaShop\PrestaShop\Core\Product\Search\Facet $facet)
    {
    }
    /**
     * Renders an array of facets.
     *
     * @param array $facets
     *
     * @return string the HTML of the facets
     */
    protected function renderFacets(\PrestaShop\PrestaShop\Core\Product\Search\ProductSearchResult $result)
    {
    }
    /**
     * Renders an array of active filters.
     *
     * @param array $facets
     *
     * @return string the HTML of the facets
     */
    protected function renderActiveFilters(\PrestaShop\PrestaShop\Core\Product\Search\ProductSearchResult $result)
    {
    }
    /**
     * This returns all template variables needed for rendering
     * the product list, the facets, the pagination and the sort orders.
     *
     * @return array variables ready for templating
     */
    protected function getProductSearchVariables()
    {
    }
    /**
     * Pagination is HARD. We let the core do the heavy lifting from
     * a simple representation of the pagination.
     *
     * Generated URLs will include the page number, obviously,
     * but also the sort order and the "q" (facets) parameters.
     *
     * @param ProductSearchQuery  $query
     * @param ProductSearchResult $result
     *
     * @return an array that makes rendering the pagination very easy
     */
    protected function getTemplateVarPagination(\PrestaShop\PrestaShop\Core\Product\Search\ProductSearchQuery $query, \PrestaShop\PrestaShop\Core\Product\Search\ProductSearchResult $result)
    {
    }
    /**
     * Prepares the sort-order links.
     *
     * Sort order links contain the current encoded facets if any,
     * but not the page number because normally when you change the sort order
     * you want to go back to page one.
     *
     * @param array  $sortOrders                   the available sort orders
     * @param string $currentSortOrderURLParameter used to know which of the sort orders (if any) is active
     *
     * @return array
     */
    protected function getTemplateVarSortOrders(array $sortOrders, $currentSortOrderURLParameter)
    {
    }
    /**
     * Similar to "getProductSearchVariables" but used in AJAX queries.
     *
     * It returns an array with the HTML for the products and facets,
     * and the current URL to put it in the browser URL bar (we don't want to
     * break the back button!).
     *
     * @return array
     */
    protected function getAjaxProductSearchVariables()
    {
    }
    /**
     * Finally, the methods that wraps it all:.
     *
     * If we're doing AJAX, output a JSON of the necessary product search related
     * variables.
     *
     * If we're not doing AJAX, then render the whole page with the given template.
     *
     * @param string $template the template for this page
     *
     * @return no return
     */
    protected function doProductSearch($template, $params = array(), $locale = \null)
    {
    }
    public abstract function getListingLabel();
    /**
     * Gets the product search query for the controller.
     * That is, the minimum contract with which search modules
     * must comply.
     *
     * @return ProductSearchQuery
     */
    protected abstract function getProductSearchQuery();
    /**
     * We cannot assume that modules will handle the query,
     * so we need a default implementation for the search provider.
     *
     * @return ProductSearchProviderInterface
     */
    protected abstract function getDefaultProductSearchProvider();
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * Create a collection of ObjectModel objects
 *
 * @since 1.5.0
 */
class PrestaShopCollection implements \Iterator, \ArrayAccess, \Countable
{
    const LEFT_JOIN = 1;
    const INNER_JOIN = 2;
    const LEFT_OUTER_JOIN = 3;
    /**
     * @var string Object class name
     */
    protected $classname;
    /**
     * @var int
     */
    protected $id_lang;
    /**
     * @var array Object definition
     */
    protected $definition = array();
    /**
     * @var DbQuery
     */
    protected $query;
    /**
     * @var array Collection of objects in an array
     */
    protected $results = array();
    /**
     * @var bool Is current collection already hydrated
     */
    protected $is_hydrated = \false;
    /**
     * @var int Collection iterator
     */
    protected $iterator = 0;
    /**
     * @var int Total of elements for iteration
     */
    protected $total;
    /**
     * @var int Page number
     */
    protected $page_number = 0;
    /**
     * @var int Size of a page
     */
    protected $page_size = 0;
    protected $fields = array();
    protected $alias = array();
    protected $alias_iterator = 0;
    protected $join_list = array();
    protected $association_definition = array();
    const LANG_ALIAS = 'l';
    /**
     * @param string $classname
     * @param int $id_lang
     */
    public function __construct($classname, $id_lang = \null)
    {
    }
    /**
     * Join current entity to an associated entity
     *
     * @param string $association Association name
     * @param string $on
     * @param int $type
     * @return PrestaShopCollection
     */
    public function join($association, $on = '', $type = \null)
    {
    }
    /**
     * Add WHERE restriction on query
     *
     * @param string $field Field name
     * @param string $operator List of operators : =, !=, <>, <, <=, >, >=, like, notlike, regexp, notregexp
     * @param mixed $value
     * @param string $type where|having
     * @return PrestaShopCollection
     */
    public function where($field, $operator, $value, $method = 'where')
    {
    }
    /**
     * Add WHERE restriction on query using real SQL syntax
     *
     * @param string $sql
     * @return PrestaShopCollection
     */
    public function sqlWhere($sql)
    {
    }
    /**
     * Add HAVING restriction on query
     *
     * @param string $field Field name
     * @param string $operator List of operators : =, !=, <>, <, <=, >, >=, like, notlike, regexp, notregexp
     * @param mixed $value
     * @return PrestaShopCollection
     */
    public function having($field, $operator, $value)
    {
    }
    /**
     * Add HAVING restriction on query using real SQL syntax
     *
     * @param string $sql
     * @return PrestaShopCollection
     */
    public function sqlHaving($sql)
    {
    }
    /**
     * Add ORDER BY restriction on query
     *
     * @param string $field Field name
     * @param string $order asc|desc
     * @return PrestaShopCollection
     */
    public function orderBy($field, $order = 'asc')
    {
    }
    /**
     * Add ORDER BY restriction on query using real SQL syntax
     *
     * @param string $sql
     * @return PrestaShopCollection
     */
    public function sqlOrderBy($sql)
    {
    }
    /**
     * Add GROUP BY restriction on query
     *
     * @param string $field Field name
     * @return PrestaShopCollection
     */
    public function groupBy($field)
    {
    }
    /**
     * Add GROUP BY restriction on query using real SQL syntax
     *
     * @param string $sql
     * @return PrestaShopCollection
     */
    public function sqlGroupBy($sql)
    {
    }
    /**
     * Launch sql query to create collection of objects
     *
     * @param bool $display_query If true, query will be displayed (for debug purpose)
     * @return PrestaShopCollection
     */
    public function getAll($display_query = \false)
    {
    }
    /**
     * Retrieve the first result
     *
     * @return ObjectModel
     */
    public function getFirst()
    {
    }
    /**
     * Get results array
     *
     * @return array
     */
    public function getResults()
    {
    }
    /**
     * This method is called when a foreach begin
     *
     * @see Iterator::rewind()
     */
    public function rewind()
    {
    }
    /**
     * Get current result
     *
     * @see Iterator::current()
     * @return ObjectModel
     */
    public function current()
    {
    }
    /**
     * Check if there is a current result
     *
     * @see Iterator::valid()
     * @return bool
     */
    public function valid()
    {
    }
    /**
     * Get current result index
     *
     * @see Iterator::key()
     * @return int
     */
    public function key()
    {
    }
    /**
     * Go to next result
     *
     * @see Iterator::next()
     */
    public function next()
    {
    }
    /**
     * Get total of results
     *
     * @see Countable::count()
     * @return int
     */
    public function count()
    {
    }
    /**
     * Check if a result exist
     *
     * @see ArrayAccess::offsetExists()
     * @param $offset
     * @return bool
     */
    public function offsetExists($offset)
    {
    }
    /**
     * Get a result by offset
     *
     * @see ArrayAccess::offsetGet()
     * @param $offset
     * @return ObjectModel
     */
    public function offsetGet($offset)
    {
    }
    /**
     * Add an element in the collection
     *
     * @see ArrayAccess::offsetSet()
     * @param $offset
     * @param $value
     */
    public function offsetSet($offset, $value)
    {
    }
    /**
     * Delete an element from the collection
     *
     * @see ArrayAccess::offsetUnset()
     * @param $offset
     */
    public function offsetUnset($offset)
    {
    }
    /**
     * Get definition of an association
     *
     * @param string $association
     * @return array
     */
    protected function getDefinition($association)
    {
    }
    /**
     * Parse all fields with {field} syntax in a string
     *
     * @param string $str
     * @return string
     */
    protected function parseFields($str)
    {
    }
    /**
     * Replace a field with its SQL version (E.g. manufacturer.name with a2.name)
     *
     * @param string $field Field name
     * @return string
     */
    protected function parseField($field)
    {
    }
    /**
     * Format a value with the type of the given field
     *
     * @param mixed $value
     * @param string $field Field name
     * @return mixed
     */
    protected function formatValue($value, $field)
    {
    }
    /**
     * Obtain some information on a field (alias, name, type, etc.)
     *
     * @param string $field Field name
     * @return array
     */
    protected function getFieldInfo($field)
    {
    }
    /**
     * Set the page number
     *
     * @param int $page_number
     * @return PrestaShopCollection
     */
    public function setPageNumber($page_number)
    {
    }
    /**
     * Set the nuber of item per page
     *
     * @param int $page_size
     * @return PrestaShopCollection
     */
    public function setPageSize($page_size)
    {
    }
    /**
     * Generate uniq alias from association name
     *
     * @param string $association Use empty association for alias on current table
     * @return string
     */
    protected function generateAlias($association = '')
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Combination
 */
class Combination extends \ObjectModel
{
    /** @var int $id_product Product ID */
    public $id_product;
    public $reference;
    /** @var string $supplier_reference */
    public $supplier_reference;
    public $location;
    public $ean13;
    public $isbn;
    public $upc;
    public $wholesale_price;
    public $price;
    public $unit_price_impact;
    public $ecotax;
    public $minimal_quantity = 1;
    public $quantity;
    public $weight;
    public $default_on;
    public $available_date = '0000-00-00';
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'product_attribute', 'primary' => 'id_product_attribute', 'fields' => array(
        'id_product' => array('type' => self::TYPE_INT, 'shop' => 'both', 'validate' => 'isUnsignedId', 'required' => \true),
        'location' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'size' => 64),
        'ean13' => array('type' => self::TYPE_STRING, 'validate' => 'isEan13', 'size' => 13),
        'isbn' => array('type' => self::TYPE_STRING, 'validate' => 'isIsbn', 'size' => 32),
        'upc' => array('type' => self::TYPE_STRING, 'validate' => 'isUpc', 'size' => 12),
        'quantity' => array('type' => self::TYPE_INT, 'validate' => 'isInt', 'size' => 10),
        'reference' => array('type' => self::TYPE_STRING, 'size' => 32),
        'supplier_reference' => array('type' => self::TYPE_STRING, 'size' => 32),
        /* Shop fields */
        'wholesale_price' => array('type' => self::TYPE_FLOAT, 'shop' => \true, 'validate' => 'isPrice', 'size' => 27),
        'price' => array('type' => self::TYPE_FLOAT, 'shop' => \true, 'validate' => 'isNegativePrice', 'size' => 20),
        'ecotax' => array('type' => self::TYPE_FLOAT, 'shop' => \true, 'validate' => 'isPrice', 'size' => 20),
        'weight' => array('type' => self::TYPE_FLOAT, 'shop' => \true, 'validate' => 'isFloat'),
        'unit_price_impact' => array('type' => self::TYPE_FLOAT, 'shop' => \true, 'validate' => 'isNegativePrice', 'size' => 20),
        'minimal_quantity' => array('type' => self::TYPE_INT, 'shop' => \true, 'validate' => 'isUnsignedId', 'required' => \true),
        'default_on' => array('type' => self::TYPE_BOOL, 'allow_null' => \true, 'shop' => \true, 'validate' => 'isBool'),
        'available_date' => array('type' => self::TYPE_DATE, 'shop' => \true, 'validate' => 'isDateFormat'),
    ));
    protected $webserviceParameters = array('objectNodeName' => 'combination', 'objectsNodeName' => 'combinations', 'fields' => array('id_product' => array('required' => \true, 'xlink_resource' => 'products')), 'associations' => array('product_option_values' => array('resource' => 'product_option_value'), 'images' => array('resource' => 'image', 'api' => 'images/products')));
    /**
     * Deletes current Combination from the database
     *
     * @return bool True if delete was successful
     * @throws PrestaShopException
     */
    public function delete()
    {
    }
    /**
     * Delete from Supplier
     *
     * @param int $idProduct Product ID
     *
     * @return bool
     */
    public function deleteFromSupplier($idProduct)
    {
    }
    /**
     * Adds current Combination as a new Object to the database
     *
     * @param bool $autoDate   Automatically set `date_upd` and `date_add` columns
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Indicates whether the Combination has been successfully added
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function add($autoDate = \true, $nullValues = \false)
    {
    }
    /**
     * Updates the current Combination in the database
     *
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Indicates whether the Combination has been successfully updated
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function update($nullValues = \false)
    {
    }
    /**
     * Delete associations
     *
     * @return bool Indicates whether associations have been successfully deleted
     */
    public function deleteAssociations()
    {
    }
    /**
     * @param array $idsAttribute
     *
     * @return bool
     */
    public function setAttributes($idsAttribute)
    {
    }
    /**
     * @param array $values
     *
     * @return bool
     */
    public function setWsProductOptionValues($values)
    {
    }
    /**
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public function getWsProductOptionValues()
    {
    }
    /**
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public function getWsImages()
    {
    }
    /**
     * @param $idsImage
     *
     * @return bool
     */
    public function setImages($idsImage)
    {
    }
    /**
     * @param $values
     *
     * @return bool
     */
    public function setWsImages($values)
    {
    }
    /**
     * @param $idLang
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public function getAttributesName($idLang)
    {
    }
    /**
     * This method is allow to know if a feature is active
     * @since 1.5.0.1
     * @return bool
     */
    public static function isFeatureActive()
    {
    }
    /**
     * This method is allow to know if a Combination entity is currently used
     *
     * @since 1.5.0.1
     *
     * @param $table
     * @param $hasActiveColumn
     *
     * @return bool
     */
    public static function isCurrentlyUsed($table = \null, $hasActiveColumn = \false)
    {
    }
    /**
     * For a given product_attribute reference, returns the corresponding id
     *
     * @param int    $idProduct
     * @param string $reference
     *
     * @return int id
     */
    public static function getIdByReference($idProduct, $reference)
    {
    }
    /**
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public function getColorsAttributes()
    {
    }
    /**
     * Retrive the price of combination
     *
     * @param int $idProductAttribute
     *
     * @return float mixed
     *
     * @since 1.5.0
     */
    public static function getPrice($idProductAttribute)
    {
    }
}
/***
 * class Customer
 */
class Customer extends \ObjectModel
{
    /** @var int $id Customer ID */
    public $id;
    /** @var int $id_shop Shop ID */
    public $id_shop;
    /** @var int $id_shop_group ShopGroup ID */
    public $id_shop_group;
    /** @var string Secure key */
    public $secure_key;
    /** @var string protected note */
    public $note;
    /** @var int Gender ID */
    public $id_gender = 0;
    /** @var int Default group ID */
    public $id_default_group;
    /** @var int Current language used by the customer */
    public $id_lang;
    /** @var string Lastname */
    public $lastname;
    /** @var string Firstname */
    public $firstname;
    /** @var string Birthday (yyyy-mm-dd) */
    public $birthday = \null;
    /** @var string e-mail */
    public $email;
    /** @var bool Newsletter subscription */
    public $newsletter;
    /** @var string Newsletter ip registration */
    public $ip_registration_newsletter;
    /** @var string Newsletter ip registration */
    public $newsletter_date_add;
    /** @var bool Opt-in subscription */
    public $optin;
    /** @var string WebSite * */
    public $website;
    /** @var string Company */
    public $company;
    /** @var string SIRET */
    public $siret;
    /** @var string APE */
    public $ape;
    /** @var float Outstanding allow amount (B2B opt) */
    public $outstanding_allow_amount = 0;
    /** @var int Show public prices (B2B opt) */
    public $show_public_prices = 0;
    /** @var int Risk ID (B2B opt) */
    public $id_risk;
    /** @var int Max payment day */
    public $max_payment_days = 0;
    /** @var int Password */
    public $passwd;
    /** @var string Datetime Password */
    public $last_passwd_gen;
    /** @var bool Status */
    public $active = \true;
    /** @var bool Status */
    public $is_guest = 0;
    /** @var bool True if carrier has been deleted (staying in database as deleted) */
    public $deleted = 0;
    /** @var string Object creation date */
    public $date_add;
    /** @var string Object last modification date */
    public $date_upd;
    public $years;
    public $days;
    public $months;
    /** @var int customer id_country as determined by geolocation */
    public $geoloc_id_country;
    /** @var int customer id_state as determined by geolocation */
    public $geoloc_id_state;
    /** @var string customer postcode as determined by geolocation */
    public $geoloc_postcode;
    /** @var bool is the customer logged in */
    public $logged = 0;
    /** @var int id_guest meaning the guest table, not the guest customer */
    public $id_guest;
    public $groupBox;
    /** @var string Unique token for forgot passsword feature */
    public $reset_password_token;
    /** @var string token validity date for forgot password feature */
    public $reset_password_validity;
    protected $webserviceParameters = array('fields' => array('id_default_group' => array('xlink_resource' => 'groups'), 'id_lang' => array('xlink_resource' => 'languages'), 'newsletter_date_add' => array(), 'ip_registration_newsletter' => array(), 'last_passwd_gen' => array('setter' => \null), 'secure_key' => array('setter' => \null), 'deleted' => array(), 'passwd' => array('setter' => 'setWsPasswd')), 'associations' => array('groups' => array('resource' => 'group')));
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'customer', 'primary' => 'id_customer', 'fields' => array('secure_key' => array('type' => self::TYPE_STRING, 'validate' => 'isMd5', 'copy_post' => \false), 'lastname' => array('type' => self::TYPE_STRING, 'validate' => 'isName', 'required' => \true, 'size' => 255), 'firstname' => array('type' => self::TYPE_STRING, 'validate' => 'isName', 'required' => \true, 'size' => 255), 'email' => array('type' => self::TYPE_STRING, 'validate' => 'isEmail', 'required' => \true, 'size' => 128), 'passwd' => array('type' => self::TYPE_STRING, 'validate' => 'isPasswd', 'required' => \true, 'size' => 60), 'last_passwd_gen' => array('type' => self::TYPE_STRING, 'copy_post' => \false), 'id_gender' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'birthday' => array('type' => self::TYPE_DATE, 'validate' => 'isBirthDate'), 'newsletter' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'newsletter_date_add' => array('type' => self::TYPE_DATE, 'copy_post' => \false), 'ip_registration_newsletter' => array('type' => self::TYPE_STRING, 'copy_post' => \false), 'optin' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'website' => array('type' => self::TYPE_STRING, 'validate' => 'isUrl'), 'company' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName'), 'siret' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName'), 'ape' => array('type' => self::TYPE_STRING, 'validate' => 'isApe'), 'outstanding_allow_amount' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat', 'copy_post' => \false), 'show_public_prices' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool', 'copy_post' => \false), 'id_risk' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt', 'copy_post' => \false), 'max_payment_days' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt', 'copy_post' => \false), 'active' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool', 'copy_post' => \false), 'deleted' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool', 'copy_post' => \false), 'note' => array('type' => self::TYPE_HTML, 'validate' => 'isCleanHtml', 'size' => 65000, 'copy_post' => \false), 'is_guest' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool', 'copy_post' => \false), 'id_shop' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'copy_post' => \false), 'id_shop_group' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'copy_post' => \false), 'id_default_group' => array('type' => self::TYPE_INT, 'copy_post' => \false), 'id_lang' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'copy_post' => \false), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate', 'copy_post' => \false), 'date_upd' => array('type' => self::TYPE_DATE, 'validate' => 'isDate', 'copy_post' => \false), 'reset_password_token' => array('type' => self::TYPE_STRING, 'validate' => 'isSha1', 'size' => 40, 'copy_post' => \false), 'reset_password_validity' => array('type' => self::TYPE_DATE, 'validate' => 'isDateOrNull', 'copy_post' => \false)));
    protected static $_defaultGroupId = array();
    protected static $_customerHasAddress = array();
    protected static $_customer_groups = array();
    /**
     * CustomerCore constructor.
     *
     * @param null $id
     */
    public function __construct($id = \null)
    {
    }
    /**
     * Adds current Customer as a new Object to the database.
     *
     * @param bool $autoDate   Automatically set `date_upd` and `date_add` columns
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Indicates whether the Customer has been successfully added
     *
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function add($autoDate = \true, $nullValues = \true)
    {
    }
    /**
     * Updates the current Customer in the database.
     *
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Indicates whether the Customer has been successfully updated
     *
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function update($nullValues = \false)
    {
    }
    /**
     * Deletes current Customer from the database.
     *
     * @return bool True if delete was successful
     *
     * @throws PrestaShopException
     */
    public function delete()
    {
    }
    /**
     * Return customers list.
     *
     * @param null|bool $onlyActive Returns only active customers when `true`
     *
     * @return array Customers
     */
    public static function getCustomers($onlyActive = \null)
    {
    }
    /**
     * Return customer instance from its e-mail (optionally check password).
     *
     * @param string $email             e-mail
     * @param string $plaintextPassword Password is also checked if specified
     * @param bool   $ignoreGuest
     *
     * @return bool|Customer|CustomerCore Customer instance
     */
    public function getByEmail($email, $plaintextPassword = \null, $ignoreGuest = \true)
    {
    }
    /**
     * Retrieve customers by email address.
     *
     * @param string $email
     *
     * @return array
     */
    public static function getCustomersByEmail($email)
    {
    }
    /**
     * Check id the customer is active or not.
     *
     * @param int $idCustomer
     *
     * @return bool Customer validity
     */
    public static function isBanned($idCustomer)
    {
    }
    /**
     * Check if e-mail is already registered in database.
     *
     * @param string $email       e-mail
     * @param bool   $returnId
     * @param bool   $ignoreGuest To exclude guest customer
     *
     * @return bool|int Customer ID if found
     *                  `false` otherwise
     */
    public static function customerExists($email, $returnId = \false, $ignoreGuest = \true)
    {
    }
    /**
     * Check if an address is owned by a customer.
     *
     * @param int $idCustomer Customer ID
     * @param int $idAddress  Address ID
     *
     * @return bool result
     */
    public static function customerHasAddress($idCustomer, $idAddress)
    {
    }
    /**
     * Reset Address cache.
     *
     * @param int $idCustomer Customer ID
     * @param int $idAddress  Address ID
     */
    public static function resetAddressCache($idCustomer, $idAddress)
    {
    }
    /**
     * Return customer addresses.
     *
     * @param int $idLang Language ID
     *
     * @return array Addresses
     */
    public function getAddresses($idLang)
    {
    }
    /**
     * Get simplified Addresses arrays.
     *
     * @param int|null $idLang Language ID
     *
     * @return array
     */
    public function getSimpleAddresses($idLang = \null)
    {
    }
    /**
     * Get Address as array.
     *
     * @param int      $idAddress Address ID
     * @param int|null $idLang    Language ID
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public function getSimpleAddress($idAddress, $idLang = \null)
    {
    }
    /**
     * Get SQL query to retrieve Address in an array.
     *
     * @param int|null $idAddress Address ID
     * @param int|null $idLang    Language ID
     *
     * @return string
     */
    public function getSimpleAddressSql($idAddress = \null, $idLang = \null)
    {
    }
    /**
     * Count the number of addresses for a customer.
     *
     * @param int $idCustomer Customer ID
     *
     * @return int Number of addresses
     */
    public static function getAddressesTotalById($idCustomer)
    {
    }
    /**
     * Check if customer password is the right one.
     *
     * @param int    $idCustomer   Customer ID
     * @param string $passwordHash Hashed password
     *
     * @return bool result
     */
    public static function checkPassword($idCustomer, $passwordHash)
    {
    }
    /**
     * Light back office search for customers.
     *
     * @param string   $query Searched string
     * @param null|int $limit Limit query results
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource Corresponding customers
     *
     * @throws PrestaShopDatabaseException
     */
    public static function searchByName($query, $limit = \null)
    {
    }
    /**
     * Search for customers by ip address.
     *
     * @param string $ip Searched string
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public static function searchByIp($ip)
    {
    }
    /**
     * Return several useful statistics about customer.
     *
     * @return array Stats
     */
    public function getStats()
    {
    }
    /**
     * Get last 10 emails sent to the Customer.
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public function getLastEmails()
    {
    }
    /**
     * Get last 10 Connections of the Customer.
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public function getLastConnections()
    {
    }
    /**
     * Check if Customer ID exists.
     *
     * @param int $idCustomer Customer ID
     *
     * @return int|null Customer ID if found
     */
    public static function customerIdExistsStatic($idCustomer)
    {
    }
    /**
     * Update customer groups associated to the object.
     *
     * @param array $list groups
     */
    public function updateGroup($list)
    {
    }
    /**
     * Remove this Customer ID from Customer Groups.
     *
     * @return bool Indicates whether the Customer ID has been successfully removed
     *              from the Customer Group Db table
     */
    public function cleanGroups()
    {
    }
    /**
     * Add the Customer to the given Customer Groups.
     *
     * @param array $groups Customer Group IDs
     */
    public function addGroups($groups)
    {
    }
    /**
     * Get Groups that have the given Customer ID.
     *
     * @param int $idCustomer Customer ID
     *
     * @return array|mixed
     */
    public static function getGroupsStatic($idCustomer)
    {
    }
    public function getGroups()
    {
    }
    /**
     * Get Products bought by this Customer.
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public function getBoughtProducts()
    {
    }
    /**
     * Get Default Customer Group ID.
     *
     * @param int $idCustomer Customer ID
     *
     * @return mixed|null|string
     */
    public static function getDefaultGroupId($idCustomer)
    {
    }
    /**
     * Get current Country.
     *
     * @param int       $idCustomer
     * @param Cart|null $cart
     *
     * @return int Country ID
     */
    public static function getCurrentCountry($idCustomer, \Cart $cart = \null)
    {
    }
    /**
     * Toggle Customer status.
     *
     * @return bool Indicates whether the status has been successfully toggled
     */
    public function toggleStatus()
    {
    }
    /**
     * Is the current Customer a Guest?
     *
     * @return bool Indicates whether the Customer is a Guest
     */
    public function isGuest()
    {
    }
    /**
     * Transform the Guest to a Customer.
     *
     * @param int         $idLang   Language ID
     * @param string|null $password Password
     *
     * @return bool
     */
    public function transformToCustomer($idLang, $password = \null)
    {
    }
    /**
     * Set password
     * (for webservice).
     *
     * @param string $passwd Password
     *
     * @return bool Indictes whether the password has been successfully set
     */
    public function setWsPasswd($passwd)
    {
    }
    /**
     * Check customer information and return customer validity.
     *
     * @since 1.5.0
     *
     * @param bool $withGuest
     *
     * @return bool customer validity
     */
    public function isLogged($withGuest = \false)
    {
    }
    /**
     * Logout.
     *
     * @since 1.5.0
     */
    public function logout()
    {
    }
    /**
     * Soft logout, delete everything that links to the customer
     * but leave there affiliate's information.
     *
     * @since 1.5.0
     */
    public function mylogout()
    {
    }
    /**
     * Get last empty Cart for this Customer, when last cart is not empty return false.
     *
     * @param bool|true $withOrder
     *
     * @return bool|int
     */
    public function getLastEmptyCart($withOrder = \true)
    {
    }
    /**
     * Validate controller.
     *
     * @param bool $htmlentities
     *
     * @return array
     */
    public function validateController($htmlentities = \true)
    {
    }
    /**
     * Get outstanding amount.
     *
     * @return float Outstanding amount
     */
    public function getOutstanding()
    {
    }
    /**
     * Get Customer Groups
     * (for webservice).
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public function getWsGroups()
    {
    }
    /**
     * Set Customer Groups
     * (for webservice).
     *
     * @param $result
     *
     * @return bool
     */
    public function setWsGroups($result)
    {
    }
    /**
     * @see ObjectModel::getWebserviceObjectList()
     */
    public function getWebserviceObjectList($sqlJoin, $sqlFilter, $sqlSort, $sqlLimit)
    {
    }
    /**
     * Fill Reset password unique token with random sha1 and its validity date. For forgot password feature.
     */
    public function stampResetPasswordToken()
    {
    }
    /**
     * Test if a reset password token is present and is recent enough to avoid creating a new one (in case of customer triggering the forgot password link too often).
     */
    public function hasRecentResetPasswordToken()
    {
    }
    /**
     * Returns the valid reset password token if it validity date is > now().
     */
    public function getValidResetPasswordToken()
    {
    }
    /**
     * Delete reset password token data.
     */
    public function removeResetPasswordToken()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class State
 */
class State extends \ObjectModel
{
    /** @var int Country id which state belongs */
    public $id_country;
    /** @var int Zone id which state belongs */
    public $id_zone;
    /** @var string 2 letters iso code */
    public $iso_code;
    /** @var string Name */
    public $name;
    /** @var bool Status for delivery */
    public $active = \true;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'state', 'primary' => 'id_state', 'fields' => array('id_country' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_zone' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'iso_code' => array('type' => self::TYPE_STRING, 'validate' => 'isStateIsoCode', 'required' => \true, 'size' => 7), 'name' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'required' => \true, 'size' => 32), 'active' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool')));
    protected $webserviceParameters = array('fields' => array('id_zone' => array('xlink_resource' => 'zones'), 'id_country' => array('xlink_resource' => 'countries')));
    public static function getStates($idLang = \false, $active = \false)
    {
    }
    /**
     * Get a state name with its ID
     *
     * @param int $idState Country ID
     *
     * @return string State name
     */
    public static function getNameById($idState)
    {
    }
    /**
     * Get State ID with its name
     *
     * @param string $state State ID
     *
     * @return int state id
     */
    public static function getIdByName($state)
    {
    }
    /**
     * Get a state id with its iso code
     *
     * @param string $isoCode Iso code
     *
     * @return int state id
     */
    public static function getIdByIso($isoCode, $idCountry = \null)
    {
    }
    /**
     * Delete a state only if is not in use
     *
     * @return bool
     */
    public function delete()
    {
    }
    /**
     * Check if a state is used
     *
     * @return bool
     */
    public function isUsed()
    {
    }
    /**
     * Returns the number of utilisation of a state
     *
     * @return int count for this state
     */
    public function countUsed()
    {
    }
    /**
     * Get states by Country ID
     *
     * @param int $idCountry Country ID
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public static function getStatesByIdCountry($idCountry)
    {
    }
    /**
     * Has Counties
     *
     * @param int $idState
     *
     * @return int
     */
    public static function hasCounties($idState)
    {
    }
    /**
     * Get Zone ID
     *
     * @param int $idState State ID
     *
     * @return false|null|string
     */
    public static function getIdZone($idState)
    {
    }
    /**
     * @param array $idsStates State IDs
     * @param int   $idZone    Zone ID
     *
     * @return bool
     */
    public function affectZoneToSelection($idsStates, $idZone)
    {
    }
}
class DataLang
{
    /** @var Translator  */
    protected $translator;
    /** @var string */
    protected $locale;
    /** @var array */
    protected $keys;
    /** @var array */
    protected $fieldsToUpdate;
    /** @var array */
    protected $fieldNames;
    /** @var string */
    protected $domain;
    public function __construct($locale)
    {
    }
    public function getFieldValue($field, $value)
    {
    }
    public function getKeys()
    {
    }
    public function getFieldsToUpdate()
    {
    }
    protected function init()
    {
    }
    public function slugify($string)
    {
    }
    public function getDomain()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class RiskLangCore extends \DataLang
{
    // Don't replace domain in init() with $this->domain for translation parsing
    protected $domain = 'Admin.Orderscustomers.Feature';
    protected $keys = array('id_risk');
    protected $fieldsToUpdate = array('name');
    protected function init()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class ConfigurationLangCore extends \DataLang
{
    // Don't replace domain in init() with $this->domain for translation parsing
    protected $domain = 'Admin.Shopparameters.Feature';
    protected $keys = array('id_configuration');
    protected $fieldsToUpdate = array('value');
    protected function init()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class GenderLangCore extends \DataLang
{
    // Don't replace domain in init() with $this->domain for translation parsing
    protected $domain = 'Admin.Shopparameters.Feature';
    protected $keys = array('id_gender');
    protected $fieldsToUpdate = array('name');
    protected function init()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class AttributeLangCore extends \DataLang
{
    // Don't replace domain in init() with $this->domain for translation parsing
    protected $domain = 'Shop.Demo.Catalog';
    protected $keys = array('id_attribute');
    protected $fieldsToUpdate = array('name');
    protected function init()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class ThemeLangCore extends \DataLang
{
    // Don't replace domain in init() with $this->domain for translation parsing
    protected $domain = 'Admin.Design.Feature';
    protected $keys = array();
    protected $fieldsToUpdate = array('name', 'description');
    protected function init()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class CarrierLangCore extends \DataLang
{
    // Don't replace domain in init() with $this->domain for translation parsing
    protected $domain = 'Admin.Shipping.Feature';
    protected $keys = array('id_carrier', 'id_shop');
    protected $fieldsToUpdate = array('delay');
    protected function init()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class CategoryLangCore extends \DataLang
{
    // Don't replace domain in init() with $this->domain for translation parsing
    protected $domain = 'Admin.Catalog.Feature';
    protected $keys = array('id_category', 'id_shop');
    protected $fieldsToUpdate = array('name', 'link_rewrite');
    protected function init()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class OrderStateLangCore extends \DataLang
{
    // Don't replace domain in init() with $this->domain for translation parsing
    protected $domain = 'Admin.Orderscustomers.Feature';
    protected $keys = array('id_order_state');
    protected $fieldsToUpdate = array('name');
    protected function init()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class FeatureValueLangCore extends \DataLang
{
    // Don't replace domain in init() with $this->domain for translation parsing
    protected $domain = 'Shop.Demo.Catalog';
    protected $keys = array('id_feature_value');
    protected $fieldsToUpdate = array('value');
    protected function init()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class ContactLangCore extends \DataLang
{
    // Don't replace domain in init() with $this->domain for translation parsing
    protected $domain = 'Admin.Shopparameters.Feature';
    protected $keys = array('id_contact');
    protected $fieldsToUpdate = array('name', 'description');
    protected function init()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class SupplyOrderStateLangCore extends \DataLang
{
    // Don't replace domain in init() with $this->domain for translation parsing
    protected $domain = 'Admin.Orderscustomers.Feature';
    protected $keys = array('id_supply_order_state');
    protected $fieldsToUpdate = array('name');
    protected function init()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class OrderMessageLangCore extends \DataLang
{
    // Don't replace domain in init() with $this->domain for translation parsing
    protected $domain = 'Admin.Orderscustomers.Feature';
    protected $keys = array('id_order_message');
    protected $fieldsToUpdate = array('name', 'message');
    protected function init()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class QuickAccessLangCore extends \DataLang
{
    // Don't replace domain in init() with $this->domain for translation parsing
    protected $domain = 'Admin.Navigation.Header';
    protected $keys = array('id_quick_access');
    protected $fieldsToUpdate = array('name');
    protected function init()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class CmsCategoryLangCore extends \DataLang
{
    // Don't replace domain in init() with $this->domain for translation parsing
    protected $domain = 'Admin.Catalog.Feature';
    protected $keys = array('id_cms_category', 'id_shop');
    protected $fieldsToUpdate = array('name', 'link_rewrite');
    protected function init()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class ProfileLangCore extends \DataLang
{
    // Don't replace domain in init() with $this->domain for translation parsing
    protected $domain = 'Admin.Advparameters.Feature';
    protected $keys = array('id_profile');
    protected $fieldsToUpdate = array('name');
    protected function init()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class AttributeGroupLangCore extends \DataLang
{
    // Don't replace domain in init() with $this->domain for translation parsing
    protected $domain = 'Shop.Demo.Catalog';
    protected $keys = array('id_attribute_group');
    protected $fieldsToUpdate = array('name', 'public_name');
    protected function init()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class StockMvtReasonLangCore extends \DataLang
{
    // Don't replace domain in init() with $this->domain for translation parsing
    protected $domain = 'Admin.Catalog.Feature';
    protected $keys = array('id_stock_mvt_reason');
    protected $fieldsToUpdate = array('name');
    protected function init()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class MetaLangCore extends \DataLang
{
    // Don't replace domain in init() with $this->domain for translation parsing
    protected $domain = 'Shop.Navigation';
    protected $keys = array('id_meta', 'id_shop');
    protected $fieldsToUpdate = array('title', 'description', 'url_rewrite');
    protected function init()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class TabLangCore extends \DataLang
{
    // Don't replace domain in init() with $this->domain for translation parsing
    protected $domain = 'Admin.Navigation.Menu';
    protected $keys = array('id_tab');
    protected $fieldsToUpdate = array('name');
    protected function init()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class GroupLangCore extends \DataLang
{
    // Don't replace domain in init() with $this->domain for translation parsing
    protected $domain = 'Admin.Shopparameters.Feature';
    protected $keys = array('id_group');
    protected $fieldsToUpdate = array('name');
    protected function init()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class FeatureLangCore extends \DataLang
{
    // Don't replace domain in init() with $this->domain for translation parsing
    protected $domain = 'Shop.Demo.Catalog';
    protected $keys = array('id_feature');
    protected $fieldsToUpdate = array('name');
    protected function init()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class OrderReturnStateLangCore extends \DataLang
{
    // Don't replace domain in init() with $this->domain for translation parsing
    protected $domain = 'Admin.Orderscustomers.Feature';
    protected $keys = array('id_order_return_state');
    protected $fieldsToUpdate = array('name');
    protected function init()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
interface WebserviceOutputInterface
{
    public function __construct($languages = array());
    public function setWsUrl($url);
    public function getWsUrl();
    public function getContentType();
    public function setSchemaToDisplay($schema);
    public function getSchemaToDisplay();
    public function renderField($field);
    public function renderNodeHeader($obj, $params, $more_attr = \null);
    public function renderNodeFooter($obj, $params);
    public function renderAssociationHeader($obj, $params, $assoc_name);
    public function renderAssociationFooter($obj, $params, $assoc_name);
    public function overrideContent($content);
    public function renderErrorsHeader();
    public function renderErrorsFooter();
    public function renderErrors($message, $code = \null);
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
interface WebserviceSpecificManagementInterface
{
    public function setObjectOutput(\WebserviceOutputBuilderCore $obj);
    public function getObjectOutput();
    public function setWsObject(\WebserviceRequestCore $obj);
    public function getWsObject();
    public function manage();
    /**
     * This must be return an array with specific values as WebserviceRequest expects.
     *
     * @return array
     */
    public function getContent();
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class WebserviceSpecificManagementSearch implements \WebserviceSpecificManagementInterface
{
    /** @var WebserviceOutputBuilder */
    protected $objOutput;
    protected $output;
    /** @var WebserviceRequest */
    protected $wsObject;
    /* ------------------------------------------------
     * GETTERS & SETTERS
     * ------------------------------------------------ */
    /**
     * @param WebserviceOutputBuilderCore $obj
     * @return WebserviceSpecificManagementInterface
     */
    public function setObjectOutput(\WebserviceOutputBuilderCore $obj)
    {
    }
    public function setWsObject(\WebserviceRequestCore $obj)
    {
    }
    public function getWsObject()
    {
    }
    public function getObjectOutput()
    {
    }
    public function setUrlSegment($segments)
    {
    }
    public function getUrlSegment()
    {
    }
    /**
     * Management of search
     *
     */
    public function manage()
    {
    }
    /**
     * This must be return a string with specific values as WebserviceRequest expects.
     *
     * @return string
     */
    public function getContent()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class WebserviceOutputJSON implements \WebserviceOutputInterface
{
    public $docUrl = '';
    public $languages = array();
    protected $wsUrl;
    protected $schemaToDisplay;
    /**
     * Current entity
     */
    protected $currentEntity;
    /**
     * Current association
     */
    protected $currentAssociatedEntity;
    /**
     * Json content
     */
    protected $content = array();
    public function __construct($languages = array())
    {
    }
    public function setSchemaToDisplay($schema)
    {
    }
    public function getSchemaToDisplay()
    {
    }
    public function setWsUrl($url)
    {
    }
    public function getWsUrl()
    {
    }
    public function getContentType()
    {
    }
    public function renderErrors($message, $code = \null)
    {
    }
    public function renderField($field)
    {
    }
    public function renderNodeHeader($node_name, $params, $more_attr = \null, $has_child = \true)
    {
    }
    public function getNodeName($params)
    {
    }
    public function renderNodeFooter($node_name, $params)
    {
    }
    public function overrideContent($content)
    {
    }
    public function setLanguages($languages)
    {
    }
    public function renderAssociationWrapperHeader()
    {
    }
    public function renderAssociationWrapperFooter()
    {
    }
    public function renderAssociationHeader($obj, $params, $assoc_name, $closed_tags = \false)
    {
    }
    public function renderAssociationFooter($obj, $params, $assoc_name)
    {
    }
    public function renderErrorsHeader()
    {
    }
    public function renderErrorsFooter()
    {
    }
    public function renderAssociationField($field)
    {
    }
    public function renderi18nField($field)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class WebserviceSpecificManagementImages implements \WebserviceSpecificManagementInterface
{
    /** @var WebserviceOutputBuilder */
    protected $objOutput;
    protected $output;
    /** @var WebserviceRequest */
    protected $wsObject;
    /**
     * @var string The extension of the image to display
     */
    protected $imgExtension;
    /**
     * @var array The type of images (general, categories, manufacturers, suppliers, stores...)
     */
    protected $imageTypes = array('general' => array('header' => array(), 'mail' => array(), 'invoice' => array(), 'store_icon' => array()), 'products' => array(), 'categories' => array(), 'manufacturers' => array(), 'suppliers' => array(), 'stores' => array(), 'customizations' => array());
    /**
     * @var string The image type (product, category, general,...)
     */
    protected $imageType = \null;
    /**
     * @var int The maximum size supported when uploading images, in bytes
     */
    protected $imgMaxUploadSize = 3000000;
    /**
     * @var array The list of supported mime types
     */
    protected $acceptedImgMimeTypes = array('image/gif', 'image/jpg', 'image/jpeg', 'image/pjpeg', 'image/png', 'image/x-png');
    /**
     * @var string The product image declination id
     */
    protected $productImageDeclinationId = \null;
    /**
     * @var bool If the current image management has to manage a "default" image (i.e. "No product available")
     */
    protected $defaultImage = \false;
    /**
     * @var string The file path of the image to display. If not null, the image will be displayed, even if the XML output was not empty
     */
    public $imgToDisplay = \null;
    public $imageResource = \null;
    /* ------------------------------------------------
     * GETTERS & SETTERS
     * ------------------------------------------------ */
    /**
     * @param WebserviceOutputBuilderCore $obj
     * @return WebserviceSpecificManagementInterface
     */
    public function setObjectOutput(\WebserviceOutputBuilderCore $obj)
    {
    }
    public function getObjectOutput()
    {
    }
    public function setWsObject(\WebserviceRequestCore $obj)
    {
    }
    public function getWsObject()
    {
    }
    /*
     * This method need $this->imgToDisplay to be set if output don't needs to be XML
     */
    public function getContent()
    {
    }
    public function manage()
    {
    }
    /**
     * Management of images URL segment
     *
     * @return bool
     *
     * @throws WebserviceException
     */
    protected function manageImages()
    {
    }
    /**
     * Management of general images
     *
     * @return bool
     *
     * @throws WebserviceException
     */
    protected function manageGeneralImages()
    {
    }
    protected function manageDefaultDeclinatedImages($directory, $normal_image_sizes)
    {
    }
    protected function manageListDeclinatedImages($directory, $normal_image_sizes)
    {
    }
    protected function manageEntityDeclinatedImages($directory, $normal_image_sizes)
    {
    }
    /**
     * Management of normal images (as categories, suppliers, manufacturers and stores)
     *
     * @param string $directory the file path of the root of the images folder type
     * @return bool
     */
    protected function manageDeclinatedImages($directory)
    {
    }
    protected function manageProductImages()
    {
    }
    protected function getCustomizations()
    {
    }
    protected function manageCustomizationImages()
    {
    }
    /**
     * Management of normal images CRUD
     *
     * @param bool $filename_exists if the filename exists
     * @param string $filename the image path
     * @param array $image_sizes The
     * @param string $directory
     * @return bool
     *
     * @throws WebserviceException
     */
    protected function manageDeclinatedImagesCRUD($filename_exists, $filename, $image_sizes, $directory)
    {
    }
    /**
     * 	Delete the image on disk
     *
     * @param string $file_path the image file path
     * @param array $image_types The different sizes
     * @param string $parent_path The parent path
     * @return bool
     */
    protected function deleteImageOnDisk($file_path, $image_types = \null, $parent_path = \null)
    {
    }
    /**
     * Write the image on disk
     *
     * @param string $base_path
     * @param string $new_path
     * @param int $dest_width
     * @param int $dest_height
     * @param array $image_types
     * @param string $parent_path
     * @return string
     *
     * @throws WebserviceException
     */
    protected function writeImageOnDisk($base_path, $new_path, $dest_width = \null, $dest_height = \null, $image_types = \null, $parent_path = \null)
    {
    }
    /**
     * Write the posted image on disk
     *
     * @param string $reception_path
     * @param int $dest_width
     * @param int $dest_height
     * @param array $image_types
     * @param string $parent_path
     * @return bool
     *
     * @throws WebserviceException
     */
    protected function writePostedImageOnDisk($reception_path, $dest_width = \null, $dest_height = \null, $image_types = \null, $parent_path = \null)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class WebserviceKey extends \ObjectModel
{
    /** @var string Key */
    public $key;
    /** @var bool Webservice Account statuts */
    public $active = \true;
    /** @var string Webservice Account description */
    public $description;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'webservice_account', 'primary' => 'id_webservice_account', 'fields' => array('active' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'key' => array('type' => self::TYPE_STRING, 'required' => \true, 'size' => 32), 'description' => array('type' => self::TYPE_STRING)));
    public function add($autodate = \true, $nullValues = \false)
    {
    }
    public static function keyExists($key)
    {
    }
    public function delete()
    {
    }
    public function deleteAssociations()
    {
    }
    public static function getPermissionForAccount($auth_key)
    {
    }
    public static function isKeyActive($auth_key)
    {
    }
    public static function getClassFromKey($auth_key)
    {
    }
    public static function setPermissionForAccount($id_account, $permissions_to_set)
    {
    }
}
class WebserviceRequest
{
    const HTTP_GET = 1;
    const HTTP_POST = 2;
    const HTTP_PUT = 4;
    protected $_available_languages = \null;
    /**
     * Errors triggered at execution
     * @var array
     */
    public $errors = array();
    /**
     * Set if return should display content or not
     * @var bool
     */
    protected $_outputEnabled = \true;
    /**
     * Set if the management is specific or if it is classic (entity management)
     * @var WebserviceSpecificManagementImages|WebserviceSpecificManagementSearch|false
     */
    protected $objectSpecificManagement = \false;
    /**
     * Base PrestaShop webservice URL
     * @var string
     */
    public $wsUrl;
    /**
     * PrestaShop Webservice Documentation URL
     * @var string
     */
    protected $_docUrl = 'http://doc.prestashop.com/display/PS16/Using+the+PrestaShop+Web+Service';
    /**
     * Set if the authentication key was checked
     * @var bool
     */
    protected $_authenticated = \false;
    /**
     * HTTP Method to support
     * @var string
     */
    public $method;
    /**
     * The segment of the URL
     * @var array
     */
    public $urlSegment = array();
    /**
     * The segment list of the URL after the "api" segment
     * @var array
     */
    public $urlFragments = array();
    /**
     * The time in microseconds of the start of the execution of the web service request
     * @var int
     */
    protected $_startTime = 0;
    /**
     * The list of each resources manageable via web service
     * @var array
     */
    public $resourceList;
    /**
     * The configuration parameters of the current resource
     * @var array
     */
    public $resourceConfiguration;
    /**
     * The permissions for the current key
     * @var array
     */
    public $keyPermissions;
    /**
     * The XML string to display if web service call succeed
     * @var string
     */
    protected $specificOutput = '';
    /**
     * The list of objects to display
     * @var array
     */
    public $objects;
    /**
     * The current object to support, it extends the PrestaShop ObjectModel
     * @var ObjectModel
     */
    protected $_object;
    /**
     * The schema to display.
     * If null, no schema have to be displayed and normal management has to be performed
     * @var string
     */
    public $schemaToDisplay;
    /**
     * The fields to display. These fields will be displayed when retrieving objects
     * @var string
     */
    public $fieldsToDisplay = 'minimum';
    /**
     * If we are in PUT or POST case, we use this attribute to store the xml string value during process
     * @var string
     */
    protected $_inputXml;
    /**
     * Object instance for singleton
     * @var WebserviceRequest
     */
    protected static $_instance;
    /**
     * Key used for authentication
     * @var string
     */
    protected $_key;
    /**
     * This is used to have a deeper tree diagram.
     * @var int
     */
    public $depth = 0;
    /**
     * Name of the output format
     * @var string
     */
    protected $outputFormat = 'xml';
    /**
     * The object to build the output.
     * @var WebserviceOutputBuilder
     */
    protected $objOutput;
    /**
     * Save the class name for override used in getInstance()
     * @var string
     */
    public static $ws_current_classname;
    public static $shopIDs;
    public function getOutputEnabled()
    {
    }
    public function setOutputEnabled($bool)
    {
    }
    /**
     * Get WebserviceRequest object instance (Singleton)
     *
     * @return object WebserviceRequest instance
     */
    public static function getInstance()
    {
    }
    /*
    protected function getOutputObject($type)
    {
        switch ($type)
        {
            case 'XML' :
            default :
                $obj_render = new WebserviceOutputXML();
                break;
        }
        return $obj_render;
    }
    */
    protected function getOutputObject($type)
    {
    }
    public static function getResources()
    {
    }
    /* @todo Check how get parameters */
    /* @todo : set this method out */
    /**
     * This method is used for calculate the price for products on the output details
     *
     * @param $field
     * @param $entity_object
     * @param $ws_params
     * @return array field parameters.
     */
    public function getPriceForProduct($field, $entity_object, $ws_params)
    {
    }
    /* @todo : set this method out */
    /**
     * This method is used for calculate the price for products on a virtual fields
     *
     * @param $entity_object
     * @param array $parameters
     * @return array
     */
    public function specificPriceForProduct($entity_object, $parameters)
    {
    }
    public function specificPriceCalculation($parameters)
    {
    }
    /* @todo : set this method out */
    /**
     * This method is used for calculate the price for products on a virtual fields
     *
     * @param $entity_object
     * @param array $parameters
     * @return array
     */
    public function specificPriceForCombination($entity_object, $parameters)
    {
    }
    /**
     * Start Webservice request
     * 	Check webservice activation
     * 	Check autentication
     * 	Check resource
     * 	Check HTTP Method
     * 	Execute the action
     * 	Display the result
     *
     * @param string $key
     * @param string $method
     * @param string $url
     * @param string $params
     * @param string $inputXml
     *
     * @return array Returns an array of results (headers, content, type of resource...)
     */
    public function fetch($key, $method, $url, $params, $bad_class_name, $inputXml = \null)
    {
    }
    protected function webserviceChecks()
    {
    }
    /**
     * Set a webservice error
     *
     * @param int $status
     * @param string $label
     * @param int $code
     * @return void
     */
    public function setError($status, $label, $code)
    {
    }
    /**
     * Set a webservice error and propose a new value near from the available values
     *
     * @param int $num
     * @param string $label
     * @param array $value
     * @param array $values
     * @param int $code
     * @return void
     */
    public function setErrorDidYouMean($num, $label, $value, $available_values, $code)
    {
    }
    /**
     * Return the nearest value picked in the values list
     *
     * @param string $input
     * @param array $words
     * @return string
     */
    protected function getClosest($input, $words)
    {
    }
    /**
     * Used to replace the default PHP error handler, in order to display PHP errors in a XML format
     *
     * @param string $errno contains the level of the error raised, as an integer
     * @param array $errstr contains the error message, as a string
     * @param array $errfile errfile, which contains the filename that the error was raised in, as a string
     * @param array $errline errline, which contains the line number the error was raised at, as an integer
     * @return bool Always return true to avoid the default PHP error handler
     */
    public function webserviceErrorHandler($errno, $errstr, $errfile, $errline)
    {
    }
    /**
     * Check if there is one or more error
     *
     * @return bool
     */
    protected function hasErrors()
    {
    }
    /**
     * Check request authentication
     *
     * @return bool
     */
    protected function authenticate()
    {
    }
    /**
     * Check webservice activation
     *
     * @return bool
     */
    protected function isActivated()
    {
    }
    protected function shopHasRight($key)
    {
    }
    protected function shopExists($params)
    {
    }
    protected function groupShopExists($params)
    {
    }
    /**
     * Check HTTP method
     *
     * @return bool
     */
    protected function checkHTTPMethod()
    {
    }
    /**
     * Check resource validity
     *
     * @return bool
     */
    protected function checkResource()
    {
    }
    protected function setObjects()
    {
    }
    protected function parseDisplayFields($str)
    {
    }
    public function setFieldsToDisplay()
    {
    }
    protected function manageFilters()
    {
    }
    public function getFilteredObjectList()
    {
    }
    public function getFilteredObjectDetails()
    {
    }
    /**
     * Execute GET and HEAD requests
     *
     * Build filter
     * Build fields display
     * Build sort
     * Build limit
     *
     * @return bool
     */
    public function executeEntityGetAndHead()
    {
    }
    /**
     * Execute POST method on a PrestaShop entity
     *
     * @return bool
     */
    protected function executeEntityPost()
    {
    }
    /**
     * Execute PUT method on a PrestaShop entity
     *
     * @return bool
     */
    protected function executeEntityPut()
    {
    }
    /**
     * Execute DELETE method on a PrestaShop entity
     *
     * @return bool
     */
    protected function executeEntityDelete()
    {
    }
    /**
     * save Entity Object from XML
     *
     * @param int $successReturnCode
     * @return bool
     */
    protected function saveEntityFromXml($successReturnCode)
    {
    }
    /**
     * get SQL retrieve Filter
     *
     * @param string $sqlId
     * @param string $filterValue
     * @param string $tableAlias = 'main.'
     * @return string
     */
    protected function getSQLRetrieveFilter($sqlId, $filterValue, $tableAlias = 'main.')
    {
    }
    public function filterLanguage()
    {
    }
    /**
     * Thanks to the (WebserviceOutputBuilder) WebserviceKey::objOutput
     * Method build the output depend on the WebserviceRequest::outputFormat
     * and set HTTP header parameters.
     *
     * @return array with displaying informations (used in the dispatcher).
     */
    protected function returnOutput()
    {
    }
    public static function getallheaders()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @todo : Create typed exception for more finer errors check
 */
class WebserviceOutputBuilder
{
    /**
     * @var int constant
     */
    const VIEW_LIST = 1;
    const VIEW_DETAILS = 2;
    protected $wsUrl;
    protected $output;
    /** @var WebserviceOutputInterface|WebserviceOutputXML|WebserviceOutputJSON */
    public $objectRender;
    protected $wsResource;
    protected $depth = 0;
    protected $schemaToDisplay;
    protected $fieldsToDisplay;
    protected $specificFields = array();
    protected $virtualFields = array();
    protected $statusInt;
    protected $wsParamOverrides;
    protected static $_cache_ws_parameters = array();
    /* Header properties */
    protected $headerParams = array('Access-Time' => 0, 'X-Powered-By' => 0, 'PSWS-Version' => 0, 'Content-Type' => 0);
    /**
     * @var string Status header sent at return
     */
    protected $status;
    public function __construct($ws_url)
    {
    }
    /**
     * Set the render object for set the output format.
     * Set the Content-type for the http header.
     *
     * @param WebserviceOutputInterface $obj_render
     * @throw WebserviceException if the object render is not an instance of WebserviceOutputInterface
     *
     * @return WebserviceOutputBuilder
     * @throws WebserviceException
     */
    public function setObjectRender(\WebserviceOutputInterface $obj_render)
    {
    }
    /**
     * getter
     * @return WebserviceOutputInterface
     */
    public function getObjectRender()
    {
    }
    /**
     * Need to have the resource list to get the class name for an entity,
     * To build
     *
     * @param array $resources
     *
     * @return WebserviceOutputBuilder
     */
    public function setWsResources($resources)
    {
    }
    /**
     * This method return an array with each http header params for a content.
     * This check each required params.
     *
     * If this method is overrided don't forget to check required specific params (for xml etc...)
     *
     * @return array
     */
    public function buildHeader()
    {
    }
    /**
     * @param string $key The normalized key expected for an http response
     * @param string $value
     *
     * @return WebserviceOutputBuilder
     * @throws WebserviceException If the key or the value are corrupted (use Validate::isCleanHtml method)
     */
    public function setHeaderParams($key, $value)
    {
    }
    /**
     * @param null|string $key if null get all header params otherwise the params specified by the key
     * @throw WebserviceException if the key is corrupted (use Validate::isCleanHtml method)
     * @throw WebserviceException if the asked key does'nt exists.
     * @return array|string
     */
    public function getHeaderParams($key = \null)
    {
    }
    /**
     * Delete all Header parameters previously set.
     *
     * @return WebserviceOutputBuilder
     */
    public function resetHeaderParams()
    {
    }
    /**
     * @return string the normalized status for http request
     */
    public function getStatus()
    {
    }
    public function getStatusInt()
    {
    }
    /**
     * Set the return header status
     *
     * @param int $num the Http status code
     * @return void
     */
    public function setStatus($num)
    {
    }
    /**
     * Build errors output using an error array
     *
     * @param array $errors
     * @return string output in the format specified by WebserviceOutputBuilder::objectRender
     */
    public function getErrors($errors)
    {
    }
    /**
     * Build the resource list in the output format specified by WebserviceOutputBuilder::objectRender
     * @param $key_permissions
     * @return string
     */
    public function getResourcesList($key_permissions)
    {
    }
    public function registerOverrideWSParameters($wsrObject, $method)
    {
    }
    /**
     * Method is used for each content type
     * Different content types are :
     * 		- list of entities,
     * 		- tree diagram of entity details (full or minimum),
     * 		- schema (synopsis & blank),
     *
     * @param array $objects each object created by entity asked
     * 		  @see WebserviceOutputBuilder::executeEntityGetAndHead
     * @param null|string $schema_to_display if null display the entities list or entity details.
     * @param string|array $fields_to_display the fields allow for the output
     * @param int $depth depth for the tree diagram output.
     * @param int $type_of_view use the 2 constants WebserviceOutputBuilder::VIEW_LIST WebserviceOutputBuilder::VIEW_DETAILS
     * @return string in the output format specified by WebserviceOutputBuilder::objectRender
     */
    public function getContent($objects, $schema_to_display = \null, $fields_to_display = 'minimum', $depth = 0, $type_of_view = self::VIEW_LIST, $override = \true)
    {
    }
    /**
     * Create the tree diagram with no details
     *
     * @param ObjectModel $object create by the entity
     * @param int $depth the depth for the tree diagram
     * @return string
     */
    public function renderEntityMinimum($object, $depth)
    {
    }
    /**
     * Build a schema blank or synopsis
     *
     * @param ObjectModel $object create by the entity
     * @param array $ws_params webserviceParams from the entity
     * @return string
     */
    protected function renderSchema($object, $ws_params)
    {
    }
    /**
     * Build the entity detail.
     *
     * @param ObjectModel $object create by the entity
     * @param int $depth the depth for the tree diagram
     * @return string
     */
    public function renderEntity($object, $depth)
    {
    }
    /**
     * Build a field and use recursivity depend on the depth parameter.
     *
     * @param ObjectModel $object create by the entity
     * @param array $ws_params webserviceParams from the entity
     * @param string $field_name
     * @param array $field
     * @param int $depth
     * @return string
     */
    protected function renderField($object, $ws_params, $field_name, $field, $depth)
    {
    }
    /**
     *
     *
     * @param $object
     * @param $depth
     * @param $associations
     * @param $ws_params
     * @return string
     */
    protected function renderAssociations($object, $depth, $associations, $ws_params)
    {
    }
    protected function renderFlatAssociation($object, $depth, $assoc_name, $resource_name, $fields_assoc, $object_assoc, $parent_details)
    {
    }
    public function setIndent($depth)
    {
    }
    public function getSynopsisDetails($field)
    {
    }
    /**
     * @param string|object $object
     * @param string $method
     * @param $field_name
     * @param $entity_name
     *
     * @return WebserviceOutputBuilder
     * @throws Exception
     * @throws WebserviceException
     */
    public function setSpecificField($object, $method, $field_name, $entity_name)
    {
    }
    protected function validateObjectAndMethod($object, $method)
    {
    }
    public function getSpecificField()
    {
    }
    protected function overrideSpecificField($entity_name, $field_name, $field, $entity_object, $ws_params)
    {
    }
    public function setVirtualField($object, $method, $entity_name, $parameters)
    {
    }
    public function getVirtualFields()
    {
    }
    public function addVirtualFields($entity_name, $entity_object)
    {
    }
    public function setFieldsToDisplay($fields)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class WebserviceException extends \Exception
{
    protected $status;
    protected $wrong_value;
    protected $available_values;
    protected $type;
    const SIMPLE = 0;
    const DID_YOU_MEAN = 1;
    public function __construct($message, $code)
    {
    }
    public function getType()
    {
    }
    public function setType($type)
    {
    }
    public function setStatus($status)
    {
    }
    public function getStatus()
    {
    }
    public function getWrongValue()
    {
    }
    public function setDidYouMean($wrong_value, $available_values)
    {
    }
    public function getAvailableValues()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class WebserviceOutputXML implements \WebserviceOutputInterface
{
    public $docUrl = '';
    public $languages = array();
    protected $wsUrl;
    protected $schemaToDisplay;
    public function setSchemaToDisplay($schema)
    {
    }
    public function getSchemaToDisplay()
    {
    }
    public function setWsUrl($url)
    {
    }
    public function getWsUrl()
    {
    }
    public function getContentType()
    {
    }
    public function __construct($languages = array())
    {
    }
    public function setLanguages($languages)
    {
    }
    public function renderErrorsHeader()
    {
    }
    public function renderErrorsFooter()
    {
    }
    public function renderErrors($message, $code = \null)
    {
    }
    public function renderField($field)
    {
    }
    public function renderNodeHeader($node_name, $params, $more_attr = \null, $has_child = \true)
    {
    }
    public function getNodeName($params)
    {
    }
    public function renderNodeFooter($node_name, $params)
    {
    }
    public function overrideContent($content)
    {
    }
    public function renderAssociationWrapperHeader()
    {
    }
    public function renderAssociationWrapperFooter()
    {
    }
    public function renderAssociationHeader($obj, $params, $assoc_name, $closed_tags = \false)
    {
    }
    public function renderAssociationFooter($obj, $params, $assoc_name)
    {
    }
}
class LegacyCompilerPass implements \Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface
{
    /**
     * Add legacy services that need to be built using Context::getContext().
     *
     * @param ContainerBuilder $container
     */
    public function process(\Symfony\Component\DependencyInjection\ContainerBuilder $container)
    {
    }
}
/**
 * class Context
 *
 * @since 1.5.0.1
 */
class Context
{
    /* @var Context */
    protected static $instance;
    /** @var Cart */
    public $cart;
    /** @var Customer */
    public $customer;
    /** @var Cookie */
    public $cookie;
    /** @var Link */
    public $link;
    /** @var Country */
    public $country;
    /** @var Employee */
    public $employee;
    /** @var AdminController|FrontController */
    public $controller;
    /** @var string $override_controller_name_for_translations */
    public $override_controller_name_for_translations;
    /** @var Language */
    public $language;
    /** @var Currency */
    public $currency;
    /** @var Tab */
    public $tab;
    /** @var Shop */
    public $shop;
    /** @var Smarty */
    public $smarty;
    /** @var \Mobile_Detect */
    public $mobile_detect;
    /** @var int */
    public $mode;
    /** @var Translator */
    protected $translator = \null;
    /**
     * Mobile device of the customer
     *
     * @var bool|null
     */
    protected $mobile_device = \null;
    /** @var bool|null */
    protected $is_mobile = \null;
    /** @var bool|null */
    protected $is_tablet = \null;
    /** @var int */
    const DEVICE_COMPUTER = 1;
    /** @var int */
    const DEVICE_TABLET = 2;
    /** @var int */
    const DEVICE_MOBILE = 4;
    /** @var int */
    const MODE_STD = 1;
    /** @var int */
    const MODE_STD_CONTRIB = 2;
    /** @var int */
    const MODE_HOST_CONTRIB = 4;
    /** @var int */
    const MODE_HOST = 8;
    /**
     * Sets Mobile_Detect tool object
     *
     * @return Mobile_Detect
     */
    public function getMobileDetect()
    {
    }
    /**
     * Checks if visitor's device is a mobile device
     *
     * @return bool
     */
    public function isMobile()
    {
    }
    /**
     * Checks if visitor's device is a tablet device
     *
     * @return bool
     */
    public function isTablet()
    {
    }
    /**
     * Sets mobile_device context variable
     *
     * @return bool
     */
    public function getMobileDevice()
    {
    }
    /**
     * Returns mobile device type
     *
     * @return int
     */
    public function getDevice()
    {
    }
    /**
     * Checks if mobile context is possible
     *
     * @return bool
     * @throws PrestaShopException
     */
    protected function checkMobileContext()
    {
    }
    /**
     * Get a singleton instance of Context object
     *
     * @return Context
     */
    public static function getContext()
    {
    }
    /**
     * @param $testInstance Context
     * Unit testing purpose only
     */
    public static function setInstanceForTesting($testInstance)
    {
    }
    /**
     * Unit testing purpose only
     */
    public static function deleteTestingInstance()
    {
    }
    /**
     * Clone current context object
     *
     * @return Context
     */
    public function cloneContext()
    {
    }
    /**
     * Update context after customer login
     * @param Customer $customer Created customer
     */
    public function updateCustomer(\Customer $customer)
    {
    }
    /**
     *
     * @return Translator
     */
    public function getTranslator()
    {
    }
    /**
     * @return array
     */
    protected function getTranslationResourcesDirectories()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class CMSRole
 */
class CMSRole extends \ObjectModel
{
    /** @var string name */
    public $name;
    /** @var integer id_cms */
    public $id_cms;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'cms_role', 'primary' => 'id_cms_role', 'fields' => array('name' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'size' => 50), 'id_cms' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt')));
    /**
     * @return string
     *
     * @since 1.7.0
     */
    public static function getRepositoryClassName()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Supplier
 */
class Supplier extends \ObjectModel
{
    public $id;
    /** @var int supplier ID */
    public $id_supplier;
    /** @var string Name */
    public $name;
    /** @var string A short description for the discount */
    public $description;
    /** @var string Object creation date */
    public $date_add;
    /** @var string Object last modification date */
    public $date_upd;
    /** @var string Friendly URL */
    public $link_rewrite;
    /** @var string Meta title */
    public $meta_title;
    /** @var string Meta keywords */
    public $meta_keywords;
    /** @var string Meta description */
    public $meta_description;
    /** @var bool active */
    public $active;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'supplier', 'primary' => 'id_supplier', 'multilang' => \true, 'fields' => array(
        'name' => array('type' => self::TYPE_STRING, 'validate' => 'isCatalogName', 'required' => \true, 'size' => 64),
        'active' => array('type' => self::TYPE_BOOL),
        'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'),
        'date_upd' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'),
        /* Lang fields */
        'description' => array('type' => self::TYPE_HTML, 'lang' => \true, 'validate' => 'isCleanHtml'),
        'meta_title' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'size' => 128),
        'meta_description' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'size' => 255),
        'meta_keywords' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'size' => 255),
    ));
    protected $webserviceParameters = array('fields' => array('link_rewrite' => array('sqlId' => 'link_rewrite')));
    /**
     * SupplierCore constructor.
     *
     * @param null $id
     * @param null $idLang
     */
    public function __construct($id = \null, $idLang = \null)
    {
    }
    public function getLink()
    {
    }
    /**
     * Return suppliers
     *
     * @return array Suppliers
     */
    public static function getSuppliers($getNbProducts = \false, $idLang = 0, $active = \true, $p = \false, $n = \false, $allGroups = \false, $withProduct = \false)
    {
    }
    /**
     * List of suppliers
     *
     * @param int    $idLang Specify the id of the language used
     * @param string $format
     *
     * @return array Suppliers lite tree
     */
    public static function getLiteSuppliersList($idLang = \null, $format = 'default')
    {
    }
    /**
     * Return name from id
     *
     * @param int $id_supplier Supplier ID
     *
     * @return string name
     */
    protected static $cache_name = array();
    public static function getNameById($idSupplier)
    {
    }
    public static function getIdByName($name)
    {
    }
    /**
     * @param      $idSupplier
     * @param      $idLang
     * @param      $p
     * @param      $n
     * @param null $orderBy
     * @param null $orderWay
     * @param bool $getTotal
     * @param bool $active
     * @param bool $activeCategory
     *
     * @return array|bool
     */
    public static function getProducts($idSupplier, $idLang, $p, $n, $orderBy = \null, $orderWay = \null, $getTotal = \false, $active = \true, $activeCategory = \true)
    {
    }
    /**
     * Get Products of this supplier (lite)
     *
     * @param int $idLang Language ID
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public function getProductsLite($idLang)
    {
    }
    /**
     * Tells if a supplier exists
     *
     * @param $idSupplier Supplier id
     *
     * @return bool
     */
    public static function supplierExists($idSupplier)
    {
    }
    /**
     * @see ObjectModel::delete()
     */
    public function delete()
    {
    }
    /**
     * Gets product informations
     *
     * @param int $idSupplier
     * @param int $idProduct
     * @param int $idProductAttribute
     *
     * @return array
     *
     * @since 1.5.0
     */
    public static function getProductInformationsBySupplier($idSupplier, $idProduct, $idProductAttribute = 0)
    {
    }
}
/**
 * class Employee
 */
class Employee extends \ObjectModel
{
    /** @var int $id Employee ID */
    public $id;
    /** @var string Determine employee profile */
    public $id_profile;
    /** @var string employee language */
    public $id_lang;
    /** @var string Lastname */
    public $lastname;
    /** @var string Firstname */
    public $firstname;
    /** @var string e-mail */
    public $email;
    /** @var string Password */
    public $passwd;
    /** @var datetime Password */
    public $last_passwd_gen;
    public $stats_date_from;
    public $stats_date_to;
    public $stats_compare_from;
    public $stats_compare_to;
    public $stats_compare_option = 1;
    public $preselect_date_range;
    /** @var string Display back office background in the specified color */
    public $bo_color;
    public $default_tab;
    /** @var string employee's chosen theme */
    public $bo_theme;
    /** @var string employee's chosen css file */
    public $bo_css = 'admin-theme.css';
    /** @var int employee desired screen width */
    public $bo_width;
    /** @var bool, false */
    public $bo_menu = 1;
    /* Deprecated */
    public $bo_show_screencast = \false;
    /** @var bool Status */
    public $active = 1;
    /** @var bool Optin status */
    public $optin = 1;
    public $remote_addr;
    /* employee notifications */
    public $id_last_order;
    public $id_last_customer_message;
    public $id_last_customer;
    /** @var string Unique token for forgot passsword feature */
    public $reset_password_token;
    /** @var string token validity date for forgot password feature */
    public $reset_password_validity;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'employee', 'primary' => 'id_employee', 'fields' => array('lastname' => array('type' => self::TYPE_STRING, 'validate' => 'isName', 'required' => \true, 'size' => 32), 'firstname' => array('type' => self::TYPE_STRING, 'validate' => 'isName', 'required' => \true, 'size' => 32), 'email' => array('type' => self::TYPE_STRING, 'validate' => 'isEmail', 'required' => \true, 'size' => 128), 'id_lang' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt', 'required' => \true), 'passwd' => array('type' => self::TYPE_STRING, 'validate' => 'isPasswd', 'required' => \true, 'size' => 60), 'last_passwd_gen' => array('type' => self::TYPE_STRING), 'active' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'optin' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'id_profile' => array('type' => self::TYPE_INT, 'validate' => 'isInt', 'required' => \true), 'bo_color' => array('type' => self::TYPE_STRING, 'validate' => 'isColor', 'size' => 32), 'default_tab' => array('type' => self::TYPE_INT, 'validate' => 'isInt'), 'bo_theme' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'size' => 32), 'bo_css' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'size' => 64), 'bo_width' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'), 'bo_menu' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'stats_date_from' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'), 'stats_date_to' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'), 'stats_compare_from' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'), 'stats_compare_to' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'), 'stats_compare_option' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'), 'preselect_date_range' => array('type' => self::TYPE_STRING, 'size' => 32), 'id_last_order' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'), 'id_last_customer_message' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'), 'id_last_customer' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'), 'reset_password_token' => array('type' => self::TYPE_STRING, 'validate' => 'isSha1', 'size' => 40, 'copy_post' => \false), 'reset_password_validity' => array('type' => self::TYPE_DATE, 'validate' => 'isDateOrNull', 'copy_post' => \false)));
    protected $webserviceParameters = array('fields' => array('id_lang' => array('xlink_resource' => 'languages'), 'last_passwd_gen' => array('setter' => \null), 'stats_date_from' => array('setter' => \null), 'stats_date_to' => array('setter' => \null), 'stats_compare_from' => array('setter' => \null), 'stats_compare_to' => array('setter' => \null), 'passwd' => array('setter' => 'setWsPasswd')));
    protected $associated_shops = array();
    /**
     * EmployeeCore constructor.
     *
     * @param int|null $id     Employee ID
     * @param int|null $idLang Language ID
     * @param int|null $idShop Shop ID
     */
    public function __construct($id = \null, $idLang = \null, $idShop = \null)
    {
    }
    /**
     * @see ObjectModel::getFields()
     * @return array
     */
    public function getFields()
    {
    }
    /**
     * Adds current Employee as a new Object to the database
     *
     * @param bool $autoDate   Automatically set `date_upd` and `date_add` columns
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Indicates whether the Employee has been successfully added
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function add($autoDate = \true, $nullValues = \true)
    {
    }
    /**
     * Updates the current object in the database
     *
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Indicates whether the Employee has been successfully updated
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function update($nullValues = \false)
    {
    }
    protected function saveOptin()
    {
    }
    /**
     * Update Employee text direction
     */
    protected function updateTextDirection()
    {
    }
    /**
     * Return list of employees
     *
     * @param bool $activeOnly Filter employee by active status
     *
     * @return array|false Employees or false
     */
    public static function getEmployees($activeOnly = \true)
    {
    }
    /**
     * Return employee instance from its e-mail (optionally check password)
     *
     * @param string $email             e-mail
     * @param string $plaintextPassword Password is also checked if specified
     * @param bool   $activeOnly        Filter employee by active status
     *
     * @return bool|Employee|EmployeeCore Employee instance
     *                                    `false` if not found
     */
    public function getByEmail($email, $plaintextPassword = \null, $activeOnly = \true)
    {
    }
    /**
     * Check if Employee exists
     *
     * @param string $email Employee email
     *
     * @return bool Indicates whether the Employee exists
     */
    public static function employeeExists($email)
    {
    }
    /**
     * Check if employee password is the right one
     *
     * @param string $passwordHash Password
     *
     * @return bool result
     */
    public static function checkPassword($idEmployee, $passwordHash)
    {
    }
    /**
     * Count amount of Employees with the given Profile ID
     *
     * @param int  $idProfile  Profile ID
     * @param bool $activeOnly Only active Employees
     *
     * @return false|null|string
     */
    public static function countProfile($idProfile, $activeOnly = \false)
    {
    }
    /**
     * Check if this Employee is the only SuperAdmin left
     *
     * @return bool Indicates whether this Employee is the last one
     */
    public function isLastAdmin()
    {
    }
    /**
     * Set password
     * (for webservice)
     *
     * @param string $passwd Password
     *
     * @return bool Indicates whether the password was succesfully set
     */
    public function setWsPasswd($passwd)
    {
    }
    /**
     * Check employee informations saved into cookie and return employee validity
     *
     * @return bool employee validity
     */
    public function isLoggedBack()
    {
    }
    /**
     * Logout
     */
    public function logout()
    {
    }
    /**
     * Get favorite Module list
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public function favoriteModulesList()
    {
    }
    /**
     * Check if the employee is associated to a specific shop
     *
     * @param int $idShop
     *
     * @return bool
     *
     * @since 1.5.0
     */
    public function hasAuthOnShop($idShop)
    {
    }
    /**
     * Check if the employee is associated to a specific shop group
     *
     * @param int $id_shop_group ShopGroup ID
     *
     * @return bool
     *
     * @since 1.5.0
     */
    public function hasAuthOnShopGroup($idShopGroup)
    {
    }
    /**
     * Get default id_shop with auth for current employee
     *
     * @return int
     *
     * @since 1.5.0
     */
    public function getDefaultShopID()
    {
    }
    /**
     * Get Employees by Profile
     *
     * @param    int $idProfile  Profile ID
     * @param bool   $activeOnly Only active Employees
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public static function getEmployeesByProfile($idProfile, $activeOnly = \false)
    {
    }
    /**
     * Check if current employee is super administrator
     *
     * @return bool
     */
    public function isSuperAdmin()
    {
    }
    /**
     * Get Employee image
     *
     * @return string Image URL
     */
    public function getImage()
    {
    }
    /**
     * Get last elements for notify
     *
     * @param $element
     *
     * @return int
     */
    public function getLastElementsForNotify($element)
    {
    }
    /**
     * Set last connection date
     *
     * @param int $idEmployee Employee ID
     *
     * @return bool
     */
    public static function setLastConnectionDate($idEmployee)
    {
    }
    /**
     * Fill Reset password unique token with random sha1 and its validity date. For forgot password feature.
     */
    public function stampResetPasswordToken()
    {
    }
    /**
     * Test if a reset password token is present and is recent enough to avoid creating a new one (in case of employee triggering the forgot password link too often).
     */
    public function hasRecentResetPasswordToken()
    {
    }
    /**
     * Returns the valid reset password token if it validity date is > now().
     */
    public function getValidResetPasswordToken()
    {
    }
    /**
     * Delete reset password token data
     */
    public function removeResetPasswordToken()
    {
    }
    /**
     * Is the Employee allowed to do the given action
     *
     * @param $action
     * @param $tab
     *
     * @return bool
     */
    public function can($action, $tab)
    {
    }
}
/**
 * class PhpEncryption for openSSL 1.0.1+.
 */
class PhpEncryption
{
    const ENGINE = 'PhpEncryptionEngine';
    const LEGACY_ENGINE = 'PhpEncryptionLegacyEngine';
    /**
     * PhpEncryptionCore constructor.
     *
     * @param string $hexString A string that only contains hexadecimal characters
     *                          Bother upper and lower case are allowed
     */
    public function __construct($hexString)
    {
    }
    /**
     * Encrypt the plaintext.
     *
     * @param string $plaintext Plaintext
     *
     * @return string Cipher text
     */
    public function encrypt($plaintext)
    {
    }
    /**
     * Decrypt the cipher text.
     *
     * @param string $cipherText Cipher text
     *
     * @return bool|string Plaintext
     *                     `false` if unable to decrypt
     *
     * @throws Exception
     */
    public function decrypt($cipherText)
    {
    }
    /**
     * @param $header
     * @param $bytes
     *
     * @return string
     *
     * @throws \Defuse\Crypto\Exception\EnvironmentIsBrokenException
     */
    public static function saveBytesToChecksummedAsciiSafeString($header, $bytes)
    {
    }
    /**
     * @return string
     * @throws Exception
     *
     */
    public static function createNewRandomKey()
    {
    }
    /**
     * Choose which engine use regarding the OpenSSL cipher methods available.
     */
    public static function resolveEngineToUse()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class FileUploader
{
    protected $allowedExtensions = array();
    /** @var QqUploadedFileXhr|QqUploadedFileForm|false */
    protected $file;
    protected $sizeLimit;
    public function __construct(array $allowedExtensions = array(), $sizeLimit = 10485760)
    {
    }
    protected function toBytes($str)
    {
    }
    /**
     * Returns array('success'=>true) or array('error'=>'error message')
     */
    public function handleUpload()
    {
    }
}
class QqUploadedFileForm
{
    /**
     * Save the file to the specified path
     * @return bool TRUE on success
     */
    public function save()
    {
    }
    public function copyImage($id_product, $id_image, $method = 'auto')
    {
    }
    public function getName()
    {
    }
    public function getSize()
    {
    }
}
/**
 * Handle file uploads via XMLHttpRequest
 */
class QqUploadedFileXhr
{
    /**
     * Save the file to the specified path
     * @return bool TRUE on success
     */
    public function upload($path)
    {
    }
    public function save()
    {
    }
    public function copyImage($id_product, $id_image, $method = 'auto')
    {
    }
    public function getName()
    {
    }
    public function getSize()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class ConfigurationTest
{
    public static $test_files = array('/classes/log/index.php', '/classes/cache/index.php', '/config/index.php', '/controllers/admin/AdminLoginController.php', '/download/index.php', '/js/tools.js', '/js/jquery/plugins/fancybox/jquery.fancybox.js', '/localization/fr.xml', '/mails/index.php', '/modules/index.php', '/override/controllers/front/index.php', '/pdf/order-return.tpl', '/translations/export/index.php', '/webservice/dispatcher.php', '/index.php', '/vendor/autoload.php');
    /**
     * getDefaultTests return an array of tests to executes.
     * key are method name, value are parameters (false for no parameter)
     * all path are _PS_ROOT_DIR_ related.
     *
     * @return array
     */
    public static function getDefaultTests()
    {
    }
    /**
     * getDefaultTestsOp return an array of tests to executes.
     * key are method name, value are parameters (false for no parameter).
     *
     * @return array
     */
    public static function getDefaultTestsOp()
    {
    }
    /**
     * run all test defined in $tests.
     *
     * @param array $tests
     *
     * @return array results of tests
     */
    public static function check($tests)
    {
    }
    public static function run($ptr, $arg = 0)
    {
    }
    public static function test_phpversion()
    {
    }
    public static function test_apache_mod_rewrite()
    {
    }
    public static function test_new_phpversion()
    {
    }
    public static function test_mysql_support()
    {
    }
    public static function test_pdo_mysql()
    {
    }
    public static function test_upload()
    {
    }
    public static function test_fopen()
    {
    }
    public static function test_system($funcs)
    {
    }
    public static function test_curl()
    {
    }
    public static function test_gd()
    {
    }
    public static function test_json()
    {
    }
    public static function test_gz()
    {
    }
    public static function test_simplexml()
    {
    }
    public static function test_zip()
    {
    }
    public static function test_fileinfo()
    {
    }
    public static function test_dir($relative_dir, $recursive = \false, &$full_report = \null)
    {
    }
    public static function test_file($file_relative)
    {
    }
    public static function test_config_dir($dir)
    {
    }
    public static function test_sitemap($dir)
    {
    }
    public static function test_root_dir($dir)
    {
    }
    public static function test_log_dir($dir)
    {
    }
    public static function test_admin_dir($dir)
    {
    }
    public static function test_img_dir($dir)
    {
    }
    public static function test_module_dir($dir)
    {
    }
    public static function test_cache_dir($dir)
    {
    }
    public static function test_tools_v2_dir($dir)
    {
    }
    public static function test_cache_v2_dir($dir)
    {
    }
    public static function test_download_dir($dir)
    {
    }
    public static function test_mails_dir($dir)
    {
    }
    public static function test_translations_dir($dir)
    {
    }
    public static function test_config_sf2_dir($dir)
    {
    }
    public static function test_theme_lang_dir($dir)
    {
    }
    public static function test_theme_pdf_lang_dir($dir)
    {
    }
    public static function test_theme_cache_dir($dir)
    {
    }
    public static function test_customizable_products_dir($dir)
    {
    }
    public static function test_virtual_products_dir($dir)
    {
    }
    public static function test_mbstring()
    {
    }
    public static function test_openssl()
    {
    }
    public static function test_sessions()
    {
    }
    public static function test_dom()
    {
    }
    public static function test_files($full = \false)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class CMS
 */
class CMS extends \ObjectModel
{
    /** @var string Name */
    public $id;
    public $id_cms;
    public $meta_title;
    public $meta_description;
    public $meta_keywords;
    public $content;
    public $link_rewrite;
    public $id_cms_category;
    public $position;
    public $indexation;
    public $active;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'cms', 'primary' => 'id_cms', 'multilang' => \true, 'multilang_shop' => \true, 'fields' => array(
        'id_cms_category' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'),
        'position' => array('type' => self::TYPE_INT),
        'indexation' => array('type' => self::TYPE_BOOL),
        'active' => array('type' => self::TYPE_BOOL),
        /* Lang fields */
        'meta_description' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'size' => 255),
        'meta_keywords' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'size' => 255),
        'meta_title' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'required' => \true, 'size' => 128),
        'link_rewrite' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isLinkRewrite', 'required' => \true, 'size' => 128),
        'content' => array('type' => self::TYPE_HTML, 'lang' => \true, 'validate' => 'isCleanHtml', 'size' => 3999999999999),
    ));
    protected $webserviceParameters = array('objectNodeName' => 'content', 'objectsNodeName' => 'content_management_system');
    /**
     * Adds current CMS as a new Object to the database
     *
     * @param bool $autoDate    Automatically set `date_upd` and `date_add` columns
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Indicates whether the CMS has been successfully added
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function add($autoDate = \true, $nullValues = \false)
    {
    }
    /**
     * Updates the current CMS in the database
     *
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Indicates whether the CMS has been successfully updated
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function update($nullValues = \false)
    {
    }
    /**
     * Deletes current CMS from the database
     *
     * @return bool True if delete was successful
     * @throws PrestaShopException
     */
    public function delete()
    {
    }
    /**
     * Get links
     *
     * @param int       $idLang Language ID
     * @param null      $selection
     * @param bool      $active
     * @param Link|null $link
     *
     * @return array
     */
    public static function getLinks($idLang, $selection = \null, $active = \true, \Link $link = \null)
    {
    }
    /**
     * @param null $idLang
     * @param bool $idBlock
     * @param bool $active
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public static function listCms($idLang = \null, $idBlock = \false, $active = \true)
    {
    }
    /**
     * @param $way
     * @param $position
     *
     * @return bool
     */
    public function updatePosition($way, $position)
    {
    }
    /**
     * @param $idCategory
     *
     * @return bool
     */
    public static function cleanPositions($idCategory)
    {
    }
    /**
     * @param $idCategory
     *
     * @return false|null|string
     */
    public static function getLastPosition($idCategory)
    {
    }
    /**
     * @param null $idLang
     * @param null $idCmsCategory
     * @param bool $active
     * @param null $idShop
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public static function getCMSPages($idLang = \null, $idCmsCategory = \null, $active = \true, $idShop = \null)
    {
    }
    /**
     * @param $idCms
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public static function getUrlRewriteInformations($idCms)
    {
    }
    /**
     * @param int      $idCms
     * @param int|null $idLang
     * @param int|null $idShop
     *
     * @return array|bool|null|object
     */
    public static function getCMSContent($idCms, $idLang = \null, $idShop = \null)
    {
    }
    /**
     * Method required for new PrestaShop Core
     *
     * @return string
     *
     * @since 1.7.0
     */
    public static function getRepositoryClassName()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * Class PrestaShopAutoload
 *
 * @since 1.5
 */
class PrestaShopAutoload
{
    /**
     * @var PrestaShopAutoload
     */
    protected static $instance;
    /**
     * @var string Root directory
     */
    protected $root_dir;
    /**
     *  @var array array('classname' => 'path/to/override', 'classnamecore' => 'path/to/class/core')
     */
    public $index = array();
    public $_include_override_path = \true;
    protected static $class_aliases = array('Collection' => 'PrestaShopCollection', 'Autoload' => 'PrestaShopAutoload', 'Backup' => 'PrestaShopBackup', 'Logger' => 'PrestaShopLogger');
    protected function __construct()
    {
    }
    /**
     * Get instance of autoload (singleton)
     *
     * @return PrestaShopAutoload
     */
    public static function getInstance()
    {
    }
    /**
     * Get Class index cache file
     *
     * @return string
     */
    public static function getCacheFileIndex()
    {
    }
    /**
     * Get Namespaced class stub file
     *
     * @return string
     */
    public static function getNamespacedStubFileIndex()
    {
    }
    /**
     * Get Class stub file
     *
     * @return string
     */
    public static function getStubFileIndex()
    {
    }
    /**
     * Retrieve informations about a class in classes index and load it
     *
     * @param string $className
     */
    public function load($className)
    {
    }
    /**
     * Generate classes index
     */
    public function generateIndex()
    {
    }
    /**
     * @param string $filename
     * @param string $content
     *
     * @return bool
     *
     * @see http://api.symfony.com/3.0/Symfony/Component/Filesystem/Filesystem.html#method_dumpFile
     */
    public function dumpFile($filename, $content)
    {
    }
    /**
     * Retrieve recursively all classes in a directory and its subdirectories
     *
     * @param string $path Relativ path from root to the directory
     *
     * @return array
     */
    protected function getClassesFromDir($path, $hostMode = \false)
    {
    }
    /**
     * Get Class path
     *
     * @param string $classname
     *
     * @return null
     */
    public function getClassPath($classname)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Manufacturer
 */
class Manufacturer extends \ObjectModel
{
    public $id;
    /** @var string Name */
    public $name;
    /** @var string A description */
    public $description;
    /** @var string A short description */
    public $short_description;
    /** @var int Address */
    public $id_address;
    /** @var string Object creation date */
    public $date_add;
    /** @var string Object last modification date */
    public $date_upd;
    /** @var string Friendly URL */
    public $link_rewrite;
    /** @var string Meta title */
    public $meta_title;
    /** @var string Meta keywords */
    public $meta_keywords;
    /** @var string Meta description */
    public $meta_description;
    /** @var bool active */
    public $active;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'manufacturer', 'primary' => 'id_manufacturer', 'multilang' => \true, 'fields' => array(
        'name' => array('type' => self::TYPE_STRING, 'validate' => 'isCatalogName', 'required' => \true, 'size' => 64),
        'active' => array('type' => self::TYPE_BOOL),
        'date_add' => array('type' => self::TYPE_DATE),
        'date_upd' => array('type' => self::TYPE_DATE),
        /* Lang fields */
        'description' => array('type' => self::TYPE_HTML, 'lang' => \true, 'validate' => 'isCleanHtml'),
        'short_description' => array('type' => self::TYPE_HTML, 'lang' => \true, 'validate' => 'isCleanHtml'),
        'meta_title' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'size' => 128),
        'meta_description' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'size' => 255),
        'meta_keywords' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName'),
    ));
    protected $webserviceParameters = array('fields' => array('active' => array(), 'link_rewrite' => array('getter' => 'getLink', 'setter' => \false)), 'associations' => array('addresses' => array('resource' => 'address', 'setter' => \false, 'fields' => array('id' => array('xlink_resource' => 'addresses')))));
    /**
     * ManufacturerCore constructor.
     *
     * @param int|null $id
     * @param int|null $idLang
     */
    public function __construct($id = \null, $idLang = \null)
    {
    }
    /**
     * Deletes current Manufacturer from the database
     *
     * @return bool `true` if delete was successful
     * @throws PrestaShopException
     */
    public function delete()
    {
    }
    /**
     * Delete several objects from database
     *
     * return boolean Deletion result
     */
    public function deleteSelection($selection)
    {
    }
    /**
     * Get Manufacturer Address ID
     *
     * @return bool|false|null|string
     */
    protected function getManufacturerAddress()
    {
    }
    /**
     * Return manufacturers
     *
     * @param bool $getNbProducts [optional] return products numbers for each
     * @param int  $idLang        Language ID
     * @param bool $active
     * @param int  $p
     * @param int  $n
     * @param bool $allGroup
     *
     * @return array Manufacturers
     */
    public static function getManufacturers($getNbProducts = \false, $idLang = 0, $active = \true, $p = \false, $n = \false, $allGroup = \false, $group_by = \false, $withProduct = \false)
    {
    }
    /**
     * List of manufacturers
     *
     * @param int $idLang Specify the id of the language used
     *
     * @return array Manufacturers lite tree
     */
    public static function getLiteManufacturersList($idLang = \null, $format = 'default')
    {
    }
    /**
     * Return name from id
     *
     * @param int $id_manufacturer Manufacturer ID
     *
     * @return string name
     */
    protected static $cacheName = array();
    public static function getNameById($idManufacturer)
    {
    }
    /**
     * Get Manufacturer ID by name
     *
     * @param string $name
     *
     * @return bool|int
     */
    public static function getIdByName($name)
    {
    }
    /**
     * Get link to Manufacturer page
     *
     * @return string
     */
    public function getLink()
    {
    }
    /**
     * Get Products by Manufacturer ID
     *
     * @param  int         $idManufacturer
     * @param  int         $idLang
     * @param  int         $p
     * @param   int        $n
     * @param null         $orderBy
     * @param null         $orderWay
     * @param bool         $getTotal
     * @param bool         $active
     * @param bool         $activeCategory
     * @param Context|null $context
     *
     * @return array|bool
     */
    public static function getProducts($idManufacturer, $idLang, $p, $n, $orderBy = \null, $orderWay = \null, $getTotal = \false, $active = \true, $activeCategory = \true, \Context $context = \null)
    {
    }
    /**
     * Get Products by Manufacturer
     * (light edition)
     *
     * @param int $idLang
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public function getProductsLite($idLang)
    {
    }
    /**
     * Specify if a manufacturer already in base
     *
     * @param int $idManufacturer Manufacturer id
     *
     * @return bool
     */
    public static function manufacturerExists($idManufacturer)
    {
    }
    /**
     * Get Manufacturer Addresses
     *
     * @param int $idLang
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public function getAddresses($idLang)
    {
    }
    /**
     * Get Manufacturer Addresses
     * (for webservice)
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public function getWsAddresses()
    {
    }
    /**
     * Set Manufacturer Addresses
     * (for webservice)
     *
     * @param array $idAddresses
     *
     * @return bool
     */
    public function setWsAddresses($idAddresses)
    {
    }
}
class Currency extends \ObjectModel
{
    public $id;
    /** @var string Name */
    public $name;
    /** @var string Iso code */
    public $iso_code;
    /** @var string numeric Iso code */
    public $iso_code_num;
    /** @var string exchange rate from euros */
    public $conversion_rate;
    /** @var bool True if currency has been deleted (staying in database as deleted) */
    public $deleted = 0;
    /** @var int bool active */
    public $active;
    public $sign;
    public $format;
    public $blank;
    public $decimals;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'currency', 'primary' => 'id_currency', 'multilang_shop' => \true, 'fields' => array('name' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'required' => \true, 'size' => 64), 'iso_code' => array('type' => self::TYPE_STRING, 'validate' => 'isLanguageIsoCode', 'required' => \true, 'size' => 3), 'conversion_rate' => array('type' => self::TYPE_FLOAT, 'validate' => 'isUnsignedFloat', 'required' => \true, 'shop' => \true), 'deleted' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'active' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool')));
    /** @var array Currency cache */
    protected static $currencies = array();
    protected static $countActiveCurrencies = array();
    protected $webserviceParameters = array('objectsNodeName' => 'currencies');
    /**
     * contains the sign to display before price, according to its format
     * @var string
     */
    public $prefix = \null;
    /**
     * contains the sign to display after price, according to its format
     * @var string
     */
    public $suffix = \null;
    /**
     * CurrencyCore constructor.
     *
     * @param null $id
     * @param null $idLang
     * @param null $idShop
     */
    public function __construct($id = \null, $idLang = \null, $idShop = \null)
    {
    }
    /**
     * Overriding check if currency rate is not empty and if currency with the same iso code already exists.
     * If it's true, currency is not added.
     *
     * @param bool $autoDate    Automatically set `date_upd` and `date_add` columns
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Indicates whether the Currency has been successfully added
     */
    public function add($autoDate = \true, $nullValues = \false)
    {
    }
    /**
     * Updates the current object in the database
     *
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Indicates whether the CartRule has been successfully updated
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function update($nullValues = \false)
    {
    }
    /**
     * Check if a Currency already exists.
     *
     * @param int|string $isoCode int for iso code number string for iso code
     *
     * @param int        $idShop Shop ID
     *
     * @return bool Indicates whether the Currency already exists
     */
    public static function exists($isoCode, $idShop = 0)
    {
    }
    /**
     * Delete given Currencies
     *
     * @param array $selection Currencies
     *
     * @return bool Indicates whether the selected Currencies have been succesfully deleted
     */
    public function deleteSelection($selection)
    {
    }
    /**
     * Deletes current object from database
     *
     * @return bool True if delete was successful
     * @throws PrestaShopException
     */
    public function delete()
    {
    }
    /**
     * Return formatted sign
     *
     * @param string $side left or right
     * @return string formated sign
     */
    public function getSign($side = \null)
    {
    }
    /**
     * Return available currencies
     *
     * @param bool $object
     * @param bool $active
     * @param bool $groupBy
     *
     * @return array Currencies
     */
    public static function getCurrencies($object = \false, $active = \true, $groupBy = \false)
    {
    }
    /**
     * Get Currencies by Shop ID
     *
     * @param int $idShop Shop ID
     *
     * @return array|Currency
     */
    public static function getCurrenciesByIdShop($idShop = 0)
    {
    }
    /**
     * Add Cldr datas to result query or signe object/array
     *
     * @param $currencies mixed object|array
     * @param $isObject bool
     */
    protected static function addCldrDatasToCurrency($currencies, $isObject = \false)
    {
    }
    public static function getPaymentCurrenciesSpecial($idModule, $idShop = \null)
    {
    }
    /**
     * Get payment Currencies
     *
     * @param int  $idModule Module ID
     * @param null $idShop   Shop ID
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public static function getPaymentCurrencies($idModule, $idShop = \null)
    {
    }
    /**
     * Check payment Currencies
     *
     * @param int  $idModule Module ID
     * @param null $idShop   Shop ID
     *
     * @return array|bool|false|mysqli_result|null|PDOStatement|resource
     */
    public static function checkPaymentCurrencies($idModule, $idShop = \null)
    {
    }
    /**
     * Get Currency
     *
     * @param int $idCurrency Currency ID
     *
     * @return array|bool|null|object
     */
    public static function getCurrency($idCurrency)
    {
    }
    /**
     * Get Currency ID by ISO code
     *
     * @param string $isoCode ISO code
     * @param int $idShop Shop ID
     *
     * @return int Currency ID
     */
    public static function getIdByIsoCode($isoCode, $idShop = 0)
    {
    }
    /**
     * Get Currency ID query
     *
     * @param int $idShop Shop ID
     *
     * @return DbQuery
     */
    public static function getIdByQuery($idShop = 0)
    {
    }
    /**
     * Refresh the currency exchange rate
     * The XML file define exchange rate for each from a default currency ($isoCodeSource).
     *
     * @param SimpleXMLElement $data XML content which contains all the exchange rates
     * @param string $isoCodeSource The default currency used in the XML file
     * @param Currency $defaultCurrency The default currency object
     */
    public function refreshCurrency($data, $isoCodeSource, $defaultCurrency)
    {
    }
    /**
     * Get default Currency
     *
     * @return bool|Currency
     */
    public static function getDefaultCurrency()
    {
    }
    /**
     * Refresh Currencies
     *
     * @return string Error message
     */
    public static function refreshCurrencies()
    {
    }
    /**
     * Get Currency instance
     *
     * @param int $id Currency ID
     *
     * @return Currency
     */
    public static function getCurrencyInstance($id)
    {
    }
    /**
     * Get conversion rate
     *
     * @return int|string
     * @deprecated 1.7.2.0, use Currency::getConversionRate() instead
     */
    public function getConversationRate()
    {
    }
    /**
     * Get conversion rate
     *
     * @return int|string
     */
    public function getConversionRate()
    {
    }
    /**
     * Count active Currencies
     *
     * @param int|null $idShop Shop ID
     *
     * @return mixed Amount of active Currencies
     *               `false` if none found
     */
    public static function countActiveCurrencies($idShop = \null)
    {
    }
    /**
     * Is multi Currency activated?
     *
     * @param int|null $idShop Shop ID
     *
     * @return bool Indicates whether multi Currency is actived
     */
    public static function isMultiCurrencyActivated($idShop = \null)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class CustomizationField
 */
class CustomizationField extends \ObjectModel
{
    /** @var int */
    public $id_product;
    /** @var int Customization type (0 File, 1 Textfield) (See Product class) */
    public $type;
    /** @var bool Field is required */
    public $required;
    /** @var bool Field was added by a module */
    public $is_module;
    /** @var string Label for customized field */
    public $name;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'customization_field', 'primary' => 'id_customization_field', 'multilang' => \true, 'multilang_shop' => \true, 'fields' => array(
        /* Classic fields */
        'id_product' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true),
        'type' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true),
        'required' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool', 'required' => \true),
        'is_module' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool', 'required' => \false),
        /* Lang fields */
        'name' => array('type' => self::TYPE_STRING, 'lang' => \true, 'required' => \true, 'size' => 255),
    ));
    /** @var array $webserviceParameters */
    protected $webserviceParameters = array('fields' => array('id_product' => array('xlink_resource' => array('resourceName' => 'products'))));
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Profile
 */
class Profile extends \ObjectModel
{
    /** @var string Name */
    public $name;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'profile', 'primary' => 'id_profile', 'multilang' => \true, 'fields' => array(
        /* Lang fields */
        'name' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'required' => \true, 'size' => 32),
    ));
    protected static $_cache_accesses = array();
    /**
     * Get all available profiles
     *
     * @return array Profiles
     */
    public static function getProfiles($idLang)
    {
    }
    /**
     * Get the current profile name
     *
     * @param int  $idProfile Profile ID
     * @param null $idLang    Language ID
     *
     * @return string Profile
     */
    public static function getProfile($idProfile, $idLang = \null)
    {
    }
    public function add($autodate = \true, $null_values = \false)
    {
    }
    public function delete()
    {
    }
    /**
     * Get access profile
     *
     * @param int $idProfile Profile ID
     * @param int $idTab     Tab ID
     *
     * @return bool
     */
    public static function getProfileAccess($idProfile, $idTab)
    {
    }
    /**
     * Get access profiles
     *
     * @param int    $idProfile Profile ID
     * @param string $type      Type
     *
     * @return bool
     */
    public static function getProfileAccesses($idProfile, $type = 'id_tab')
    {
    }
    public static function resetCacheAccesses()
    {
    }
}
class Language extends \ObjectModel
{
    const ALL_LANGUAGES_FILE = '/app/Resources/all_languages.json';
    const SF_LANGUAGE_PACK_URL = 'http://i18n.prestashop.com/translations/%version%/%locale%/%locale%.zip';
    const EMAILS_LANGUAGE_PACK_URL = 'http://i18n.prestashop.com/mails/%version%/%locale%/%locale%.zip';
    public $id;
    /** @var string Name */
    public $name;
    /** @var string 2-letter iso code */
    public $iso_code;
    /** @var string 5-letter iso code */
    public $locale;
    /** @var string 5-letter iso code */
    public $language_code;
    /** @var string date format http://http://php.net/manual/en/function.date.php with the date only */
    public $date_format_lite = 'Y-m-d';
    /** @var string date format http://http://php.net/manual/en/function.date.php with hours and minutes */
    public $date_format_full = 'Y-m-d H:i:s';
    /** @var bool true if this language is right to left language */
    public $is_rtl = \false;
    /** @var bool Status */
    public $active = \true;
    protected static $_cache_language_installation = \null;
    protected static $_cache_language_installation_by_locale = \null;
    protected static $_cache_all_language_json = \null;
    public static $locale_crowdin_lang = 'en-UD';
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'lang', 'primary' => 'id_lang', 'fields' => array('name' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'required' => \true, 'size' => 32), 'iso_code' => array('type' => self::TYPE_STRING, 'validate' => 'isLanguageIsoCode', 'required' => \true, 'size' => 2), 'locale' => array('type' => self::TYPE_STRING, 'validate' => 'isLocale', 'size' => 5), 'language_code' => array('type' => self::TYPE_STRING, 'validate' => 'isLanguageCode', 'size' => 5), 'active' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'is_rtl' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'date_format_lite' => array('type' => self::TYPE_STRING, 'validate' => 'isPhpDateFormat', 'required' => \true, 'size' => 32), 'date_format_full' => array('type' => self::TYPE_STRING, 'validate' => 'isPhpDateFormat', 'required' => \true, 'size' => 32)));
    /** @var array Languages cache */
    protected static $_checkedLangs;
    protected static $_LANGUAGES;
    protected static $countActiveLanguages = array();
    protected $webserviceParameters = array('objectNodeName' => 'language', 'objectsNodeName' => 'languages');
    protected $translationsFilesAndVars = array('fields' => '_FIELDS', 'errors' => '_ERRORS', 'admin' => '_LANGADM', 'pdf' => '_LANGPDF', 'tabs' => 'tabs');
    public function __construct($id = \null, $id_lang = \null)
    {
    }
    public static function resetCache()
    {
    }
    /**
     * @see ObjectModel::getFields()
     *
     * @return array
     */
    public function getFields()
    {
    }
    /**
     * Move translations files after editing language iso code.
     */
    public function moveToIso($newIso)
    {
    }
    public function add($autodate = \true, $nullValues = \false, $only_add = \false)
    {
    }
    public function checkFiles()
    {
    }
    /**
     * This functions checks if every files exists for the language $iso_code.
     * Concerned files are those located in translations/$iso_code/
     * and translations/mails/$iso_code .
     *
     * @param mixed $iso_code
     * @returntrue if all files exists
     */
    public static function checkFilesWithIsoCode($iso_code)
    {
    }
    public static function getFilesList($iso_from, $theme_from, $iso_to = \false, $theme_to = \false, $select = \false, $check = \false, $modules = \false)
    {
    }
    /**
     * loadUpdateSQL will create default lang values when you create a new lang, based on default id lang.
     *
     * @return bool true if succeed
     */
    public function loadUpdateSQL()
    {
    }
    /**
     * @deprecated 1.6.1.1 Use Tools::deleteDirectory($dir) instead
     *
     * @param string $dir is the path of the directory to delete
     */
    public static function recurseDeleteDir($dir)
    {
    }
    public function delete()
    {
    }
    public function deleteSelection($selection)
    {
    }
    /**
     * Returns available languages.
     *
     * @param bool     $active   Select only active languages
     * @param int|bool $id_shop  Shop ID
     * @param bool     $ids_only If true, returns an array of language IDs
     *
     * @return array Languages
     */
    public static function getLanguages($active = \true, $id_shop = \false, $ids_only = \false)
    {
    }
    /**
     * Returns an array of language IDs.
     *
     * @param bool     $active  Select only active languages
     * @param int|bool $id_shop Shop ID
     *
     * @return array
     */
    public static function getIDs($active = \true, $id_shop = \false)
    {
    }
    public static function getLanguage($id_lang)
    {
    }
    /**
     * Return iso code from id.
     *
     * @param int $id_lang Language ID
     *
     * @return string Iso code
     */
    public static function getIsoById($id_lang)
    {
    }
    public static function getJsonLanguageDetails($locale)
    {
    }
    /**
     * Return id from iso code.
     *
     * @param string $iso_code Iso code
     * @param bool   $no_cache
     *
     * @return false|null|string
     */
    public static function getIdByIso($iso_code, $no_cache = \false)
    {
    }
    public static function getLangDetails($iso)
    {
    }
    /**
     * @param string $isoCode
     *
     * @return string|false|null
     *
     * @throws Exception
     */
    public static function getLocaleByIso($isoCode)
    {
    }
    public static function getLanguageCodeByIso($iso_code)
    {
    }
    public static function getLanguageByIETFCode($code)
    {
    }
    /**
     * Return array (id_lang, iso_code).
     *
     * @param string $iso_code Iso code
     *
     * @return array Language (id_lang, iso_code)
     */
    public static function getIsoIds($active = \true)
    {
    }
    public static function copyLanguageData($from, $to)
    {
    }
    /**
     * Load all languages in memory for caching.
     */
    public static function loadLanguages()
    {
    }
    public static function loadLanguagesLegacy()
    {
    }
    public static function checkAndAddLanguage($iso_code, $lang_pack = \false, $only_add = \false, $params_lang = \null)
    {
    }
    protected static function _copyNoneFlag($id)
    {
    }
    public static function isInstalled($iso_code)
    {
    }
    public static function isInstalledByLocale($locale)
    {
    }
    public static function countActiveLanguages($id_shop = \null)
    {
    }
    public static function downloadAndInstallLanguagePack($iso, $version = \_PS_VERSION_, $params = \null, $install = \true)
    {
    }
    public static function downloadLanguagePack($iso, $version, &$errors = array())
    {
    }
    public static function downloadXLFLanguagePack($locale, &$errors = array(), $type = 'sf')
    {
    }
    public static function installSfLanguagePack($locale, &$errors = array())
    {
    }
    public static function installEmailsLanguagePack($lang_pack, &$errors = array())
    {
    }
    public static function installLanguagePack($iso, $params, &$errors = array())
    {
    }
    /**
     * Check if more on than one language is activated.
     *
     * @since 1.5.0
     *
     * @return bool
     */
    public static function isMultiLanguageActivated($id_shop = \null)
    {
    }
    public static function getLanguagePackListContent($iso, $tar)
    {
    }
    public static function updateModulesTranslations(array $modules_list)
    {
    }
    /**
     * Update all table_lang from xlf & DataLang
     *
     * @param $iso_code
     *
     * @return bool
     */
    public static function updateMultilangTable($iso_code)
    {
    }
    public static function updateMultilangFromCldr($lang)
    {
    }
    public static function updateMultilangFromClass($table, $className, $lang)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class DbPDO
 *
 * @since 1.5.0.1
 */
class DbPDO extends \Db
{
    /** @var PDO */
    protected $link;
    /* @var PDOStatement */
    protected $result;
    /**
     * Returns a new PDO object (database link)
     *
     * @param string $host
     * @param string $user
     * @param string $password
     * @param string $dbname
     * @param int $timeout
     * @return PDO
     */
    protected static function _getPDO($host, $user, $password, $dbname, $timeout = 5)
    {
    }
    /**
     * Tries to connect and create a new database
     *
     * @param string $host
     * @param string $user
     * @param string $password
     * @param string $dbname
     * @param bool $dropit If true, drops the created database.
     * @return bool|int
     */
    public static function createDatabase($host, $user, $password, $dbname, $dropit = \false)
    {
    }
    /**
     * Tries to connect to the database
     *
     * @see DbCore::connect()
     * @return PDO
     */
    public function connect()
    {
    }
    /**
     * Destroys the database connection link
     *
     * @see DbCore::disconnect()
     */
    public function disconnect()
    {
    }
    /**
     * Executes an SQL statement, returning a result set as a PDOStatement object or true/false.
     *
     * @see DbCore::_query()
     * @param string $sql
     * @return PDOStatement
     */
    protected function _query($sql)
    {
    }
    /**
     * Returns the next row from the result set.
     *
     * @see DbCore::nextRow()
     * @param bool $result
     * @return array|false|null
     */
    public function nextRow($result = \false)
    {
    }
    /**
     * Returns all rows from the result set.
     *
     * @see DbCore::getAll()
     * @param bool $result
     * @return array|false|null
     */
    protected function getAll($result = \false)
    {
    }
    /**
     * Returns row count from the result set.
     *
     * @see DbCore::_numRows()
     * @param PDOStatement $result
     * @return int
     */
    protected function _numRows($result)
    {
    }
    /**
     * Returns ID of the last inserted row.
     *
     * @see DbCore::Insert_ID()
     * @return string|int
     */
    public function Insert_ID()
    {
    }
    /**
     * Return the number of rows affected by the last SQL query.
     *
     * @see DbCore::Affected_Rows()
     * @return int
     */
    public function Affected_Rows()
    {
    }
    /**
     * Returns error message.
     *
     * @see DbCore::getMsgError()
     * @param bool $query
     * @return string
     */
    public function getMsgError($query = \false)
    {
    }
    /**
     * Returns error code.
     *
     * @see DbCore::getNumberError()
     * @return int
     */
    public function getNumberError()
    {
    }
    /**
     * Returns database server version.
     *
     * @see DbCore::getVersion()
     * @return string
     */
    public function getVersion()
    {
    }
    /**
     * Escapes illegal characters in a string.
     *
     * @see DbCore::_escape()
     * @param string $str
     * @return string
     */
    public function _escape($str)
    {
    }
    /**
     * Switches to a different database.
     *
     * @see DbCore::set_db()
     * @param string $db_name
     * @return int
     */
    public function set_db($db_name)
    {
    }
    /**
     * Try a connection to the database and check if at least one table with same prefix exists
     *
     * @see Db::hasTableWithSamePrefix()
     * @param string $server Server address
     * @param string $user Login for database connection
     * @param string $pwd Password for database connection
     * @param string $db Database name
     * @param string $prefix Tables prefix
     * @return bool
     */
    public static function hasTableWithSamePrefix($server, $user, $pwd, $db, $prefix)
    {
    }
    /**
     * Tries to connect to the database and create a table (checking creation privileges)
     *
     * @param string $server
     * @param string $user
     * @param string $pwd
     * @param string $db
     * @param string $prefix
     * @param string|null $engine Table engine
     * @return bool|string True, false or error
     */
    public static function checkCreatePrivilege($server, $user, $pwd, $db, $prefix, $engine = \null)
    {
    }
    /**
     * Try a connection to the database
     *
     * @see Db::checkConnection()
     * @param string $server Server address
     * @param string $user Login for database connection
     * @param string $pwd Password for database connection
     * @param string $db Database name
     * @param bool $newDbLink
     * @param string|bool $engine
     * @param int $timeout
     * @return int Error code or 0 if connection was successful
     */
    public static function tryToConnect($server, $user, $pwd, $db, $new_db_link = \true, $engine = \null, $timeout = 5)
    {
    }
    /**
     * Selects best table engine.
     *
     * @return string
     */
    public function getBestEngine()
    {
    }
    /**
     * Try a connection to the database and set names to UTF-8
     *
     * @see Db::checkEncoding()
     * @param string $server Server address
     * @param string $user Login for database connection
     * @param string $pwd Password for database connection
     * @return bool
     */
    public static function tryUTF8($server, $user, $pwd)
    {
    }
    /**
     * Checks if auto increment value and offset is 1
     *
     * @param string $server
     * @param string $user
     * @param string $pwd
     * @return bool
     */
    public static function checkAutoIncrement($server, $user, $pwd)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Db
 */
abstract class Db
{
    /** @var int Constant used by insert() method */
    const INSERT = 1;
    /** @var int Constant used by insert() method */
    const INSERT_IGNORE = 2;
    /** @var int Constant used by insert() method */
    const REPLACE = 3;
    /** @var int Constant used by insert() method */
    const ON_DUPLICATE_KEY = 4;
    /** @var string Server (eg. localhost) */
    protected $server;
    /**  @var string Database user (eg. root) */
    protected $user;
    /** @var string Database password (eg. can be empty !) */
    protected $password;
    /** @var string Database name */
    protected $database;
    /** @var bool */
    protected $is_cache_enabled;
    /** @var PDO|mysqli|resource Resource link */
    protected $link;
    /** @var PDOStatement|mysqli_result|resource|bool SQL cached result */
    protected $result;
    /** @var array List of DB instances */
    public static $instance = array();
    /** @var array List of server settings */
    public static $_servers = array();
    /** @var null Flag used to load slave servers only once.
     * See loadSlaveServers() method.
     */
    public static $_slave_servers_loaded = \null;
    /**
     * Store last executed query
     *
     * @var string
     */
    protected $last_query;
    /**
     * Store hash of the last executed query
     *
     * @var string
     */
    protected $last_query_hash;
    /**
     * Last cached query
     *
     * @var string
     */
    protected $last_cached;
    /**
     * Opens a database connection
     *
     * @return PDO|mysqli|resource
     */
    public abstract function connect();
    /**
     * Closes database connection
     */
    public abstract function disconnect();
    /**
     * Execute a query and get result resource
     *
     * @param string $sql
     * @return PDOStatement|mysqli_result|resource|bool
     */
    protected abstract function _query($sql);
    /**
     * Get number of rows in a result
     *
     * @param mixed $result
     * @return int
     */
    protected abstract function _numRows($result);
    /**
     * Get the ID generated from the previous INSERT operation
     *
     * @return int|string
     */
    public abstract function Insert_ID();
    /**
     * Get number of affected rows in previous database operation
     *
     * @return int
     */
    public abstract function Affected_Rows();
    /**
     * Get next row for a query which does not return an array
     *
     * @param PDOStatement|mysqli_result|resource|bool $result
     * @return array|object|false|null
     */
    public abstract function nextRow($result = \false);
    /**
     * Get all rows for a query which return an array
     *
     * @param PDOStatement|mysqli_result|resource|bool|null $result
     * @return array
     */
    protected abstract function getAll($result = \false);
    /**
     * Get database version
     *
     * @return string
     */
    public abstract function getVersion();
    /**
     * Protect string against SQL injections
     *
     * @param string $str
     * @return string
     */
    public abstract function _escape($str);
    /**
     * Returns the text of the error message from previous database operation
     *
     * @return string
     */
    public abstract function getMsgError();
    /**
     * Returns the number of the error from previous database operation
     *
     * @return int
     */
    public abstract function getNumberError();
    /**
     * Sets the current active database on the server that's associated with the specified link identifier.
     * Do not remove, useful for some modules.
     *
     * @param string $db_name
     * @return bool|int
     */
    public abstract function set_db($db_name);
    /**
     * Selects best table engine.
     *
     * @return string
     */
    public abstract function getBestEngine();
    /**
     * Returns database object instance.
     *
     * @param bool $master Decides whether the connection to be returned by the master server or the slave server
     * @return Db Singleton instance of Db object
     */
    public static function getInstance($master = \true)
    {
    }
    public function getPrefix()
    {
    }
    /**
     * @param $test_db Db
     * Unit testing purpose only
     */
    public static function setInstanceForTesting($test_db)
    {
    }
    /**
     * Unit testing purpose only
     */
    public static function deleteTestingInstance()
    {
    }
    /**
     * Loads configuration settings for slave servers if needed.
     */
    protected static function loadSlaveServers()
    {
    }
    /**
     * Returns the best child layer database class.
     *
     * @return string
     */
    public static function getClass()
    {
    }
    /**
     * Instantiates a database connection
     *
     * @param string $server Server address
     * @param string $user User login
     * @param string $password User password
     * @param string $database Database name
     * @param bool $connect If false, don't connect in constructor (since 1.5.0.1)
     */
    public function __construct($server, $user, $password, $database, $connect = \true)
    {
    }
    /**
     * Disable the use of the cache
     *
     */
    public function disableCache()
    {
    }
    /**
     * Enable & flush the cache
     *
     */
    public function enableCache()
    {
    }
    /**
     * Closes connection to database
     */
    public function __destruct()
    {
    }
    /**
     * Execute a query and get result resource
     *
     * @param string|DbQuery $sql
     * @return bool|mysqli_result|PDOStatement|resource
     * @throws PrestaShopDatabaseException
     */
    public function query($sql)
    {
    }
    /**
     * Executes an INSERT query
     *
     * @param string $table Table name without prefix
     * @param array $data Data to insert as associative array. If $data is a list of arrays, multiple insert will be done
     * @param bool $null_values If we want to use NULL values instead of empty quotes
     * @param bool $use_cache
     * @param int $type Must be Db::INSERT or Db::INSERT_IGNORE or Db::REPLACE
     * @param bool $add_prefix Add or not _DB_PREFIX_ before table name
     * @return bool
     * @throws PrestaShopDatabaseException
     */
    public function insert($table, $data, $null_values = \false, $use_cache = \true, $type = \Db::INSERT, $add_prefix = \true)
    {
    }
    /**
     * Executes an UPDATE query
     *
     * @param string $table Table name without prefix
     * @param array $data Data to insert as associative array. If $data is a list of arrays, multiple insert will be done
     * @param string $where WHERE condition
     * @param int $limit
     * @param bool $null_values If we want to use NULL values instead of empty quotes
     * @param bool $use_cache
     * @param bool $add_prefix Add or not _DB_PREFIX_ before table name
     * @return bool
     */
    public function update($table, $data, $where = '', $limit = 0, $null_values = \false, $use_cache = \true, $add_prefix = \true)
    {
    }
    /**
     * Executes a DELETE query
     *
     * @param string $table Name of the table to delete
     * @param string $where WHERE clause on query
     * @param int $limit Number max of rows to delete
     * @param bool $use_cache Use cache or not
     * @param bool $add_prefix Add or not _DB_PREFIX_ before table name
     * @return bool
     */
    public function delete($table, $where = '', $limit = 0, $use_cache = \true, $add_prefix = \true)
    {
    }
    /**
     * Executes a query
     *
     * @param string|DbQuery $sql
     * @param bool $use_cache
     * @return bool
     */
    public function execute($sql, $use_cache = \true)
    {
    }
    /**
     * Executes return the result of $sql as array
     *
     * @param string|DbQuery $sql Query to execute
     * @param bool $array Return an array instead of a result object (deprecated since 1.5.0.1, use query method instead)
     * @param bool $use_cache
     * @return array|false|null|mysqli_result|PDOStatement|resource
     * @throws PrestaShopDatabaseException
     */
    public function executeS($sql, $array = \true, $use_cache = \true)
    {
    }
    /**
     * Returns an associative array containing the first row of the query
     * This function automatically adds "LIMIT 1" to the query
     *
     * @param string|DbQuery $sql the select query (without "LIMIT 1")
     * @param bool $use_cache Find it in cache first
     * @return array|bool|object|null
     */
    public function getRow($sql, $use_cache = \true)
    {
    }
    /**
     * Returns a value from the first row, first column of a SELECT query
     *
     * @param string|DbQuery $sql
     * @param bool $use_cache
     * @return string|false|null
     */
    public function getValue($sql, $use_cache = \true)
    {
    }
    /**
     * Get number of rows for last result
     *
     * @return int
     */
    public function numRows()
    {
    }
    /**
     * Executes a query
     *
     * @param string|DbQuery $sql
     * @param bool $use_cache
     * @return bool|mysqli_result|PDOStatement|resource
     * @throws PrestaShopDatabaseException
     */
    protected function q($sql, $use_cache = \true)
    {
    }
    /**
     * Displays last SQL error
     *
     * @param string|bool $sql
     * @throws PrestaShopDatabaseException
     */
    public function displayError($sql = \false)
    {
    }
    /**
     * Sanitize data which will be injected into SQL query
     *
     * @param string $string SQL data which will be injected into SQL query
     * @param bool $html_ok Does data contain HTML code ? (optional)
     * @return string Sanitized data
     */
    public function escape($string, $html_ok = \false, $bq_sql = \false)
    {
    }
    /**
     * Try a connection to the database
     *
     * @param string $server Server address
     * @param string $user Login for database connection
     * @param string $pwd Password for database connection
     * @param string $db Database name
     * @param bool $new_db_link
     * @param string|bool $engine
     * @param int $timeout
     * @return int Error code or 0 if connection was successful
     */
    public static function checkConnection($server, $user, $pwd, $db, $new_db_link = \true, $engine = \null, $timeout = 5)
    {
    }
    /**
     * Try a connection to the database and set names to UTF-8
     *
     * @param string $server Server address
     * @param string $user Login for database connection
     * @param string $pwd Password for database connection
     * @return bool
     */
    public static function checkEncoding($server, $user, $pwd)
    {
    }
    /**
     * Try a connection to the database and check if at least one table with same prefix exists
     *
     * @param string $server Server address
     * @param string $user Login for database connection
     * @param string $pwd Password for database connection
     * @param string $db Database name
     * @param string $prefix Tables prefix
     * @return bool
     */
    public static function hasTableWithSamePrefix($server, $user, $pwd, $db, $prefix)
    {
    }
    /**
     * Tries to connect to the database and create a table (checking creation privileges)
     *
     * @param string $server
     * @param string $user
     * @param string $pwd
     * @param string $db
     * @param string $prefix
     * @param string|null $engine Table engine
     * @return bool|string True, false or error
     */
    public static function checkCreatePrivilege($server, $user, $pwd, $db, $prefix, $engine = \null)
    {
    }
    /**
     * Checks if auto increment value and offset is 1
     *
     * @param string $server
     * @param string $user
     * @param string $pwd
     * @return bool
     */
    public static function checkAutoIncrement($server, $user, $pwd)
    {
    }
    /**
     * Get used link instance
     *
     * @return PDO|mysqli|resource Resource
     */
    public function getLink()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class DbMySQLi
 *
 * @since 1.5.0,1
 */
class DbMySQLi extends \Db
{
    /** @var mysqli */
    protected $link;
    /* @var mysqli_result */
    protected $result;
    /**
     * Tries to connect to the database
     *
     * @see DbCore::connect()
     * @return mysqli
     * @throws PrestaShopDatabaseException
     */
    public function connect()
    {
    }
    /**
     * Tries to connect and create a new database
     *
     * @param string $host
     * @param string|null $user
     * @param string|null $password
     * @param string|null $database
     * @param bool $dropit If true, drops the created database.
     * @return bool|mysqli_result
     */
    public static function createDatabase($host, $user = \null, $password = \null, $database = \null, $dropit = \false)
    {
    }
    /**
     * Destroys the database connection link
     *
     * @see DbCore::disconnect()
     */
    public function disconnect()
    {
    }
    /**
     * Executes an SQL statement, returning a result set as a mysqli_result object or true/false.
     *
     * @see DbCore::_query()
     * @param string $sql
     * @return bool|mysqli_result
     */
    protected function _query($sql)
    {
    }
    /**
     * Returns the next row from the result set.
     *
     * @see DbCore::nextRow()
     * @param bool|mysqli_result $result
     * @return array|bool
     */
    public function nextRow($result = \false)
    {
    }
    /**
     * Returns all rows from the result set.
     *
     * @see DbCore::getAll()
     * @param bool|mysqli_result $result
     * @return array|false
     */
    protected function getAll($result = \false)
    {
    }
    /**
     * Returns row count from the result set.
     *
     * @see DbCore::_numRows()
     * @param bool|mysqli_result $result
     * @return int
     */
    protected function _numRows($result)
    {
    }
    /**
     * Returns ID of the last inserted row.
     *
     * @see DbCore::Insert_ID()
     * @return string|int
     */
    public function Insert_ID()
    {
    }
    /**
     * Return the number of rows affected by the last SQL query.
     *
     * @see DbCore::Affected_Rows()
     * @return int
     */
    public function Affected_Rows()
    {
    }
    /**
     * Returns error message.
     *
     * @see DbCore::getMsgError()
     * @param bool $query
     * @return string
     */
    public function getMsgError($query = \false)
    {
    }
    /**
     * Returns error code.
     *
     * @see DbCore::getNumberError()
     * @return int
     */
    public function getNumberError()
    {
    }
    /**
     * Returns database server version.
     *
     * @see DbCore::getVersion()
     * @return string
     */
    public function getVersion()
    {
    }
    /**
     * Escapes illegal characters in a string.
     *
     * @see DbCore::_escape()
     * @param string $str
     * @return string
     */
    public function _escape($str)
    {
    }
    /**
     * Switches to a different database.
     *
     * @see DbCore::set_db()
     * @param string $db_name
     * @return bool
     */
    public function set_db($db_name)
    {
    }
    /**
     * Try a connection to the database and check if at least one table with same prefix exists
     *
     * @see Db::hasTableWithSamePrefix()
     * @param string $server Server address
     * @param string $user Login for database connection
     * @param string $pwd Password for database connection
     * @param string $db Database name
     * @param string $prefix Tables prefix
     * @return bool
     */
    public static function hasTableWithSamePrefix($server, $user, $pwd, $db, $prefix)
    {
    }
    /**
     * Try a connection to the database
     *
     * @see Db::checkConnection()
     * @param string $server Server address
     * @param string $user Login for database connection
     * @param string $pwd Password for database connection
     * @param string $db Database name
     * @param bool $newDbLink
     * @param string|bool $engine
     * @param int $timeout
     * @return int Error code or 0 if connection was successful
     */
    public static function tryToConnect($server, $user, $pwd, $db, $new_db_link = \true, $engine = \null, $timeout = 5)
    {
    }
    /**
     * Selects best table engine.
     *
     * @return string
     */
    public function getBestEngine()
    {
    }
    /**
     * Tries to connect to the database and create a table (checking creation privileges)
     *
     * @param string $server
     * @param string $user
     * @param string $pwd
     * @param string $db
     * @param string $prefix
     * @param string|null $engine Table engine
     * @return bool|string True, false or error
     */
    public static function checkCreatePrivilege($server, $user, $pwd, $db, $prefix, $engine = \null)
    {
    }
    /**
     * Try a connection to the database and set names to UTF-8
     *
     * @see Db::checkEncoding()
     * @param string $server Server address
     * @param string $user Login for database connection
     * @param string $pwd Password for database connection
     * @return bool
     */
    public static function tryUTF8($server, $user, $pwd)
    {
    }
    /**
     * Checks if auto increment value and offset is 1
     *
     * @param string $server
     * @param string $user
     * @param string $pwd
     * @return bool
     */
    public static function checkAutoIncrement($server, $user, $pwd)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * SQL query builder
 *
 * @since 1.5.0.1
 */
class DbQuery
{
    /**
     * List of data to build the query
     *
     * @var array
     */
    protected $query = array('type' => 'SELECT', 'select' => array(), 'from' => array(), 'join' => array(), 'where' => array(), 'group' => array(), 'having' => array(), 'order' => array(), 'limit' => array('offset' => 0, 'limit' => 0));
    /**
     * Sets type of the query
     *
     * @param string $type SELECT|DELETE
     *
     * @return DbQuery
     */
    public function type($type)
    {
    }
    /**
     * Adds fields to SELECT clause
     *
     * @param string $fields List of fields to concat to other fields
     *
     * @return DbQuery
     */
    public function select($fields)
    {
    }
    /**
     * Sets table for FROM clause
     *
     * @param string      $table Table name
     * @param string|null $alias Table alias
     *
     * @return DbQuery
     */
    public function from($table, $alias = \null)
    {
    }
    /**
     * Adds JOIN clause
     * E.g. $this->join('RIGHT JOIN '._DB_PREFIX_.'product p ON ...');
     *
     * @param string $join Complete string
     *
     * @return DbQuery
     */
    public function join($join)
    {
    }
    /**
     * Adds a LEFT JOIN clause
     *
     * @param string      $table Table name (without prefix)
     * @param string|null $alias Table alias
     * @param string|null $on    ON clause
     *
     * @return DbQuery
     */
    public function leftJoin($table, $alias = \null, $on = \null)
    {
    }
    /**
     * Adds an INNER JOIN clause
     * E.g. $this->innerJoin('product p ON ...')
     *
     * @param string      $table Table name (without prefix)
     * @param string|null $alias Table alias
     * @param string|null $on    ON clause
     *
     * @return DbQuery
     */
    public function innerJoin($table, $alias = \null, $on = \null)
    {
    }
    /**
     * Adds a LEFT OUTER JOIN clause
     *
     * @param string      $table Table name (without prefix)
     * @param string|null $alias Table alias
     * @param string|null $on    ON clause
     *
     * @return DbQuery
     */
    public function leftOuterJoin($table, $alias = \null, $on = \null)
    {
    }
    /**
     * Adds a NATURAL JOIN clause
     *
     * @param string      $table Table name (without prefix)
     * @param string|null $alias Table alias
     *
     * @return DbQuery
     */
    public function naturalJoin($table, $alias = \null)
    {
    }
    /**
     * Adds a RIGHT JOIN clause
     *
     * @param string      $table Table name (without prefix)
     * @param string|null $alias Table alias
     * @param string|null $on    ON clause
     *
     * @return DbQuery
     */
    public function rightJoin($table, $alias = \null, $on = \null)
    {
    }
    /**
     * Adds a restriction in WHERE clause (each restriction will be separated by AND statement)
     *
     * @param string $restriction
     *
     * @return DbQuery
     */
    public function where($restriction)
    {
    }
    /**
     * Adds a restriction in HAVING clause (each restriction will be separated by AND statement)
     *
     * @param string $restriction
     *
     * @return DbQuery
     */
    public function having($restriction)
    {
    }
    /**
     * Adds an ORDER BY restriction
     *
     * @param string $fields List of fields to sort. E.g. $this->order('myField, b.mySecondField DESC')
     *
     * @return DbQuery
     */
    public function orderBy($fields)
    {
    }
    /**
     * Adds a GROUP BY restriction
     *
     * @param string $fields List of fields to group. E.g. $this->group('myField1, myField2')
     *
     * @return DbQuery
     */
    public function groupBy($fields)
    {
    }
    /**
     * Sets query offset and limit
     *
     * @param int $limit
     * @param int $offset
     *
     * @return DbQuery
     */
    public function limit($limit, $offset = 0)
    {
    }
    /**
     * Generates query and return SQL string
     *
     * @return string
     * @throws PrestaShopException
     */
    public function build()
    {
    }
    /**
     * Converts object to string
     *
     * @return string
     */
    public function __toString()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class Pack extends \Product
{
    protected static $cachePackItems = array();
    protected static $cacheIsPack = array();
    protected static $cacheIsPacked = array();
    /**
     * Is product a pack?
     *
     * @param $id_product
     * @return bool
     */
    public static function isPack($id_product)
    {
    }
    /**
     * Is product in a pack?
     * If $id_product_attribute specified, then will restrict search on the given combination,
     * else this method will match a product if at least one of all its combination is in a pack.
     *
     * @param $id_product
     * @param $id_product_attribute Optional combination of the product
     * @return bool
     */
    public static function isPacked($id_product, $id_product_attribute = \false)
    {
    }
    public static function noPackPrice($id_product)
    {
    }
    public static function noPackWholesalePrice($id_product)
    {
    }
    public static function getItems($id_product, $id_lang)
    {
    }
    public static function isInStock($id_product)
    {
    }
    public static function getItemTable($id_product, $id_lang, $full = \false)
    {
    }
    public static function getPacksTable($id_product, $id_lang, $full = \false, $limit = \null)
    {
    }
    public static function deleteItems($id_product)
    {
    }
    /**
     * Add an item to the pack
     *
     * @param int $id_product
     * @param int $id_item
     * @param int $qty
     * @param int     $id_attribute_item
     * @return bool true if everything was fine
     * @throws PrestaShopDatabaseException
     */
    public static function addItem($id_product, $id_item, $qty, $id_attribute_item = 0)
    {
    }
    public static function duplicate($id_product_old, $id_product_new)
    {
    }
    /**
     * This method is allow to know if a feature is used or active
     * @since 1.5.0.1
     * @return bool
     */
    public static function isFeatureActive()
    {
    }
    /**
     * This method is allow to know if a Pack entity is currently used
     * @since 1.5.0
     * @param $table
     * @param $has_active_column
     * @return bool
     */
    public static function isCurrentlyUsed($table = \null, $has_active_column = \false)
    {
    }
    /**
     * For a given pack, tells if it has at least one product using the advanced stock management
     *
     * @param int $id_product id_pack
     * @return bool
     */
    public static function usesAdvancedStockManagement($id_product)
    {
    }
    /**
     * For a given pack, tells if all products using the advanced stock management
     *
     * @param int $id_product id_pack
     * @return bool
     */
    public static function allUsesAdvancedStockManagement($id_product)
    {
    }
    /**
     * Returns Packs that conatins the given product in the right declinaison.
     *
     * @param integer $id_item Product item id that could be contained in a|many pack(s)
     * @param integer $id_attribute_item The declinaison of the product
     * @param integer $id_lang
     * @return array[Product] Packs that contains the given product
     */
    public static function getPacksContainingItem($id_item, $id_attribute_item, $id_lang)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class FileLogger extends \AbstractLogger
{
    protected $filename = '';
    /**
     * Write the message in the log file
     *
     * @param string message
     * @param level
     */
    protected function logMessage($message, $level)
    {
    }
    /**
     * Check if the specified filename is writable and set the filename
     *
     * @param string $filename
     */
    public function setFilename($filename)
    {
    }
    /**
     * Log the message
     *
     * @param string message
     * @param level
     */
    public function getFilename()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
abstract class AbstractLogger
{
    public $level;
    protected $level_value = array(0 => 'DEBUG', 1 => 'INFO', 2 => 'WARNING', 3 => 'ERROR');
    const DEBUG = 0;
    const INFO = 1;
    const WARNING = 2;
    const ERROR = 3;
    public function __construct($level = self::INFO)
    {
    }
    /**
     * Log the message
     *
     * @param string message
     * @param level
     */
    protected abstract function logMessage($message, $level);
    /**
     * Check the level and log the message if needed
     *
     * @param string message
     * @param level
     */
    public function log($message, $level = self::DEBUG)
    {
    }
    /**
     * Log a debug message
     *
     * @param string message
     */
    public function logDebug($message)
    {
    }
    /**
     * Log an info message
     *
     * @param string message
     */
    public function logInfo($message)
    {
    }
    /**
     * Log a warning message
     *
     * @param string message
     */
    public function logWarning($message)
    {
    }
    /**
     * Log an error message
     *
     * @param string message
     */
    public function logError($message)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class Validate
{
    const ADMIN_PASSWORD_LENGTH = 8;
    const PASSWORD_LENGTH = 5;
    public static function isIp2Long($ip)
    {
    }
    public static function isAnything()
    {
    }
    /**
     * Check for e-mail validity
     *
     * @param string $email e-mail address to validate
     * @return bool Validity is ok or not
     */
    public static function isEmail($email)
    {
    }
    /**
     * Check for module URL validity
     *
     * @param string $url module URL to validate
     * @param array $errors Reference array for catching errors
     * @return bool Validity is ok or not
     */
    public static function isModuleUrl($url, &$errors)
    {
    }
    /**
     * Check for MD5 string validity
     *
     * @param string $md5 MD5 string to validate
     * @return bool Validity is ok or not
     */
    public static function isMd5($md5)
    {
    }
    /**
     * Check for SHA1 string validity
     *
     * @param string $sha1 SHA1 string to validate
     * @return bool Validity is ok or not
     */
    public static function isSha1($sha1)
    {
    }
    /**
     * Check for a float number validity
     *
     * @param float $float Float number to validate
     * @return bool Validity is ok or not
     */
    public static function isFloat($float)
    {
    }
    public static function isUnsignedFloat($float)
    {
    }
    /**
     * Check for a float number validity
     *
     * @param float $float Float number to validate
     * @return bool Validity is ok or not
     */
    public static function isOptFloat($float)
    {
    }
    /**
     * Check for a carrier name validity
     *
     * @param string $name Carrier name to validate
     * @return bool Validity is ok or not
     */
    public static function isCarrierName($name)
    {
    }
    /**
     * Check for an image size validity
     *
     * @param string $size Image size to validate
     * @return bool Validity is ok or not
     */
    public static function isImageSize($size)
    {
    }
    /**
     * Check for name validity
     *
     * @param string $name Name to validate
     * @return bool Validity is ok or not
     */
    public static function isName($name)
    {
    }
    /**
     * Check for hook name validity
     *
     * @param string $hook Hook name to validate
     * @return bool Validity is ok or not
     */
    public static function isHookName($hook)
    {
    }
    /**
     * Check for sender name validity
     *
     * @param string $mail_name Sender name to validate
     * @return bool Validity is ok or not
     */
    public static function isMailName($mail_name)
    {
    }
    /**
     * Check for e-mail subject validity
     *
     * @param string $mail_subject e-mail subject to validate
     * @return bool Validity is ok or not
     */
    public static function isMailSubject($mail_subject)
    {
    }
    /**
     * Check for module name validity
     *
     * @param string $module_name Module name to validate
     * @return bool Validity is ok or not
     */
    public static function isModuleName($module_name)
    {
    }
    /**
     * Check for template name validity
     *
     * @param string $tpl_name Template name to validate
     * @return bool Validity is ok or not
     */
    public static function isTplName($tpl_name)
    {
    }
    /**
     * Check for image type name validity
     *
     * @param string $type Image type name to validate
     * @return bool Validity is ok or not
     */
    public static function isImageTypeName($type)
    {
    }
    /**
     * Check for price validity
     *
     * @param string $price Price to validate
     * @return bool Validity is ok or not
     */
    public static function isPrice($price)
    {
    }
    /**
     * Check for price validity (including negative price)
     *
     * @param string $price Price to validate
     * @return bool Validity is ok or not
     */
    public static function isNegativePrice($price)
    {
    }
    /**
     * Check for language code (ISO) validity
     *
     * @param string $iso_code Language code (ISO) to validate
     * @return bool Validity is ok or not
     */
    public static function isLanguageIsoCode($iso_code)
    {
    }
    public static function isLanguageCode($s)
    {
    }
    /**
     * @link https://en.wikipedia.org/wiki/IETF_language_tag#ISO_3166-1_and_UN_M.49
     * @param string $s
     * @return bool
     */
    public static function isLocale($s)
    {
    }
    public static function isStateIsoCode($iso_code)
    {
    }
    public static function isNumericIsoCode($iso_code)
    {
    }
    /**
     * Check for voucher name validity
     *
     * @param string $voucher voucher to validate
     * @return bool Validity is ok or not
     */
    public static function isDiscountName($voucher)
    {
    }
    /**
     * Check for product or category name validity
     *
     * @param string $name Product or category name to validate
     * @return bool Validity is ok or not
     */
    public static function isCatalogName($name)
    {
    }
    /**
     * Check for a message validity
     *
     * @param string $message Message to validate
     * @return bool Validity is ok or not
     */
    public static function isMessage($message)
    {
    }
    /**
     * Check for a country name validity
     *
     * @param string $name Country name to validate
     * @return bool Validity is ok or not
     */
    public static function isCountryName($name)
    {
    }
    /**
     * Check for a link (url-rewriting only) validity
     *
     * @param string $link Link to validate
     * @return bool Validity is ok or not
     */
    public static function isLinkRewrite($link)
    {
    }
    /**
     * Check for a route pattern validity
     *
     * @param string $pattern to validate
     * @return bool Validity is ok or not
     */
    public static function isRoutePattern($pattern)
    {
    }
    /**
     * Check for a postal address validity
     *
     * @param string $address Address to validate
     * @return bool Validity is ok or not
     */
    public static function isAddress($address)
    {
    }
    /**
     * Check for city name validity
     *
     * @param string $city City name to validate
     * @return bool Validity is ok or not
     */
    public static function isCityName($city)
    {
    }
    /**
     * Check for search query validity
     *
     * @param string $search Query to validate
     * @return bool Validity is ok or not
     */
    public static function isValidSearch($search)
    {
    }
    /**
     * Check for standard name validity
     *
     * @param string $name Name to validate
     * @return bool Validity is ok or not
     */
    public static function isGenericName($name)
    {
    }
    /**
     * Check for HTML field validity (no XSS please !)
     *
     * @param string $html HTML field to validate
     * @return bool Validity is ok or not
     */
    public static function isCleanHtml($html, $allow_iframe = \false)
    {
    }
    /**
     * Check for product reference validity
     *
     * @param string $reference Product reference to validate
     * @return bool Validity is ok or not
     */
    public static function isReference($reference)
    {
    }
    /**
     * Check for password validity
     *
     * @param string $passwd Password to validate
     * @param int $size
     *
     * @return bool Validity is ok or not
     *
     * @deprecated 1.7.0
     */
    public static function isPasswd($passwd, $size = \Validate::PASSWORD_LENGTH)
    {
    }
    /**
     * Check if plaintext password is valid
     * Size is limited by `password_hash()` (72 chars)
     *
     * @param string $plaintextPasswd Password to validate
     * @param int    $size
     *
     * @return bool Indicates whether the given string is a valid plaintext password
     *
     * @since 1.7.0
     */
    public static function isPlaintextPassword($plaintextPasswd, $size = \Validate::PASSWORD_LENGTH)
    {
    }
    /**
     * Check if hashed password is valid
     * PrestaShop supports both MD5 and `PASSWORD_BCRYPT` (PHP API)
     * The lengths are 32 (MD5) or 60 (`PASSWORD_BCRYPT`)
     * Anything else is invalid
     *
     * @param string $hashedPasswd Password to validate
     * @param int    $size
     *
     * @return bool Indicates whether the given string is a valid hashed password
     *
     * @since 1.7.0
     */
    public static function isHashedPassword($hashedPasswd)
    {
    }
    public static function isPasswdAdmin($passwd)
    {
    }
    /**
     * Check for configuration key validity
     *
     * @param string $config_name Configuration key to validate
     * @return bool Validity is ok or not
     */
    public static function isConfigName($config_name)
    {
    }
    /**
     * Check date formats like http://php.net/manual/en/function.date.php
     *
     * @param string $date_format date format to check
     * @return bool Validity is ok or not
     */
    public static function isPhpDateFormat($date_format)
    {
    }
    /**
     * Check for date format
     *
     * @param string $date Date to validate
     * @return bool Validity is ok or not
     */
    public static function isDateFormat($date)
    {
    }
    /**
     * Check for date validity
     *
     * @param string $date Date to validate
     * @return bool Validity is ok or not
     */
    public static function isDate($date)
    {
    }
    public static function isDateOrNull($date)
    {
    }
    /**
     * Check for birthDate validity
     *
     * @param string $date birthdate to validate
     * @return bool Validity is ok or not
     */
    public static function isBirthDate($date)
    {
    }
    /**
     * Check for boolean validity
     *
     * @param bool $bool Boolean to validate
     * @return bool Validity is ok or not
     */
    public static function isBool($bool)
    {
    }
    /**
     * Check for phone number validity
     *
     * @param string $number Phone number to validate
     * @return bool Validity is ok or not
     */
    public static function isPhoneNumber($number)
    {
    }
    /**
     * Check for barcode validity (EAN-13)
     *
     * @param string $ean13 Barcode to validate
     * @return bool Validity is ok or not
     */
    public static function isEan13($ean13)
    {
    }
    /**
     * Check for ISBN
     *
     * @param string $isbn validate
     * @return bool Validity is ok or not
     */
    public static function isIsbn($isbn)
    {
    }
    /**
     * Check for barcode validity (UPC)
     *
     * @param string $upc Barcode to validate
     * @return bool Validity is ok or not
     */
    public static function isUpc($upc)
    {
    }
    /**
     * Check for postal code validity
     *
     * @param string $postcode Postal code to validate
     * @return bool Validity is ok or not
     */
    public static function isPostCode($postcode)
    {
    }
    /**
     * Check for zip code format validity
     *
     * @param string $zip_code zip code format to validate
     * @return bool Validity is ok or not
     */
    public static function isZipCodeFormat($zip_code)
    {
    }
    /**
     * Check for table or identifier validity
     * Mostly used in database for ordering : ASC / DESC
     *
     * @param string $way Keyword to validate
     * @return bool Validity is ok or not
     */
    public static function isOrderWay($way)
    {
    }
    /**
     * Check for table or identifier validity
     * Mostly used in database for ordering : ORDER BY field
     *
     * @param string $order Field to validate
     * @return bool Validity is ok or not
     */
    public static function isOrderBy($order)
    {
    }
    /**
     * Check for table or identifier validity
     * Mostly used in database for table names and id_table
     *
     * @param string $table Table/identifier to validate
     * @return bool Validity is ok or not
     */
    public static function isTableOrIdentifier($table)
    {
    }
    /**
     * Check for tags list validity
     *
     * @param string $list List to validate
     * @return bool Validity is ok or not
     */
    public static function isTagsList($list)
    {
    }
    /**
     * Check for product visibility
     *
     * @param string $s visibility to check
     * @return bool Validity is ok or not
     */
    public static function isProductVisibility($s)
    {
    }
    /**
     * Check for an integer validity
     *
     * @param int $value Integer to validate
     * @return bool Validity is ok or not
     */
    public static function isInt($value)
    {
    }
    /**
     * Check for an integer validity (unsigned)
     *
     * @param int $value Integer to validate
     * @return bool Validity is ok or not
     */
    public static function isUnsignedInt($value)
    {
    }
    /**
     * Check for an percentage validity (between 0 and 100)
     *
     * @param float $value Float to validate
     * @return bool Validity is ok or not
     */
    public static function isPercentage($value)
    {
    }
    /**
     * Check for an integer validity (unsigned)
     * Mostly used in database for auto-increment
     *
     * @param int $id Integer to validate
     * @return bool Validity is ok or not
     */
    public static function isUnsignedId($id)
    {
    }
    public static function isNullOrUnsignedId($id)
    {
    }
    /**
     * Check object validity
     *
     * @param object $object Object to validate
     * @return bool Validity is ok or not
     */
    public static function isLoadedObject($object)
    {
    }
    /**
     * Check object validity
     *
     * @param int $object Object to validate
     * @return bool Validity is ok or not
     */
    public static function isColor($color)
    {
    }
    /**
     * Check url validity (disallowed empty string)
     *
     * @param string $url Url to validate
     * @return bool Validity is ok or not
     */
    public static function isUrl($url)
    {
    }
    /**
     * Check tracking number validity (disallowed empty string)
     *
     * @param string $tracking_number Tracking number to validate
     * @return bool Validity is ok or not
     */
    public static function isTrackingNumber($tracking_number)
    {
    }
    /**
     * Check url validity (allowed empty string)
     *
     * @param string $url Url to validate
     * @return bool Validity is ok or not
     */
    public static function isUrlOrEmpty($url)
    {
    }
    /**
     * Check if URL is absolute
     *
     * @param string $url URL to validate
     * @return bool Validity is ok or not
     */
    public static function isAbsoluteUrl($url)
    {
    }
    public static function isMySQLEngine($engine)
    {
    }
    public static function isUnixName($data)
    {
    }
    public static function isTablePrefix($data)
    {
    }
    /**
     * Check for standard name file validity
     *
     * @param string $name Name to validate
     * @return bool Validity is ok or not
     */
    public static function isFileName($name)
    {
    }
    /**
     * Check for standard name directory validity
     *
     * @param string $dir Directory to validate
     * @return bool Validity is ok or not
     */
    public static function isDirName($dir)
    {
    }
    /**
     * Check for admin panel tab name validity
     *
     * @param string $name Name to validate
     * @return bool Validity is ok or not
     */
    public static function isTabName($name)
    {
    }
    public static function isWeightUnit($unit)
    {
    }
    public static function isDistanceUnit($unit)
    {
    }
    public static function isSubDomainName($domain)
    {
    }
    public static function isVoucherDescription($text)
    {
    }
    /**
     * Check if the value is a sort direction value (DESC/ASC)
     *
     * @param string $value
     * @return bool Validity is ok or not
     */
    public static function isSortDirection($value)
    {
    }
    /**
     * Customization fields' label validity
     *
     * @param string $label
     * @return bool Validity is ok or not
     */
    public static function isLabel($label)
    {
    }
    /**
     * Price display method validity
     *
     * @param int $data Data to validate
     * @return bool Validity is ok or not
     */
    public static function isPriceDisplayMethod($data)
    {
    }
    /**
     * @param string $dni to validate
     * @return bool
     */
    public static function isDniLite($dni)
    {
    }
    /**
     * Check if $data is a PrestaShop cookie object
     *
     * @param mixed $data to validate
     * @return bool
     */
    public static function isCookie($data)
    {
    }
    /**
     * Check if $data is a string
     *
     * @param string $data Data to validate
     * @return bool Validity is ok or not
     */
    public static function isString($data)
    {
    }
    /**
     * Check if the data is a reduction type (amout or percentage)
     *
     * @param string $data Data to validate
     * @return bool Validity is ok or not
     */
    public static function isReductionType($data)
    {
    }
    /**
     * Check for bool_id
     *
     * @param string $ids
     * @return bool Validity is ok or not
     */
    public static function isBoolId($ids)
    {
    }
    /**
     * Check the localization pack part selected
     *
     * @param string $data Localization pack to check
     * @return bool Validity is ok or not
     */
    public static function isLocalizationPackSelection($data)
    {
    }
    /**
     * Check for PHP serialized data
     *
     * @param string $data Serialized data to validate
     * @return bool Validity is ok or not
     */
    public static function isSerializedArray($data)
    {
    }
    /**
     * Check if $string is a valid JSON string
     *
     * @param string $string JSON string to validate
     * @return bool Validity is ok or not
     */
    public static function isJson($string)
    {
    }
    /**
     * Check for Latitude/Longitude
     *
     * @param string $data Coordinate to validate
     * @return bool Validity is ok or not
     */
    public static function isCoordinate($data)
    {
    }
    /**
     * Check for Language Iso Code
     *
     * @param string $iso_code
     * @return bool Validity is ok or not
     */
    public static function isLangIsoCode($iso_code)
    {
    }
    /**
     * Check for Language File Name
     *
     * @param string $file_name
     * @return bool Validity is ok or not
     */
    public static function isLanguageFileName($file_name)
    {
    }
    /**
     *
     * @param array $ids
     * @return bool return true if the array contain only unsigned int value
     */
    public static function isArrayWithIds($ids)
    {
    }
    /**
     *
     * @param array $stock_management
     * @return bool return true if is a valide stock management
     */
    public static function isStockManagement($stock_management)
    {
    }
    /**
     * Validate SIRET Code
     *
     * @param string $siret SIRET Code
     * @return bool Return true if is valid
     */
    public static function isSiret($siret)
    {
    }
    /**
     * Validate APE Code
     *
     * @param string $ape APE Code
     * @return bool Return true if is valid
     */
    public static function isApe($ape)
    {
    }
    public static function isControllerName($name)
    {
    }
    public static function isPrestaShopVersion($version)
    {
    }
    public static function isOrderInvoiceNumber($id)
    {
    }
    public static function isThemeName($theme_name)
    {
    }
}
class LocalizationPack
{
    public $name;
    public $version;
    protected $iso_code_lang;
    protected $iso_currency;
    protected $_errors = array();
    public function loadLocalisationPack($file, $selection, $install_mode = \false, $iso_localization_pack = \null)
    {
    }
    /**
     * @param SimpleXMLElement $xml
     * @return bool
     * @throws PrestaShopException
     */
    protected function _installStates($xml)
    {
    }
    /**
     * @param SimpleXMLElement $xml
     * @return bool
     * @throws PrestaShopException
     */
    protected function _installTaxes($xml)
    {
    }
    /**
     * @param SimpleXMLElement $xml
     * @param bool $install_mode
     * @return bool
     * @throws PrestaShopException
     */
    protected function _installCurrencies($xml, $install_mode = \false)
    {
    }
    /**
     * @param SimpleXMLElement $xml
     * @param bool $install_mode
     * @return bool
     */
    protected function _installLanguages($xml, $install_mode = \false)
    {
    }
    /**
     * @param SimpleXMLElement $xml
     * @return bool
     */
    protected function _installUnits($xml)
    {
    }
    /**
     * Install/Uninstall a module from a localization file
     * <modules>
     *	<module name="module_name" [install="0|1"] />
     *
     * @param SimpleXMLElement $xml
     * @return bool
     */
    protected function installModules($xml)
    {
    }
    /**
     * Update a configuration variable from a localization file
     * <configuration>
     * <configuration name="variable_name" value="variable_value" />
     *
     * @param SimpleXMLElement $xml
     * @return bool
     */
    protected function installConfiguration($xml)
    {
    }
    /**
     * @param SimpleXMLElement $xml
     * @return bool
     */
    protected function _installGroups($xml)
    {
    }
    /**
     * @param SimpleXMLElement $xml
     * @return bool
     */
    protected function updateDefaultGroupDisplayMethod($xml)
    {
    }
    public function getErrors()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * Class PhpEncryption engine for openSSL < 0.9.8.
 *
 * @doc http://php.net/manual/fr/function.mcrypt-encrypt.php#refsect1-function.mcrypt-encrypt-examples
 *
 * This class will be deprecated when web hosting providers will update their version of OpenSSL.
 */
class PhpEncryptionLegacyEngine extends \PhpEncryptionEngine
{
    protected $key;
    /**
     * PhpEncryptionCore constructor.
     *
     * @param string $hexString A string that only contains hexadecimal characters
     *                          Bother upper and lower case are allowed
     */
    public function __construct($hexString)
    {
    }
    /**
     * Encrypt the plaintext.
     *
     * @param string $plaintext Plaintext
     *
     * @return string Cipher text
     */
    public function encrypt($plaintext)
    {
    }
    /**
     * Decrypt the cipher text.
     *
     * @param string $cipherText Cipher text
     *
     * @return bool|string Plaintext
     *                     `false` if unable to decrypt
     *
     * @throws Exception
     */
    public function decrypt($cipherText)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Zone
 */
class Zone extends \ObjectModel
{
    /** @var string Name */
    public $name;
    /** @var bool Zone status */
    public $active = \true;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'zone', 'primary' => 'id_zone', 'fields' => array('name' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'required' => \true, 'size' => 64), 'active' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool')));
    protected $webserviceParameters = array();
    /**
     * Get all available geographical zones
     *
     * @param bool $active
     * @param bool $activeFirst
     *
     * @return array Zones
     */
    public static function getZones($active = \false, $activeFirst = \false)
    {
    }
    /**
     * Get a zone ID from its default language name
     *
     * @param string $name
     *
     * @return int id_zone
     */
    public static function getIdByName($name)
    {
    }
    /**
     * Delete a zone
     *
     * @return bool Deletion result
     */
    public function delete()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Page
 */
class Page extends \ObjectModel
{
    public $id_page_type;
    public $id_object;
    public $name;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'page', 'primary' => 'id_page', 'fields' => array('id_page_type' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_object' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId')));
    /**
     * @return int Current page ID
     */
    public static function getCurrentId()
    {
    }
    /**
     * Return page type ID from page name
     *
     * @param string $name Page name (E.g. product.php)
     */
    public static function getPageTypeByName($name)
    {
    }
    /**
     * Increase page viewed number by one
     *
     * @param int $idPage Page ID
     */
    public static function setPageViewed($idPage)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class CMSCategory extends \ObjectModel
{
    public $id;
    /** @var int CMSCategory ID */
    public $id_cms_category;
    /** @var string Name */
    public $name;
    /** @var bool Status for display */
    public $active = 1;
    /** @var string Description */
    public $description;
    /** @var int Parent CMSCategory ID */
    public $id_parent;
    /** @var  int category position */
    public $position;
    /** @var int Parents number */
    public $level_depth;
    /** @var string string used in rewrited URL */
    public $link_rewrite;
    /** @var string Meta title */
    public $meta_title;
    /** @var string Meta keywords */
    public $meta_keywords;
    /** @var string Meta description */
    public $meta_description;
    /** @var string Object creation date */
    public $date_add;
    /** @var string Object last modification date */
    public $date_upd;
    protected static $_links = array();
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'cms_category', 'primary' => 'id_cms_category', 'multilang' => \true, 'multilang_shop' => \true, 'fields' => array(
        'active' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool', 'required' => \true),
        'id_parent' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt', 'required' => \true),
        'position' => array('type' => self::TYPE_INT),
        'level_depth' => array('type' => self::TYPE_INT),
        'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'),
        'date_upd' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'),
        /* Lang fields */
        'name' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isCatalogName', 'required' => \true, 'size' => 64),
        'link_rewrite' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isLinkRewrite', 'required' => \true, 'size' => 64),
        'description' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isCleanHtml'),
        'meta_title' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'size' => 128),
        'meta_description' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'size' => 255),
        'meta_keywords' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'size' => 255),
    ));
    public function add($autodate = \true, $null_values = \false)
    {
    }
    public function update($null_values = \false)
    {
    }
    /**
     * Recursive scan of subcategories
     *
     * @param int $max_depth Maximum depth of the tree (i.e. 2 => 3 levels depth)
     * @param int $currentDepth specify the current depth in the tree (don't use it, only for rucursivity!)
     * @param array $excluded_ids_array specify a list of ids to exclude of results
     * @param int $idLang Specify the id of the language used
     *
     * @return array Subcategories lite tree
     */
    public function recurseLiteCategTree($max_depth = 3, $currentDepth = 0, $id_lang = \null, $excluded_ids_array = \null, \Link $link = \null)
    {
    }
    public static function getRecurseCategory($id_lang = \null, $current = 1, $active = 1, $links = 0, \Link $link = \null)
    {
    }
    public static function recurseCMSCategory($categories, $current, $id_cms_category = 1, $id_selected = 1, $is_html = 0)
    {
    }
    /**
     * Recursively add specified CMSCategory childs to $toDelete array
     *
     * @param array &$toDelete Array reference where categories ID will be saved
     * @param array|int $id_cms_category Parent CMSCategory ID
     */
    protected function recursiveDelete(&$to_delete, $id_cms_category)
    {
    }
    public function delete()
    {
    }
    /**
     * Delete several categories from database
     *
     * return boolean Deletion result
     */
    public function deleteSelection($categories)
    {
    }
    /**
     * Get the number of parent categories
     *
     * @return int Level depth
     */
    public function calcLevelDepth()
    {
    }
    /**
     * Return available categories
     *
     * @param int $id_lang Language ID
     * @param bool $active return only active categories
     * @return array Categories
     */
    public static function getCategories($id_lang, $active = \true, $order = \true)
    {
    }
    public static function getSimpleCategories($id_lang)
    {
    }
    /**
     * Return current CMSCategory childs
     *
     * @param int $id_lang Language ID
     * @param bool $active return only active categories
     * @return array Categories
     */
    public function getSubCategories($id_lang, $active = \true)
    {
    }
    /**
     * Hide CMSCategory prefix used for position
     *
     * @param string $name CMSCategory name
     * @return string Name without position
     */
    public static function hideCMSCategoryPosition($name)
    {
    }
    /**
     * Return main categories
     *
     * @param int $id_lang Language ID
     * @param bool $active return only active categories
     * @return array categories
     */
    public static function getHomeCategories($id_lang, $active = \true)
    {
    }
    public static function getChildren($id_parent, $id_lang, $active = \true)
    {
    }
    /**
     * Check if CMSCategory can be moved in another one
     *
     * @param int $id_parent Parent candidate
     * @return bool Parent validity
     */
    public static function checkBeforeMove($id_cms_category, $id_parent)
    {
    }
    public static function getLinkRewrite($id_cms_category, $id_lang)
    {
    }
    public function getLink(\Link $link = \null)
    {
    }
    public function getName($id_lang = \null)
    {
    }
    /**
     * Light back office search for categories
     *
     * @param int $id_lang Language ID
     * @param string $query Searched string
     * @param bool $unrestricted allows search without lang and includes first CMSCategory and exact match
     * @return array Corresponding categories
     */
    public static function searchByName($id_lang, $query, $unrestricted = \false)
    {
    }
    /**
     * Retrieve CMSCategory by name and parent CMSCategory id
     *
     * @param int $id_lang Language ID
     * @param string  $CMSCategory_name Searched CMSCategory name
     * @param int $id_parent_CMSCategory parent CMSCategory ID
     * @return array Corresponding CMSCategory
     * @deprecated 1.5.3.0
     */
    public static function searchByNameAndParentCMSCategoryId($id_lang, $CMSCategory_name, $id_parent_CMSCategory)
    {
    }
    /**
     * Get Each parent CMSCategory of this CMSCategory until the root CMSCategory
     *
     * @param int $id_lang Language ID
     * @return array Corresponding categories
     */
    public function getParentsCategories($id_lang = \null)
    {
    }
    public function updatePosition($way, $position)
    {
    }
    public static function cleanPositions($id_category_parent)
    {
    }
    public static function getLastPosition($id_category_parent)
    {
    }
    public static function getUrlRewriteInformations($id_category)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * Class Windows, used to improve the experience
 * when using PrestaShop on Windows operating system.
 */
class Windows
{
    public static function improveFilesytemPerformances()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class CartRule
 */
class CartRule extends \ObjectModel
{
    /* Filters used when retrieving the cart rules applied to a cart of when calculating the value of a reduction */
    const FILTER_ACTION_ALL = 1;
    const FILTER_ACTION_SHIPPING = 2;
    const FILTER_ACTION_REDUCTION = 3;
    const FILTER_ACTION_GIFT = 4;
    const FILTER_ACTION_ALL_NOCAP = 5;
    const BO_ORDER_CODE_PREFIX = 'BO_ORDER_';
    /**
     * This variable controls that a free gift is offered only once, even when multi-shippping is activated 
     * and the same product is delivered in both addresses
     *
     * @var array
     */
    protected static $only_one_gift = array();
    public $id;
    public $name;
    public $id_customer;
    public $date_from;
    public $date_to;
    public $description;
    public $quantity = 1;
    public $quantity_per_user = 1;
    public $priority = 1;
    public $partial_use = 1;
    public $code;
    public $minimum_amount;
    public $minimum_amount_tax;
    public $minimum_amount_currency;
    public $minimum_amount_shipping;
    public $country_restriction;
    public $carrier_restriction;
    public $group_restriction;
    public $cart_rule_restriction;
    public $product_restriction;
    public $shop_restriction;
    public $free_shipping;
    public $reduction_percent;
    public $reduction_amount;
    public $reduction_tax;
    public $reduction_currency;
    public $reduction_product;
    public $reduction_exclude_special;
    public $gift_product;
    public $gift_product_attribute;
    public $highlight;
    public $active = 1;
    public $date_add;
    public $date_upd;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'cart_rule', 'primary' => 'id_cart_rule', 'multilang' => \true, 'fields' => array(
        'id_customer' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'),
        'date_from' => array('type' => self::TYPE_DATE, 'validate' => 'isDate', 'required' => \true),
        'date_to' => array('type' => self::TYPE_DATE, 'validate' => 'isDate', 'required' => \true),
        'description' => array('type' => self::TYPE_STRING, 'validate' => 'isCleanHtml', 'size' => 65534),
        'quantity' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'),
        'quantity_per_user' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'),
        'priority' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'),
        'partial_use' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'code' => array('type' => self::TYPE_STRING, 'validate' => 'isCleanHtml', 'size' => 254),
        'minimum_amount' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat'),
        'minimum_amount_tax' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'minimum_amount_currency' => array('type' => self::TYPE_INT, 'validate' => 'isInt'),
        'minimum_amount_shipping' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'country_restriction' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'carrier_restriction' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'group_restriction' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'cart_rule_restriction' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'product_restriction' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'shop_restriction' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'free_shipping' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'reduction_percent' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPercentage'),
        'reduction_amount' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat'),
        'reduction_tax' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'reduction_currency' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'),
        'reduction_product' => array('type' => self::TYPE_INT, 'validate' => 'isInt'),
        'reduction_exclude_special' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'gift_product' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'),
        'gift_product_attribute' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'),
        'highlight' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'active' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'),
        'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'),
        'date_upd' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'),
        /* Lang fields */
        'name' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isCleanHtml', 'required' => \true, 'size' => 254),
    ));
    /**
     * Adds current CartRule as a new Object to the database
     *
     * @param bool $autodate    Automatically set `date_upd` and `date_add` columns
     * @param bool $null_values Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Indicates whether the CartRule has been successfully added
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function add($autodate = \true, $null_values = \false)
    {
    }
    /**
     * Updates the current object in the database
     *
     * @param bool $null_values Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Indicates whether the CartRule has been successfully updated
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function update($null_values = \false)
    {
    }
    /**
     * Deletes current CartRule from the database
     *
     * @return bool True if delete was successful
     * @throws PrestaShopException
     */
    public function delete()
    {
    }
    /**
     * Copy conditions from one CartRule to another
     *
     * @param int $id_cart_rule_source      Source CartRule ID
     * @param int $id_cart_rule_destination Destination CartRule ID
     */
    public static function copyConditions($id_cart_rule_source, $id_cart_rule_destination)
    {
    }
    /**
     * Retrieves the CartRule ID associated with the given voucher code
     *
     * @param string $code Voucher code
     *
     * @return int|bool CartRule ID
     *                  false if not found
     */
    public static function getIdByCode($code)
    {
    }
    /**
     * Get CartRules for the given Customer
     *
     * @param int       $id_lang            Language ID
     * @param int       $id_customer        Customer ID
     * @param bool      $active             Active vouchers only
     * @param bool      $includeGeneric     Include generic AND highlighted vouchers, regardless of highlight_only setting
     * @param bool      $inStock            Vouchers in stock only
     * @param Cart|null $cart               Cart
     * @param bool      $free_shipping_only Free shipping only
     * @param bool      $highlight_only     Highlighted vouchers only
     * @return array
     * @throws PrestaShopDatabaseException
     */
    public static function getCustomerCartRules($id_lang, $id_customer, $active = \false, $includeGeneric = \true, $inStock = \false, \Cart $cart = \null, $free_shipping_only = \false, $highlight_only = \false)
    {
    }
    public static function getCustomerHighlightedDiscounts($languageId, $customerId, \Cart $cart)
    {
    }
    /**
     * Check if the CartRule has been used by the given Customer
     *
     * @param int $id_customer Customer ID
     * @return bool Indicates if the CartRule has been used by a Customer
     *              The Cart must have been converted into an Order, otherwise it doesn't count
     */
    public function usedByCustomer($id_customer)
    {
    }
    /**
     * Check if the CartRule exists
     *
     * @param string $name CartRule name
     *
     * @return bool Indicates whether the CartRule can be found
     */
    public static function cartRuleExists($name)
    {
    }
    /**
     * Delete CartRules by Customer ID
     *
     * @param int $id_customer Customer ID
     *
     * @return bool Indicates if the CartRules were successfully deleted
     */
    public static function deleteByIdCustomer($id_customer)
    {
    }
    /**
     *
     *
     * @return array
     */
    public function getProductRuleGroups()
    {
    }
    /**
     * @param $id_product_rule_group
     *
     * @return array ('type' => ? , 'values' => ?)
     */
    public function getProductRules($id_product_rule_group)
    {
    }
    /**
     * Check if this CartRule can be applied
     *
     * @param Context $context Context instance
     * @param bool $alreadyInCart Check if the voucher is already on the cart
     * @param bool $display_error Display error
     *
     * @return bool|mixed|string
     */
    public function checkValidity(\Context $context, $alreadyInCart = \false, $display_error = \true, $check_carrier = \true)
    {
    }
    protected function checkProductRestrictions(\Context $context, $return_products = \false, $display_error = \true, $already_in_cart = \false)
    {
    }
    /**
     * The reduction value is POSITIVE
     *
     * @param bool    $use_tax   Apply taxes
     * @param Context $context   Context instance
     * @param bool    $use_cache Allow using cache to avoid multiple free gift using multishipping
     *
     * @return float|int|string
     */
    public function getContextualValue($use_tax, \Context $context = \null, $filter = \null, $package = \null, $use_cache = \true)
    {
    }
    /**
     * Make sure caches are empty
     * Must be called before calling multiple time getContextualValue()
     */
    public static function cleanCache()
    {
    }
    /**
     * Get CartRule combinations
     *
     * @param int    $offset Offset
     * @param int    $limit Limit
     * @param string $search Search query
     *
     * @return array CartRule search results
     */
    protected function getCartRuleCombinations($offset = \null, $limit = \null, $search = '')
    {
    }
    /**
     * Get associated restrictions
     *
     * @param string $type Restriction type
     *                     Can be one of the following:
     *                     - country
     *                     - carrier
     *                     - group
     *                     - cart_rule
     *                     - shop
     * @param bool   $active_only Only return active restrictions
     * @param bool   $i18n Join with associated language table
     * @param int    $offset Search offset
     * @param int    $limit Search results limit
     * @param string $search_cart_rule_name CartRule name to search for
     *
     * @return array|bool Array with DB rows of requested type
     * @throws PrestaShopDatabaseException
     */
    public function getAssociatedRestrictions($type, $active_only, $i18n, $offset = \null, $limit = \null, $search_cart_rule_name = '')
    {
    }
    /**
     * Automatically add this CartRule to the Cart
     *
     * @param Context|null $context Context instance
     *
     * @return void
     */
    public static function autoAddToCart(\Context $context = \null)
    {
    }
    /**
     * Automatically remove this CartRule from the Cart
     *
     * @param Context|null $context Context instance
     *
     * @return array Error messages
     */
    public static function autoRemoveFromCart(\Context $context = \null)
    {
    }
    /**
     * Check if the CartRule feature is active
     * It becomes active after adding the first CartRule to the store
     *
     * @return bool Indicates whether the CartRule feature is active
     */
    public static function isFeatureActive()
    {
    }
    /**
     * CartRule cleanup
     * When an entity associated to a product rule
     * (product, category, attribute, supplier, manufacturer...)
     * is deleted, the product rules must be updated
     *
     * @param string $type Entity type
     *                     Can be one of the following:
     *                     - products
     *                     - categories
     *                     - attributes
     *                     - manufacturers
     *                     - suppliers
     * @param array  $list Entities
     *
     * @return bool Indicates whether the cleanup was successful
     */
    public static function cleanProductRuleIntegrity($type, $list)
    {
    }
    /**
     * Get CartRules by voucher code
     *
     * @param string $name     Name of voucher code
     * @param int    $id_lang  Language ID
     * @param bool   $extended Also search by voucher name
     *
     * @return array Result from database
     */
    public static function getCartsRuleByCode($name, $id_lang, $extended = \false)
    {
    }
    /**
     * CartRules compare function to use the Product and the rules
     *
     * @param array $products List of Products from the cart,
     * @param array $eligibleProducts List of Product eligible for rules,
     * @param string $ruleType name of the rule,
     *
     * @return array Product selected who are eligible
     */
    protected function filterProducts($products, $eligibleProducts, $ruleType)
    {
    }
}
abstract class ObjectModelCore implements \PrestaShop\PrestaShop\Foundation\Database\EntityInterface {
    /**
     * List of field types
     */
    const TYPE_INT = 1;
    const TYPE_BOOL = 2;
    const TYPE_STRING = 3;
    const TYPE_FLOAT = 4;
    const TYPE_DATE = 5;
    const TYPE_HTML = 6;
    const TYPE_NOTHING = 7;
    const TYPE_SQL = 8;
    /**
     * List of data to format
     */
    const FORMAT_COMMON = 1;
    const FORMAT_LANG = 2;
    const FORMAT_SHOP = 3;
    /**
     * List of association types
     */
    const HAS_ONE = 1;
    const HAS_MANY = 2;
    /** @var int Object ID */
    public $id;
    /** @var int Language ID */
    protected $id_lang = \null;
    /** @var int Shop ID */
    protected $id_shop = \null;
    /** @var array|null List of shop IDs */
    public $id_shop_list = \null;
    /** @var bool */
    protected $get_shop_from_context = \true;
    /** @var array|null Holds required fields for each ObjectModel class */
    protected static $fieldsRequiredDatabase = \null;
    /**
     * @deprecated 1.5.0.1 Define property using $definition['table'] property instead.
     * @var string
     */
    protected $table;
    /**
     * @deprecated 1.5.0.1 Define property using $definition['table'] property instead.
     * @var string
     */
    protected $identifier;
    /**
     * @deprecated 1.5.0.1 Define property using $definition['table'] property instead.
     * @var array
     */
    protected $fieldsRequired = array();
    /**
     * @deprecated 1.5.0.1 Define property using $definition['table'] property instead.
     * @var array
     */
    protected $fieldsSize = array();
    /**
     * @deprecated 1.5.0.1 Define property using $definition['table'] property instead.
     * @var array
     */
    protected $fieldsValidate = array();
    /**
     * @deprecated 1.5.0.1 Define property using $definition['table'] property instead.
     * @var array
     */
    protected $fieldsRequiredLang = array();
    /**
     * @deprecated 1.5.0.1 Define property using $definition['table'] property instead.
     * @var array
     */
    protected $fieldsSizeLang = array();
    /**
     * @deprecated 1.5.0.1 Define property using $definition['table'] property instead.
     * @var array
     */
    protected $fieldsValidateLang = array();
    /**
     * @deprecated 1.5.0.1
     * @var array
     */
    protected $tables = array();
    /** @var array Tables */
    protected $webserviceParameters = array();
    /** @var string Path to image directory. Used for image deletion. */
    protected $image_dir = \null;
    /** @var String file type of image files. */
    protected $image_format = 'jpg';
    /** @var PrestaShopBundle\Translation\Translator */
    protected $translator;
    /**
     * @var array Contains object definition
     * @since 1.5.0.1
     */
    public static $definition = array();
    /**
     * Holds compiled definitions of each ObjectModel class.
     * Values are assigned during object initialization.
     *
     * @var array
     */
    protected static $loaded_classes = array();
    /** @var array Contains current object definition. */
    protected $def;
    /** @var array|null List of specific fields to update (all fields if null). */
    protected $update_fields = \null;
    /** @var Db An instance of the db in order to avoid calling Db::getInstance() thousands of times. */
    protected static $db = \false;
    /** @var array|null List of HTML field (based on self::TYPE_HTML)  */
    public static $htmlFields = \null;
    /** @var bool Enables to define an ID before adding object. */
    public $force_id = \false;
    /**
     * @var bool If true, objects are cached in memory.
     */
    protected static $cache_objects = \true;
    public static function getRepositoryClassName()
    {
    }
    /**
     * Returns object validation rules (fields validity)
     *
     * @param  string $class Child class name for static use (optional)
     *
     * @return array Validation rules (fields validity)
     */
    public static function getValidationRules($class = __CLASS__)
    {
    }
    /**
     * Builds the object
     *
     * @param int|null $id      If specified, loads and existing object from DB (optional).
     * @param int|null $id_lang Required if object is multilingual (optional).
     * @param int|null $id_shop ID shop for objects with multishop tables.
     * @param PrestaShopBundle\Translation\Translator
     *
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function __construct($id = \null, $id_lang = \null, $id_shop = \null, $translator = \null)
    {
    }
    protected function trans($id, array $parameters = array(), $domain = \null, $locale = \null)
    {
    }
    /**
     * Prepare fields for ObjectModel class (add, update)
     * All fields are verified (pSQL, intval, ...)
     *
     * @return array All object fields
     * @throws PrestaShopException
     */
    public function getFields()
    {
    }
    /**
     * Prepare fields for multishop
     * Fields are not validated here, we consider they are already validated in getFields() method,
     * this is not the best solution but this is the only one possible for retro compatibility.
     *
     * @since 1.5.0.1
     * @return array All object fields
     */
    public function getFieldsShop()
    {
    }
    /**
     * Prepare multilang fields
     *
     * @since 1.5.0.1
     *
     * @return array
     * @throws PrestaShopException
     */
    public function getFieldsLang()
    {
    }
    /**
     * Formats values of each fields.
     *
     * @since 1.5.0.1
     * @param int $type    FORMAT_COMMON or FORMAT_LANG or FORMAT_SHOP
     * @param int $id_lang If this parameter is given, only take lang fields
     *
     * @return array
     */
    protected function formatFields($type, $id_lang = \null)
    {
    }
    /**
     * Formats a value
     *
     * @param mixed	$value
     * @param int	$type
     * @param bool	$with_quotes
     * @param bool	$purify
     * @param bool	$allow_null
     * @return mixed
     */
    public static function formatValue($value, $type, $with_quotes = \false, $purify = \true, $allow_null = \false)
    {
    }
    /**
     * Saves current object to database (add or update)
     *
     * @param bool $null_values
     * @param bool $auto_date
     *
     * @return bool Insertion result
     * @throws PrestaShopException
     */
    public function save($null_values = \false, $auto_date = \true)
    {
    }
    /**
     * Adds current object to the database
     *
     * @param bool $auto_date
     * @param bool $null_values
     *
     * @return bool Insertion result
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function add($auto_date = \true, $null_values = \false)
    {
    }
    /**
     * Takes current object ID, gets its values from database,
     * saves them in a new row and loads newly saved values as a new object.
     *
     * @return ObjectModel|false
     * @throws PrestaShopDatabaseException
     */
    public function duplicateObject()
    {
    }
    /**
     * Updates the current object in the database
     *
     * @param bool $null_values
     *
     * @return bool
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function update($null_values = \false)
    {
    }
    /**
     * Deletes current object from database
     *
     * @return bool True if delete was successful
     * @throws PrestaShopException
     */
    public function delete()
    {
    }
    /**
     * Deletes multiple objects from the database at once
     *
     * @param array $ids Array of objects IDs.
     *
     * @return bool
     */
    public function deleteSelection($ids)
    {
    }
    /**
     * Toggles object status in database
     *
     * @return bool Update result
     * @throws PrestaShopException
     */
    public function toggleStatus()
    {
    }
    /**
     * @deprecated 1.5.0.1 (use getFieldsLang())
     * @param array $fields_array
     *
     * @return array
     * @throws PrestaShopException
     */
    protected function getTranslationsFields($fields_array)
    {
    }
    /**
     * @deprecated 1.5.0.1
     * @param array $fields
     * @param array $fields_array
     * @param int   $id_language
     *
     * @throws PrestaShopException
     */
    protected function makeTranslationFields(&$fields, &$fields_array, $id_language)
    {
    }
    /**
     * Checks if object field values are valid before database interaction
     *
     * @param bool $die
     * @param bool $error_return
     *
     * @return bool|string True, false or error message.
     * @throws PrestaShopException
     */
    public function validateFields($die = \true, $error_return = \false)
    {
    }
    /**
     * Checks if multilingual object field values are valid before database interaction.
     *
     * @param bool $die
     * @param bool $errorReturn
     *
     * @return bool|string True, false or error message.
     * @throws PrestaShopException
     */
    public function validateFieldsLang($die = \true, $errorReturn = \false)
    {
    }
    /**
     * Validate a single field
     *
     * @since 1.5.0.1
     * @param string   $field        Field name
     * @param mixed    $value        Field value
     * @param int|null $id_lang      Language ID
     * @param array    $skip         Array of fields to skip.
     * @param bool     $human_errors If true, uses more descriptive, translatable error strings.
     *
     * @return true|string True or error message string.
     * @throws PrestaShopException
     */
    public function validateField($field, $value, $id_lang = \null, $skip = array(), $human_errors = \false)
    {
    }
    /**
     * Returns field name translation
     *
     * @param string       $field        Field name
     * @param string       $class        ObjectModel class name
     * @param bool         $htmlentities If true, applies htmlentities() to result string
     * @param Context|null $context      Context object
     *
     * @return string
     */
    public static function displayFieldName($field, $class = __CLASS__, $htmlentities = \true, \Context $context = \null)
    {
    }
    /**
     * Validates submitted values and returns an array of errors, if any.
     *
     * @param bool $htmlentities If true, uses htmlentities() for field name translations in errors.
     *
     * @return array
     */
    public function validateController($htmlentities = \true)
    {
    }
    /**
     * Returns webservice parameters of this object.
     *
     * @param string|null $ws_params_attribute_name
     *
     * @return array
     */
    public function getWebserviceParameters($ws_params_attribute_name = \null)
    {
    }
    /**
     * Returns webservice object list.
     *
     * @param string $sql_join
     * @param string $sql_filter
     * @param string $sql_sort
     * @param string $sql_limit
     *
     * @return array|null
     * @throws PrestaShopDatabaseException
     */
    public function getWebserviceObjectList($sql_join, $sql_filter, $sql_sort, $sql_limit)
    {
    }
    /**
     * Validate required fields.
     *
     * @param bool $htmlentities
     *
     * @return array
     * @throws PrestaShopException
     */
    public function validateFieldsRequiredDatabase($htmlentities = \true)
    {
    }
    /**
     * Returns an array of required fields
     *
     * @param bool $all If true, returns required fields of all object classes.
     *
     * @return array|null
     * @throws PrestaShopDatabaseException
     */
    public function getFieldsRequiredDatabase($all = \false)
    {
    }
    /**
     * Returns true if required field exists
     *
     * @param string $field_name to search
     * @param bool $all If true, returns required fields of all object classes.
     *
     * @return boolean
     */
    public function isFieldRequired($field_name, $all = \false)
    {
    }
    /**
     * Caches data about required objects fields in memory
     *
     * @param bool $all If true, caches required fields of all object classes.
     */
    public function cacheFieldsRequiredDatabase($all = \true)
    {
    }
    /**
     * Sets required field for this class in the database.
     *
     * @param array $fields
     *
     * @return bool
     * @throws PrestaShopDatabaseException
     */
    public function addFieldsRequiredDatabase($fields)
    {
    }
    /**
     * Clears cache entries that have this object's ID.
     *
     * @param bool $all If true, clears cache for all objects
     */
    public function clearCache($all = \false)
    {
    }
    /**
     * Checks if current object is associated to a shop.
     *
     * @since 1.5.0.1
     * @param int|null $id_shop
     * @return bool
     */
    public function isAssociatedToShop($id_shop = \null)
    {
    }
    /**
     * This function associate an item to its context
     *
     * @param int|array $id_shops
     *
     * @return bool|void
     * @throws PrestaShopDatabaseException
     */
    public function associateTo($id_shops)
    {
    }
    /**
     * Gets the list of associated shop IDs
     *
     * @since 1.5.0.1
     *
     * @return array
     * @throws PrestaShopDatabaseException
     */
    public function getAssociatedShops()
    {
    }
    /**
     * Copies shop association data from object with specified ID.
     *
     * @since 1.5.0.1
     * @param $id
     *
     * @return bool|void
     * @throws PrestaShopDatabaseException
     */
    public function duplicateShops($id)
    {
    }
    /**
     * Checks if there is more than one entry in associated shop table for current object.
     *
     * @since 1.5.0.1
     *
     * @return bool
     */
    public function hasMultishopEntries()
    {
    }
    /**
     * Checks if object is multi-shop object.
     *
     * @return bool
     */
    public function isMultishop()
    {
    }
    /**
     * Checks if a field is a multi-shop field.
     *
     * @param string $field
     *
     * @return bool
     */
    public function isMultiShopField($field)
    {
    }
    /**
     * Checks if the object is both multi-language and multi-shop.
     *
     * @return bool
     */
    public function isLangMultishop()
    {
    }
    /**
     * Updates a table and splits the common datas and the shop datas.
     *
     * @since 1.5.0.1
     * @param string $classname
     * @param array  $data
     * @param string $where
     *
     * @return bool
     */
    public static function updateMultishopTable($classname, $data, $where = '')
    {
    }
    /**
     * Delete images associated with the object
     *
     * @param bool $force_delete
     *
     * @return bool
     */
    public function deleteImage($force_delete = \false)
    {
    }
    /**
     * Checks if an object exists in database.
     *
     * @param int    $id_entity
     * @param string $table
     *
     * @return bool
     */
    public static function existsInDatabase($id_entity, $table)
    {
    }
    /**
     * Checks if an object type exists in the database.
     *
     * @since 1.5.0.1
     * @param string|null $table             Name of table linked to entity
     * @param bool        $has_active_column True if the table has an active column
     *
     * @return bool
     */
    public static function isCurrentlyUsed($table = \null, $has_active_column = \false)
    {
    }
    /**
     * Fill an object with given data. Data must be an array with this syntax:
     * array(objProperty => value, objProperty2 => value, etc.)
     *
     * @since 1.5.0.1
     * @param array    $data
     * @param int|null $id_lang
     */
    public function hydrate(array $data, $id_lang = \null)
    {
    }
    /**
     * Fill (hydrate) a list of objects in order to get a collection of these objects
     *
     * @since 1.5.0.1
     * @param string    $class   Class of objects to hydrate
     * @param array     $datas   List of data (multi-dimensional array)
     * @param int|null  $id_lang
     *
     * @return array
     * @throws PrestaShopException
     */
    public static function hydrateCollection($class, array $datas, $id_lang = \null)
    {
    }
    /**
     * Returns object definition
     *
     * @param string      $class Name of object
     * @param string|null $field Name of field if we want the definition of one field only
     *
     * @return array
     */
    public static function getDefinition($class, $field = \null)
    {
    }
    /**
     * Retrocompatibility for classes without $definition static
     * @TODO Remove this in 1.6 !
     *
     * @since 1.5.0.1
     */
    protected function setDefinitionRetrocompatibility()
    {
    }
    /**
     * Return the field value for the specified language if the field is multilang,
     * else the field value.
     *
     * @since 1.5.0.1
     * @param string   $field_name
     * @param int|null $id_lang
     *
     * @return mixed
     * @throws PrestaShopException
     */
    public function getFieldByLang($field_name, $id_lang = \null)
    {
    }
    /**
     * Set a list of specific fields to update
     * array(field1 => true, field2 => false,
     * langfield1 => array(1 => true, 2 => false))
     *
     * @since 1.5.0.1
     * @param array $fields
     */
    public function setFieldsToUpdate(array $fields)
    {
    }
    /**
     * Enables object caching
     */
    public static function enableCache()
    {
    }
    /**
     * Disables object caching
     */
    public static function disableCache()
    {
    }
    /**
     * Return HtmlFields for object
     */
    public function getHtmlFields()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * Webservice entity for stock movements
 * @since 1.5.0
 */
class StockMvtWSCore extends \ObjectModel
{
    public $id;
    /**
     * @var string The creation date of the movement
     */
    public $date_add;
    /**
     * @var int The employee id, responsible of the movement
     */
    public $id_employee;
    /**
     * @var string The first name of the employee responsible of the movement
     */
    public $employee_firstname;
    /**
     * @var string The last name of the employee responsible of the movement
     */
    public $employee_lastname;
    /**
     * @var int The stock id on wtich the movement is applied
     */
    public $id_stock;
    /**
     * @var int the quantity of product with is moved
     */
    public $physical_quantity;
    /**
     * @var int id of the movement reason assoiated to the movement
     */
    public $id_stock_mvt_reason;
    /**
     * @var int Used when the movement is due to a customer order
     */
    public $id_order = \null;
    /**
     * @var int detrmine if the movement is a positive or negative operation
     */
    public $sign;
    /**
     * @var int Used when the movement is due to a supplier order
     */
    public $id_supply_order = \null;
    /**
     * @var float Last value of the weighted-average method
     */
    public $last_wa = \null;
    /**
     * @var float Current value of the weighted-average method
     */
    public $current_wa = \null;
    /**
     * @var float The unit price without tax of the product associated to the movement
     */
    public $price_te;
    /**
     * @var int Refers to an other id_stock_mvt : used for LIFO/FIFO implementation in StockManager
     */
    public $referer;
    /**
     * @var int id_product (@see Stock::id_product)
     */
    public $id_product;
    /**
     * @var int id_product_attribute (@see Stock::id_product_attribute)
     */
    public $id_product_attribute;
    /**
     * @var int id_warehouse (@see Stock::id_warehouse)
     */
    public $id_warehouse;
    /**
     * @var int id_currency (@see Warehouse::id_currency)
     */
    public $id_currency;
    /**
     * @var string management_type (@see Warehouse::management_type)
     */
    public $management_type;
    /*
     * @var string : Name of the product (@see Product::getProductName)
     */
    public $product_name;
    /**
     * @var string EAN13 of the product (@see Stock::product_ean13)
     */
    public $ean13;
    /**
     * @var string UPC of the product (@see Stock::product_upc)
     */
    public $upc;
    /**
     * @var string Reference of the product (@see Stock::product_reference)
     */
    public $reference;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'stock_mvt', 'primary' => 'id_stock_mvt', 'fields' => array('id_employee' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'employee_firstname' => array('type' => self::TYPE_STRING, 'validate' => 'isName'), 'employee_lastname' => array('type' => self::TYPE_STRING, 'validate' => 'isName'), 'id_stock' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'physical_quantity' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt', 'required' => \true), 'id_stock_mvt_reason' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_order' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_supply_order' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'sign' => array('type' => self::TYPE_INT, 'validate' => 'isInt', 'required' => \true), 'last_wa' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'current_wa' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'price_te' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice', 'required' => \true), 'referer' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate', 'required' => \true)));
    /**
     * @see ObjectModel::$webserviceParameters
     */
    protected $webserviceParameters = array('fields' => array('id_product' => array('xlink_resource' => 'products'), 'id_product_attribute' => array('xlink_resource' => 'combinations'), 'id_warehouse' => array('xlink_resource' => 'warehouses'), 'id_currency' => array('xlink_resource' => 'currencies'), 'management_type' => array(), 'id_employee' => array('xlink_resource' => 'employees'), 'id_stock' => array('xlink_resource' => 'stocks'), 'id_stock_mvt_reason' => array('xlink_resource' => 'stock_movement_reasons'), 'id_order' => array('xlink_resource' => 'orders'), 'id_supply_order' => array('xlink_resource' => 'supply_orders'), 'product_name' => array('getter' => 'getWSProductName', 'i18n' => \true), 'ean13' => array(), 'upc' => array(), 'reference' => array()), 'hidden_fields' => array('referer', 'employee_firstname', 'employee_lastname'));
    /**
     * Associations tables for attributes that require different tables than stated in ObjectModel::definition
     * @var Array
     */
    protected $tables_assoc = array('id_product' => array('table' => 's'), 'id_product_attribute' => array('table' => 's'), 'id_warehouse' => array('table' => 's'), 'id_currency' => array('table' => 's'), 'management_type' => array('table' => 'w'), 'ean13' => array('table' => 's'), 'upc' => array('table' => 's'), 'reference' => array('table' => 's'));
    /**
     * @see ObjectModel
     */
    public function __construct($id = \null, $id_lang = \null, $id_shop = \null)
    {
    }
    /**
     * @see ObjectModel::getWebserviceObjectList()
     * Added $full for this specific object
     */
    public function getWebserviceObjectList($join, $filter, $sort, $limit, $full = \false)
    {
    }
    /**
     * Webservice : getter for the product name
     */
    public function getWSProductName()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class StockMvtReason extends \ObjectModel
{
    /** @var int identifier of the movement reason */
    public $id;
    /** @var string the name of the movement reason */
    public $name;
    /** @var int detrmine if the movement reason correspond to a positive or negative operation */
    public $sign;
    /** @var string the creation date of the movement reason */
    public $date_add;
    /** @var string the last update date of the movement reason */
    public $date_upd;
    /** @var bool True if the movement reason has been deleted (staying in database as deleted) */
    public $deleted = 0;
    /**
     * @since 1.5.0
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'stock_mvt_reason', 'primary' => 'id_stock_mvt_reason', 'multilang' => \true, 'fields' => array('sign' => array('type' => self::TYPE_INT), 'deleted' => array('type' => self::TYPE_BOOL), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'), 'date_upd' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'), 'name' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'required' => \true, 'size' => 255)));
    /**
     * @see ObjectModel::$webserviceParameters
     */
    protected $webserviceParameters = array('objectsNodeName' => 'stock_movement_reasons', 'objectNodeName' => 'stock_movement_reason', 'fields' => array('sign' => array()));
    /**
     * Gets Stock Mvt Reasons
     *
     * @param int $id_lang
     * @param int $sign Optionnal
     * @return array
     */
    public static function getStockMvtReasons($id_lang, $sign = \null)
    {
    }
    /**
     * Same as StockMvtReason::getStockMvtReasons(), ignoring a specific lists of ids
     *
     * @since 1.5.0
     * @param int $id_lang
     * @param array $ids_ignore
     * @param int $sign optional
     */
    public static function getStockMvtReasonsWithFilter($id_lang, $ids_ignore, $sign = \null)
    {
    }
    /**
     * For a given id_stock_mvt_reason, tells if it exists
     *
     * @since 1.5.0
     * @param int $id_stock_mvt_reason
     * @return bool
     */
    public static function exists($id_stock_mvt_reason)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * Represents one product ordered
 * @since 1.5.0
 */
class SupplyOrderDetail extends \ObjectModel
{
    /**
     * @var int Supply order
     */
    public $id_supply_order;
    /**
     * @var int Product ordered
     */
    public $id_product;
    /**
     * @var int Product attribute ordered
     */
    public $id_product_attribute;
    /**
     * @var string Product reference
     */
    public $reference;
    /**
     * @var string Product supplier reference
     */
    public $supplier_reference;
    /**
     * @var int Product name
     */
    public $name;
    /**
     * @var int Product EAN13
     */
    public $ean13;
    /**
     * @var string Product ISBN
     */
    public $isbn;
    /**
     * @var string UPC
     */
    public $upc;
    /**
     * @var int Currency used to buy this particular product
     */
    public $id_currency;
    /**
     * @var float Exchange rate between $id_currency and SupplyOrder::$id_ref_currency, at the time
     */
    public $exchange_rate;
    /**
     * @var float Unit price without discount, without tax
     */
    public $unit_price_te = 0;
    /**
     * @var int Quantity ordered
     */
    public $quantity_expected = 0;
    /**
     * @var int Quantity received
     */
    public $quantity_received = 0;
    /**
     * @var float This defines the price of the product, considering the number of units to buy.
     * ($unit_price_te * $quantity), without discount, without tax
     */
    public $price_te = 0;
    /**
     * @var float Supplier discount rate for a given product
     */
    public $discount_rate = 0;
    /**
     * @var float Supplier discount value (($discount_rate / 100) * $price_te), without tax
     */
    public $discount_value_te = 0;
    /**
     * @var float ($price_te - $discount_value_te), with discount, without tax
     */
    public $price_with_discount_te = 0;
    /**
     * @var int Tax rate for the given product
     */
    public $tax_rate = 0;
    /**
     * @var float Tax value for the given product
     */
    public $tax_value = 0;
    /**
     * @var float ($price_with_discount_te + $tax_value)
     */
    public $price_ti = 0;
    /**
     * @var float Tax value of the given product after applying the global order discount (i.e. if SupplyOrder::discount_rate is set)
     */
    public $tax_value_with_order_discount = 0;
    /**
     * @var float This is like $price_with_discount_te, considering the global order discount.
     * (i.e. if SupplyOrder::discount_rate is set)
     */
    public $price_with_order_discount_te = 0;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'supply_order_detail', 'primary' => 'id_supply_order_detail', 'fields' => array('id_supply_order' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_product' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_product_attribute' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'reference' => array('type' => self::TYPE_STRING, 'validate' => 'isReference'), 'supplier_reference' => array('type' => self::TYPE_STRING, 'validate' => 'isReference'), 'name' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'required' => \true), 'ean13' => array('type' => self::TYPE_STRING, 'validate' => 'isEan13'), 'isbn' => array('type' => self::TYPE_STRING, 'validate' => 'isIsbn'), 'upc' => array('type' => self::TYPE_STRING, 'validate' => 'isUpc'), 'id_currency' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'exchange_rate' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat', 'required' => \true), 'unit_price_te' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice', 'required' => \true), 'quantity_expected' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt', 'required' => \true), 'quantity_received' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'), 'price_te' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice', 'required' => \true), 'discount_rate' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat', 'required' => \true), 'discount_value_te' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice', 'required' => \true), 'price_with_discount_te' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice', 'required' => \true), 'tax_rate' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat', 'required' => \true), 'tax_value' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice', 'required' => \true), 'price_ti' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice', 'required' => \true), 'tax_value_with_order_discount' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat', 'required' => \true), 'price_with_order_discount_te' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice', 'required' => \true)));
    /**
     * @see ObjectModel::$webserviceParameters
     */
    protected $webserviceParameters = array('objectsNodeName' => 'supply_order_details', 'objectNodeName' => 'supply_order_detail', 'fields' => array('id_supply_order' => array('xlink_resource' => 'supply_orders'), 'id_product' => array('xlink_resource' => 'products'), 'id_product_attribute' => array('xlink_resource' => 'combinations')), 'hidden_fields' => array('id_currency'));
    /**
     * @see ObjectModel::update()
     */
    public function update($null_values = \false)
    {
    }
    /**
     * @see ObjectModel::add()
     */
    public function add($autodate = \true, $null_values = \false)
    {
    }
    /**
     * Calculates all prices for this product based on its quantity and unit price
     * Applies discount if necessary
     * Calculates tax value, function of tax rate
     */
    protected function calculatePrices()
    {
    }
    /**
     * Applies a global order discount rate, for the current product (i.e detail)
     * Calls ObjectModel::update()
     *
     * @param float|int $discount_rate The discount rate in percent (Ex. 5 for 5 percents)
     */
    public function applyGlobalDiscount($discount_rate)
    {
    }
    /**
     * @see ObjectModel::validateController()
     *
     * @param bool $htmlentities Optional
     * @return array Errors, if any..
     */
    public function validateController($htmlentities = \true)
    {
    }
    /**
     * @see ObjectModel::hydrate()
     */
    public function hydrate(array $data, $id_lang = \null)
    {
    }
}
/**
 * Represents quantities available
 * It is either synchronized with Stock or manualy set by the seller
 *
 * @since 1.5.0
 */
class StockAvailable extends \ObjectModel
{
    /** @var int identifier of the current product */
    public $id_product;
    /** @var int identifier of product attribute if necessary */
    public $id_product_attribute;
    /** @var int the shop associated to the current product and corresponding quantity */
    public $id_shop;
    /** @var int the group shop associated to the current product and corresponding quantity */
    public $id_shop_group;
    /** @var int the quantity available for sale */
    public $quantity = 0;
    /** @var bool determine if the available stock value depends on physical stock */
    public $depends_on_stock = \false;
    /** @var bool determine if a product is out of stock - it was previously in Product class */
    public $out_of_stock = \false;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'stock_available', 'primary' => 'id_stock_available', 'fields' => array('id_product' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_product_attribute' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_shop' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_shop_group' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'quantity' => array('type' => self::TYPE_INT, 'validate' => 'isInt', 'required' => \true), 'depends_on_stock' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool', 'required' => \true), 'out_of_stock' => array('type' => self::TYPE_INT, 'validate' => 'isInt', 'required' => \true)));
    /**
     * @see ObjectModel::$webserviceParameters
     */
    protected $webserviceParameters = array('fields' => array('id_product' => array('xlink_resource' => 'products'), 'id_product_attribute' => array('xlink_resource' => 'combinations'), 'id_shop' => array('xlink_resource' => 'shops'), 'id_shop_group' => array('xlink_resource' => 'shop_groups')), 'hidden_fields' => array(), 'objectMethods' => array('add' => 'addWs', 'update' => 'updateWs'));
    /**
     * For a given {id_product, id_product_attribute and id_shop}, gets the stock available id associated
     *
     * @param int $id_product
     * @param int $id_product_attribute Optional
     * @param int $id_shop Optional
     * @return int
     */
    public function updateWs()
    {
    }
    public static function getStockAvailableIdByProductId($id_product, $id_product_attribute = \null, $id_shop = \null)
    {
    }
    /**
     * For a given id_product, synchronizes StockAvailable::quantity with Stock::usable_quantity
     *
     * @param int $id_product
     */
    public static function synchronize($id_product, $order_id_shop = \null)
    {
    }
    /**
     * For a given id_product, sets if stock available depends on stock
     *
     * @param int $id_product
     * @param int $depends_on_stock Optional : true by default
     * @param int $id_shop Optional : gets context by default
     */
    public static function setProductDependsOnStock($id_product, $depends_on_stock = \true, $id_shop = \null, $id_product_attribute = 0)
    {
    }
    /**
     * For a given id_product, sets if product is available out of stocks
     *
     * @param int $id_product
     * @param int $out_of_stock Optional false by default
     * @param int $id_shop Optional gets context by default
     */
    public static function setProductOutOfStock($id_product, $out_of_stock = \false, $id_shop = \null, $id_product_attribute = 0)
    {
    }
    /**
     * For a given id_product and id_product_attribute, gets its stock available
     *
     * @param int $id_product
     * @param int $id_product_attribute Optional
     * @param int $id_shop Optional : gets context by default
     * @return int Quantity
     */
    public static function getQuantityAvailableByProduct($id_product = \null, $id_product_attribute = \null, $id_shop = \null)
    {
    }
    /**
     * Upgrades total_quantity_available after having saved
     * @see ObjectModel::add()
     */
    public function add($autodate = \true, $null_values = \false)
    {
    }
    /**
     * Upgrades total_quantity_available after having update
     * @see ObjectModel::update()
     */
    public function update($null_values = \false)
    {
    }
    /**
     * Upgrades total_quantity_available after having saved
     * @see StockAvailableCore::update()
     * @see StockAvailableCore::add()
     */
    public function postSave()
    {
    }
    /**
     * For a given id_product and id_product_attribute updates the quantity available
     * If $avoid_parent_pack_update is true, then packs containing the given product won't be updated
     *
     * @param int $id_product
     * @param int $id_product_attribute Optional
     * @param int $delta_quantity The delta quantity to update
     * @param int $id_shop Optional
     * @param boolean $add_movement Optional
     * @param array $params Optional
     */
    public static function updateQuantity($id_product, $id_product_attribute, $delta_quantity, $id_shop = \null, $add_movement = \false, $params = array())
    {
    }
    /**
     * For a given id_product and id_product_attribute sets the quantity available
     *
     * @param $id_product
     * @param $id_product_attribute
     * @param $quantity
     * @param null $id_shop
     * @param bool $add_movement
     * @return bool
     */
    public static function setQuantity($id_product, $id_product_attribute, $quantity, $id_shop = \null, $add_movement = \true)
    {
    }
    /**
     * Removes a given product from the stock available
     *
     * @param int $id_product
     * @param int|null $id_product_attribute Optional
     * @param Shop|null $shop Shop id or shop object Optional
     *
     * @return bool
     */
    public static function removeProductFromStockAvailable($id_product, $id_product_attribute = \null, $shop = \null)
    {
    }
    /**
     * Removes all product quantities from all a group of shops
     * If stocks are shared, remoe all old available quantities for all shops of the group
     * Else remove all available quantities for the current group
     *
     * @param ShopGroup $shop_group the ShopGroup object
     */
    public static function resetProductFromStockAvailableByShopGroup(\ShopGroup $shop_group)
    {
    }
    /**
     * For a given product, tells if it depends on the physical (usable) stock
     *
     * @param int $id_product
     * @param int $id_shop Optional : gets context if null @see Context::getContext()
     * @return bool : depends on stock @see $depends_on_stock
     */
    public static function dependsOnStock($id_product, $id_shop = \null)
    {
    }
    /**
     * For a given product, get its "out of stock" flag
     *
     * @param int $id_product
     * @param int $id_shop Optional : gets context if null @see Context::getContext()
     * @return bool : depends on stock @see $depends_on_stock
     */
    public static function outOfStock($id_product, $id_shop = \null)
    {
    }
    /**
     * Add an sql restriction for shops fields - specific to StockAvailable
     *
     * @param DbQuery|string|null $sql   Reference to the query object
     * @param Shop|int|null       $shop  Optional : The shop ID
     * @param string|null         $alias Optional : The current table alias
     *
     * @return string|DbQuery DbQuery object or the sql restriction string
     */
    public static function addSqlShopRestriction($sql = \null, $shop = \null, $alias = \null)
    {
    }
    /**
     * Add sql params for shops fields - specific to StockAvailable
     *
     * @param array $params Reference to the params array
     * @param int $id_shop Optional : The shop ID
     *
     */
    public static function addSqlShopParams(&$params, $id_shop = \null)
    {
    }
    /**
     * Copies stock available content table
     *
     * @param int $src_shop_id
     * @param int $dst_shop_id
     * @return bool
     */
    public static function copyStockAvailableFromShopToShop($src_shop_id, $dst_shop_id)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/*
 * StockManagerFactory : factory of stock manager
 * @since 1.5.0
 */
class StockManagerFactory
{
    /**
     * @var $stock_manager : instance of the current StockManager.
     */
    protected static $stock_manager;
    /**
     * Returns a StockManager
     *
     * @return StockManagerInterface
     */
    public static function getManager()
    {
    }
    /**
     *  Looks for a StockManager in the modules list.
     *
     *  @return StockManagerInterface
     */
    public static function execHookStockManagerFactory()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @since 1.5.0
 */
class SupplyOrderHistory extends \ObjectModel
{
    /**
     * @var int Supply order Id
     */
    public $id_supply_order;
    /**
     * @var int Employee Id
     */
    public $id_employee;
    /**
     * @var string The first name of the employee responsible of the movement
     */
    public $employee_firstname;
    /**
     * @var string The last name of the employee responsible of the movement
     */
    public $employee_lastname;
    /**
     * @var int State of the supply order
     */
    public $id_state;
    /**
     * @var string Date
     */
    public $date_add;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'supply_order_history', 'primary' => 'id_supply_order_history', 'fields' => array('id_supply_order' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_employee' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'employee_firstname' => array('type' => self::TYPE_STRING, 'validate' => 'isName'), 'employee_lastname' => array('type' => self::TYPE_STRING, 'validate' => 'isName'), 'id_state' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate', 'required' => \true)));
    /**
     * @see ObjectModel::$webserviceParameters
     */
    protected $webserviceParameters = array('objectsNodeName' => 'supply_order_histories', 'objectNodeName' => 'supply_order_history', 'fields' => array('id_supply_order' => array('xlink_resource' => 'supply_orders'), 'id_employee' => array('xlink_resource' => 'employees'), 'id_state' => array('xlink_resource' => 'supply_order_states')));
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * Represents the products kept in warehouses
 *
 * @since 1.5.0
 */
class Stock extends \ObjectModel
{
    /** @var int identifier of the warehouse */
    public $id_warehouse;
    /** @var int identifier of the product */
    public $id_product;
    /** @var int identifier of the product attribute if necessary */
    public $id_product_attribute;
    /** @var string Product reference */
    public $reference;
    /** @var int Product EAN13 */
    public $ean13;
    /** @var string Product ISBN */
    public $isbn;
    /** @var string UPC */
    public $upc;
    /** @var int the physical quantity in stock for the current product in the current warehouse */
    public $physical_quantity;
    /** @var int the usable quantity (for sale) of the current physical quantity */
    public $usable_quantity;
    /** @var int the unit price without tax forthe current product */
    public $price_te;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'stock', 'primary' => 'id_stock', 'fields' => array('id_warehouse' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_product' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_product_attribute' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'reference' => array('type' => self::TYPE_STRING, 'validate' => 'isReference'), 'ean13' => array('type' => self::TYPE_STRING, 'validate' => 'isEan13'), 'isbn' => array('type' => self::TYPE_STRING, 'validate' => 'isIsbn'), 'upc' => array('type' => self::TYPE_STRING, 'validate' => 'isUpc'), 'physical_quantity' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt', 'required' => \true), 'usable_quantity' => array('type' => self::TYPE_INT, 'validate' => 'isInt', 'required' => \true), 'price_te' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice', 'required' => \true)));
    /**
     * @see ObjectModel::$webserviceParameters
     */
    protected $webserviceParameters = array('fields' => array('id_warehouse' => array('xlink_resource' => 'warehouses'), 'id_product' => array('xlink_resource' => 'products'), 'id_product_attribute' => array('xlink_resource' => 'combinations'), 'real_quantity' => array('getter' => 'getWsRealQuantity', 'setter' => \false)), 'hidden_fields' => array());
    /**
     * @see ObjectModel::update()
     */
    public function update($null_values = \false)
    {
    }
    /**
     * @see ObjectModel::add()
     */
    public function add($autodate = \true, $null_values = \false)
    {
    }
    /**
     * Gets reference, ean13 , isbn and upc of the current product
     * Stores it in stock for stock_mvt integrity and history purposes
     */
    protected function getProductInformations()
    {
    }
    /**
     * Webservice : used to get the real quantity of a product
     */
    public function getWsRealQuantity()
    {
    }
    public static function deleteStockByIds($id_product = \null, $id_product_attribute = \null)
    {
    }
    public static function productIsPresentInStock($id_product = 0, $id_product_attribute = 0, $id_warehouse = 0)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @since 1.5.0
 */
class SupplyOrderState extends \ObjectModel
{
    /**
     * @var string Name of the state
     */
    public $name;
    /**
     * @var bool Tells if a delivery note can be issued (i.e. the order has been validated)
     */
    public $delivery_note;
    /**
     * @var bool Tells if the order is still editable by an employee (i.e. you can add products)
     */
    public $editable;
    /**
     * @var bool Tells if the the order has been delivered
     */
    public $receipt_state;
    /**
     * @var bool Tells if the the order is in a state corresponding to a product pending receipt
     */
    public $pending_receipt;
    /**
     * @var bool Tells if the the order is in an enclosed state (i.e. terminated, canceled)
     */
    public $enclosed;
    /**
     * @var string Color used to display the state in the specified color (Ex. #FFFF00)
     */
    public $color;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'supply_order_state', 'primary' => 'id_supply_order_state', 'multilang' => \true, 'fields' => array('delivery_note' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'editable' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'receipt_state' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'pending_receipt' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'enclosed' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'color' => array('type' => self::TYPE_STRING, 'validate' => 'isColor'), 'name' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'required' => \true, 'size' => 128)));
    /**
     * @see ObjectModel::$webserviceParameters
     */
    protected $webserviceParameters = array('objectsNodeName' => 'supply_order_states', 'objectNodeName' => 'supply_order_state', 'fields' => array());
    /**
     * Gets the list of supply order statuses
     *
     * @param int $id_state_referrer Optional, used to know what state is available after this one
     * @param int $id_lang Optional Id Language
     * @return array States
     */
    public static function getSupplyOrderStates($id_state_referrer = \null, $id_lang = \null)
    {
    }
    /**
     * Gets the list of supply order statuses
     *
     * @param array $ids Optional Do not include these ids in the result
     * @param int $id_lang Optional
     * @return array
     */
    public static function getStates($ids = \null, $id_lang = \null)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @since 1.5.0
 */
abstract class StockManagerModule extends \Module
{
    public $stock_manager_class;
    public function install()
    {
    }
    public function hookStockManager()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @since 1.5.0
 */
class SupplyOrder extends \ObjectModel
{
    /**
     * @var int Supplier
     */
    public $id_supplier;
    /**
     * @var string Supplier Name
     */
    public $supplier_name;
    /**
     * @var int The language id used on the delivery note
     */
    public $id_lang;
    /**
     * @var int Warehouse where products will be delivered
     */
    public $id_warehouse;
    /**
     * @var int Current state of the order
     */
    public $id_supply_order_state;
    /**
     * @var int Currency used for the order
     */
    public $id_currency;
    /**
     * @var int Currency used by default in main global configuration (i.e. by default for all shops)
     */
    public $id_ref_currency;
    /**
     * @var string Reference of the order
     */
    public $reference;
    /**
     * @var string Date when added
     */
    public $date_add;
    /**
     * @var string Date when updated
     */
    public $date_upd;
    /**
     * @var string Expected delivery date
     */
    public $date_delivery_expected;
    /**
     * @var float Total price without tax
     */
    public $total_te = 0;
    /**
     * @var float Total price after discount, without tax
     */
    public $total_with_discount_te = 0;
    /**
     * @var float Total price with tax
     */
    public $total_ti = 0;
    /**
     * @var float Total tax value
     */
    public $total_tax = 0;
    /**
     * @var float Supplier discount rate (for the whole order)
     */
    public $discount_rate = 0;
    /**
     * @var float Supplier discount value without tax (for the whole order)
     */
    public $discount_value_te = 0;
    /**
     * @var int Tells if this order is a template
     */
    public $is_template = 0;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'supply_order', 'primary' => 'id_supply_order', 'fields' => array('id_supplier' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'supplier_name' => array('type' => self::TYPE_STRING, 'validate' => 'isCatalogName', 'required' => \false), 'id_lang' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_warehouse' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_supply_order_state' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_currency' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_ref_currency' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'reference' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'required' => \true), 'date_delivery_expected' => array('type' => self::TYPE_DATE, 'validate' => 'isDate', 'required' => \true), 'total_te' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'total_with_discount_te' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'total_ti' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'total_tax' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'discount_rate' => array('type' => self::TYPE_FLOAT, 'validate' => 'isFloat', 'required' => \false), 'discount_value_te' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'is_template' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'), 'date_upd' => array('type' => self::TYPE_DATE, 'validate' => 'isDate')));
    /**
     * @see ObjectModel::$webserviceParameters
     */
    protected $webserviceParameters = array('fields' => array('id_supplier' => array('xlink_resource' => 'suppliers'), 'id_lang' => array('xlink_resource' => 'languages'), 'id_warehouse' => array('xlink_resource' => 'warehouses'), 'id_supply_order_state' => array('xlink_resource' => 'supply_order_states'), 'id_currency' => array('xlink_resource' => 'currencies')), 'hidden_fields' => array('id_ref_currency'), 'associations' => array('supply_order_details' => array('resource' => 'supply_order_detail', 'fields' => array('id' => array(), 'id_product' => array(), 'id_product_attribute' => array(), 'supplier_reference' => array(), 'product_name' => array()))));
    /**
     * @see ObjectModel::update()
     */
    public function update($null_values = \false)
    {
    }
    /**
     * @see ObjectModel::add()
     */
    public function add($autodate = \true, $null_values = \false)
    {
    }
    /**
     * Checks all products in this order and calculate prices
     * Applies the global discount if necessary
     */
    protected function calculatePrices()
    {
    }
    /**
     * Retrieves the product entries for the current order
     *
     * @param int $id_lang Optional Id Lang - Uses Context::language::id by default
     * @return array
     */
    public function getEntries($id_lang = \null)
    {
    }
    /**
     * Retrieves the details entries (i.e. products) collection for the current order
     *
     * @return PrestaShopCollection Collection of SupplyOrderDetail
     */
    public function getEntriesCollection()
    {
    }
    /**
     * Check if the order has entries
     *
     * @return bool Has/Has not
     */
    public function hasEntries()
    {
    }
    /**
     * Check if the current state allows to edit the current order
     *
     * @return bool
     */
    public function isEditable()
    {
    }
    /**
     * Checks if the current state allows to generate a delivery note for this order
     *
     * @return bool
     */
    public function isDeliveryNoteAvailable()
    {
    }
    /**
     * Checks if the current state allows to add products in stock
     *
     * @return bool
     */
    public function isInReceiptState()
    {
    }
    /**
     * Historizes the order : its id, its state, and the employee responsible for the current action
     */
    protected function addHistory()
    {
    }
    /**
     * Removes all products from the order
     */
    public function resetProducts()
    {
    }
    /**
     * For a given $id_warehouse, tells if it has pending supply orders
     *
     * @param int $id_warehouse
     * @return bool
     */
    public static function warehouseHasPendingOrders($id_warehouse)
    {
    }
    /**
     * For a given $id_supplier, tells if it has pending supply orders
     *
     * @param int $id_supplier Id Supplier
     * @return bool
     */
    public static function supplierHasPendingOrders($id_supplier)
    {
    }
    /**
     * For a given id or reference, tells if the supply order exists
     *
     * @param int|string $match Either the reference of the order, or the Id of the order
     * @return int SupplyOrder Id
     */
    public static function exists($match)
    {
    }
    /**
     * For a given reference, returns the corresponding supply order
     *
     * @param string $reference Reference of the order
     * @return bool|SupplyOrder
     */
    public static function getSupplyOrderByReference($reference)
    {
    }
    /**
     * @see ObjectModel::hydrate()
     */
    public function hydrate(array $data, $id_lang = \null)
    {
    }
    /**
     * Gets the reference of a given order
     *
     * @param int $id_supply_order
     * @return bool|string
     */
    public static function getReferenceById($id_supply_order)
    {
    }
    public function getAllExpectedQuantity()
    {
    }
    public function getAllReceivedQuantity()
    {
    }
    public function getAllPendingQuantity()
    {
    }
    /*********************************\
     *
     * Webservices Specific Methods
     *
     *********************************/
    /**
     * Webservice : gets the ids supply_order_detail associated to this order
     *
     * @return array
     */
    public function getWsSupplyOrderDetails()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * StockManagerInterface : defines a way to manage stock
 * @since 1.5.0
 */
interface StockManagerInterface
{
    /**
     * Checks if the StockManager is available
     *
     * @return StockManagerInterface
     */
    public static function isAvailable();
    /**
     * For a given product, adds a given quantity
     *
     * @param int $id_product
     * @param int $id_product_attribute
     * @param Warehouse $warehouse
     * @param int $quantity
     * @param int $id_stock_movement_reason
     * @param float $price_te
     * @param bool $is_usable
     * @param int $id_supply_order optionnal
     * @return bool
     */
    public function addProduct($id_product, $id_product_attribute, \Warehouse $warehouse, $quantity, $id_stock_movement_reason, $price_te, $is_usable = \true, $id_supply_order = \null);
    /**
     * For a given product, removes a given quantity
     *
     * @param int $id_product
     * @param int $id_product_attribute
     * @param Warehouse $warehouse
     * @param int $quantity
     * @param int $id_stock_movement_reason
     * @param bool $is_usable
     * @param int $id_order Optionnal
     * @return array - empty if an error occurred | details of removed products quantities with corresponding prices otherwise
     */
    public function removeProduct($id_product, $id_product_attribute, \Warehouse $warehouse, $quantity, $id_stock_movement_reason, $is_usable = \true, $id_order = \null);
    /**
     * For a given product, returns its physical quantity
     * If the given product has combinations and $id_product_attribute is null, returns the sum for all combinations
     *
     * @param int $id_product
     * @param int $id_product_attribute
     * @param array|int $ids_warehouse optional
     * @param bool $usable false default - in this case we retrieve all physical quantities, otherwise we retrieve physical quantities flagged as usable
     * @return int
     */
    public function getProductPhysicalQuantities($id_product, $id_product_attribute, $ids_warehouse = \null, $usable = \false);
    /**
     * For a given product, returns its real quantity
     * If the given product has combinations and $id_product_attribute is null, returns the sum for all combinations
     * Real quantity : (physical_qty + supply_orders_qty - client_orders_qty)
     * If $usable is defined, real quantity: usable_qty + supply_orders_qty - client_orders_qty
     *
     * @param int $id_product
     * @param int $id_product_attribute
     * @param array|int $ids_warehouse optional
     * @param bool $usable false by default
     * @return int
     */
    public function getProductRealQuantities($id_product, $id_product_attribute, $ids_warehouse = \null, $usable = \false);
    /**
     * For a given product, transfers quantities between two warehouses
     * By default, it manages usable quantities
     * It is also possible to transfer a usable quantity from warehouse 1 in an unusable quantity to warehouse 2
     * It is also possible to transfer a usable quantity from warehouse 1 in an unusable quantity to warehouse 1
     *
     * @param int $id_product
     * @param int $id_product_attribute
     * @param int $quantity
     * @param int $warehouse_from
     * @param int $warehouse_to
     * @param bool $usable_from Optional, true by default
     * @param bool $usable_to Optional, true by default
     * @return bool
     */
    public function transferBetweenWarehouses($id_product, $id_product_attribute, $quantity, $warehouse_from, $warehouse_to, $usable_from = \true, $usable_to = \true);
    /**
     * For a given product, returns the time left before being out of stock.
     * By default, for the given product, it will use sum(quantities removed in all warehouses)
     *
     * @param int $id_product
     * @param int $id_product_attribute
     * @param int $coverage
     * @param int $id_warehouse Optional
     * @return int time
     */
    public function getProductCoverage($id_product, $id_product_attribute, $coverage, $id_warehouse = \null);
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @since 1.5.0
 */
class WarehouseProductLocation extends \ObjectModel
{
    /**
     * @var int product ID
     * */
    public $id_product;
    /**
     * @var int product attribute ID
     * */
    public $id_product_attribute;
    /**
     * @var int warehouse ID
     * */
    public $id_warehouse;
    /**
     * @var string location of the product
     * */
    public $location;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'warehouse_product_location', 'primary' => 'id_warehouse_product_location', 'fields' => array('location' => array('type' => self::TYPE_STRING, 'validate' => 'isReference', 'size' => 64), 'id_product' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_product_attribute' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_warehouse' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true)));
    /**
     * @see ObjectModel::$webserviceParameters
     */
    protected $webserviceParameters = array('fields' => array('id_product' => array('xlink_resource' => 'products'), 'id_product_attribute' => array('xlink_resource' => 'combinations'), 'id_warehouse' => array('xlink_resource' => 'warehouses')), 'hidden_fields' => array());
    /**
     * For a given product and warehouse, gets the location
     *
     * @param int $id_product product ID
     * @param int $id_product_attribute product attribute ID
     * @param int $id_warehouse warehouse ID
     * @return string $location Location of the product
     */
    public static function getProductLocation($id_product, $id_product_attribute, $id_warehouse)
    {
    }
    /**
     * For a given product and warehouse, gets the WarehouseProductLocation corresponding ID
     *
     * @param int $id_product
     * @param int $id_product_attribute
     * @param int $id_supplier
     * @return int $id_warehouse_product_location ID of the WarehouseProductLocation
     */
    public static function getIdByProductAndWarehouse($id_product, $id_product_attribute, $id_warehouse)
    {
    }
    /**
     * For a given product, gets its warehouses
     *
     * @param int $id_product
     * @return PrestaShopCollection The type of the collection is WarehouseProductLocation
     */
    public static function getCollection($id_product)
    {
    }
    public static function getProducts($id_warehouse)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * History of receipts
 * @since 1.5.0
 */
class SupplyOrderReceiptHistory extends \ObjectModel
{
    /**
     * @var int Detail of the supply order (i.e. One particular product)
     */
    public $id_supply_order_detail;
    /**
     * @var int Employee
     */
    public $id_employee;
    /**
     * @var string The first name of the employee responsible of the movement
     */
    public $employee_firstname;
    /**
     * @var string The last name of the employee responsible of the movement
     */
    public $employee_lastname;
    /**
     * @var int State
     */
    public $id_supply_order_state;
    /**
     * @var int Quantity delivered
     */
    public $quantity;
    /**
     * @var string Date of delivery
     */
    public $date_add;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'supply_order_receipt_history', 'primary' => 'id_supply_order_receipt_history', 'fields' => array('id_supply_order_detail' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_supply_order_state' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_employee' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'employee_firstname' => array('type' => self::TYPE_STRING, 'validate' => 'isName'), 'employee_lastname' => array('type' => self::TYPE_STRING, 'validate' => 'isName'), 'quantity' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt', 'required' => \true), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate')));
    /**
     * @see ObjectModel::$webserviceParameters
     */
    protected $webserviceParameters = array('objectsNodeName' => 'supply_order_receipt_histories', 'objectNodeName' => 'supply_order_receipt_history', 'fields' => array('id_supply_order_detail' => array('xlink_resource' => 'supply_order_details'), 'id_employee' => array('xlink_resource' => 'employees'), 'id_supply_order_state' => array('xlink_resource' => 'supply_order_states')));
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * StockManager : implementation of StockManagerInterface
 * @since 1.5.0
 */
class StockManager implements \StockManagerInterface
{
    /**
     * @see StockManagerInterface::isAvailable()
     */
    public static function isAvailable()
    {
    }
    /**
     * @see StockManagerInterface::addProduct()
     *
     * @param int           $id_product
     * @param int           $id_product_attribute
     * @param Warehouse     $warehouse
     * @param int           $quantity
     * @param int           $id_stock_mvt_reason
     * @param float         $price_te
     * @param bool          $is_usable
     * @param int|null      $id_supply_order
     * @param Employee|null $employee
     *
     * @return bool
     * @throws PrestaShopException
     */
    public function addProduct($id_product, $id_product_attribute = 0, \Warehouse $warehouse, $quantity, $id_stock_mvt_reason, $price_te, $is_usable = \true, $id_supply_order = \null, $employee = \null)
    {
    }
    /**
     * @see StockManagerInterface::removeProduct()
     *
     * @param int           $id_product
     * @param int|null      $id_product_attribute
     * @param Warehouse     $warehouse
     * @param int           $quantity
     * @param int           $id_stock_mvt_reason
     * @param bool          $is_usable
     * @param int|null      $id_order
     * @param int           $ignore_pack
     * @param Employee|null $employee
     *
     * @return array
     * @throws PrestaShopException
     */
    public function removeProduct($id_product, $id_product_attribute = \null, \Warehouse $warehouse, $quantity, $id_stock_mvt_reason, $is_usable = \true, $id_order = \null, $ignore_pack = 0, $employee = \null)
    {
    }
    /**
     * @see StockManagerInterface::getProductPhysicalQuantities()
     */
    public function getProductPhysicalQuantities($id_product, $id_product_attribute, $ids_warehouse = \null, $usable = \false)
    {
    }
    /**
     * @see StockManagerInterface::getProductRealQuantities()
     */
    public function getProductRealQuantities($id_product, $id_product_attribute, $ids_warehouse = \null, $usable = \false)
    {
    }
    /**
     * @see StockManagerInterface::transferBetweenWarehouses()
     */
    public function transferBetweenWarehouses($id_product, $id_product_attribute, $quantity, $id_warehouse_from, $id_warehouse_to, $usable_from = \true, $usable_to = \true)
    {
    }
    /**
     * @see StockManagerInterface::getProductCoverage()
     * Here, $coverage is a number of days
     * @return int number of days left (-1 if infinite)
     */
    public function getProductCoverage($id_product, $id_product_attribute, $coverage, $id_warehouse = \null)
    {
    }
    /**
     * For a given stock, calculates its new WA(Weighted Average) price based on the new quantities and price
     * Formula : (physicalStock * lastCump + quantityToAdd * unitPrice) / (physicalStock + quantityToAdd)
     *
     * @param Stock|PrestaShopCollection $stock
     * @param int $quantity
     * @param float $price_te
     * @return int WA
     */
    protected function calculateWA(\Stock $stock, $quantity, $price_te)
    {
    }
    /**
     * For a given product, retrieves the stock collection
     *
     * @param int $id_product
     * @param int $id_product_attribute
     * @param int $id_warehouse Optional
     * @param int $price_te Optional
     * @return PrestaShopCollection Collection of Stock
     */
    protected function getStockCollection($id_product, $id_product_attribute, $id_warehouse = \null, $price_te = \null)
    {
    }
    /**
     * For a given product, retrieves the stock in function of the delivery option
     *
     * @param int $id_product
     * @param int $id_product_attribute optional
     * @param array $delivery_option
     * @return int quantity
     */
    public static function getStockByCarrier($id_product = 0, $id_product_attribute = 0, $delivery_option = \null)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * Holds Stock
 *
 * @since 1.5.0
 */
class Warehouse extends \ObjectModel
{
    /** @var int identifier of the warehouse */
    public $id;
    /** @var int Id of the address associated to the warehouse */
    public $id_address;
    /** @var string Reference of the warehouse */
    public $reference;
    /** @var string Name of the warehouse */
    public $name;
    /** @var int Id of the employee who manages the warehouse */
    public $id_employee;
    /** @var int Id of the valuation currency of the warehouse */
    public $id_currency;
    /** @var bool True if warehouse has been deleted (hence, no deletion in DB) */
    public $deleted = 0;
    /**
     * Describes the way a Warehouse is managed
     *
     * @var string enum WA|LIFO|FIFO
     */
    public $management_type;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'warehouse', 'primary' => 'id_warehouse', 'fields' => array('id_address' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'reference' => array('type' => self::TYPE_STRING, 'validate' => 'isString', 'required' => \true, 'size' => 45), 'name' => array('type' => self::TYPE_STRING, 'validate' => 'isString', 'required' => \true, 'size' => 45), 'id_employee' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'management_type' => array('type' => self::TYPE_STRING, 'validate' => 'isStockManagement', 'required' => \true), 'id_currency' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'deleted' => array('type' => self::TYPE_BOOL)));
    /**
     * @see ObjectModel::$webserviceParameters
     */
    protected $webserviceParameters = array('fields' => array('id_address' => array('xlink_resource' => 'addresses'), 'id_employee' => array('xlink_resource' => 'employees'), 'id_currency' => array('xlink_resource' => 'currencies'), 'valuation' => array('getter' => 'getWsStockValue', 'setter' => \false), 'deleted' => array()), 'associations' => array('stocks' => array('resource' => 'stock', 'fields' => array('id' => array())), 'carriers' => array('resource' => 'carrier', 'fields' => array('id' => array())), 'shops' => array('resource' => 'shop', 'fields' => array('id' => array(), 'name' => array()))));
    /**
     * Gets the shops associated to the current warehouse
     *
     * @return array Shops (id, name)
     */
    public function getShops()
    {
    }
    /**
     * Gets the carriers associated to the current warehouse
     *
     * @return array Ids of the associated carriers
     */
    public function getCarriers($return_reference = \false)
    {
    }
    /**
     * Sets the carriers associated to the current warehouse
     *
     * @param array $ids_carriers
     */
    public function setCarriers($ids_carriers)
    {
    }
    /**
     * For a given carrier, removes it from the warehouse/carrier association
     * If $id_warehouse is set, it only removes the carrier for this warehouse
     *
     * @param int $id_carrier Id of the carrier to remove
     * @param int $id_warehouse optional Id of the warehouse to filter
     */
    public static function removeCarrier($id_carrier, $id_warehouse = \null)
    {
    }
    /**
     * Checks if a warehouse is empty - i.e. has no stock
     *
     * @return bool
     */
    public function isEmpty()
    {
    }
    /**
     * Checks if the given warehouse exists
     *
     * @param int $id_warehouse
     * @return bool Exists/Does not exist
     */
    public static function exists($id_warehouse)
    {
    }
    /**
     * For a given {product, product attribute} sets its location in the given warehouse
     * First, for the given parameters, it cleans the database before updating
     *
     * @param int $id_product ID of the product
     * @param int $id_product_attribute Use 0 if this product does not have attributes
     * @param int $id_warehouse ID of the warehouse
     * @param string $location Describes the location (no lang id required)
     * @return bool Success/Failure
     */
    public static function setProductLocation($id_product, $id_product_attribute, $id_warehouse, $location)
    {
    }
    /**
     * Resets all product locations for this warehouse
     */
    public function resetProductsLocations()
    {
    }
    /**
     * For a given {product, product attribute} gets its location in the given warehouse
     *
     * @param int $id_product ID of the product
     * @param int $id_product_attribute Use 0 if this product does not have attributes
     * @param int $id_warehouse ID of the warehouse
     * @return string Location of the product
     */
    public static function getProductLocation($id_product, $id_product_attribute, $id_warehouse)
    {
    }
    /**
     * For a given {product, product attribute} gets warehouse list
     *
     * @param int $id_product ID of the product
     * @param int $id_product_attribute Optional, uses 0 if this product does not have attributes
     * @param int $id_shop Optional, ID of the shop. Uses the context shop id (@see Context::shop)
     * @return array Warehouses (ID, reference/name concatenated)
     */
    public static function getProductWarehouseList($id_product, $id_product_attribute = 0, $id_shop = \null)
    {
    }
    /**
     * Gets available warehouses
     * It is possible via ignore_shop and id_shop to filter the list with shop id
     *
     * @param bool $ignore_shop Optional, false by default - Allows to get only the warehouses that are associated to one/some shops (@see $id_shop)
     * @param int $id_shop Optional, Context::shop::Id by default - Allows to define a specific shop to filter.
     * @return array Warehouses (ID, reference/name concatenated)
     */
    public static function getWarehouses($ignore_shop = \false, $id_shop = \null)
    {
    }
    /**
     * Gets warehouses grouped by shops
     *
     * @return array (of array) Warehouses ID are grouped by shops ID
     */
    public static function getWarehousesGroupedByShops()
    {
    }
    /**
     * Gets the number of products in the current warehouse
     *
     * @return int Number of different id_stock
     */
    public function getNumberOfProducts()
    {
    }
    /**
     * Gets the number of quantities - for all products - in the current warehouse
     *
     * @return int Total Quantity
     */
    public function getQuantitiesOfProducts()
    {
    }
    /**
     * Gets the value of the stock in the current warehouse
     *
     * @return int Value of the stock
     */
    public function getStockValue()
    {
    }
    /**
     * For a given employee, gets the warehouse(s) he/she manages
     *
     * @param int $id_employee Manager ID
     * @return array ids_warehouse Ids of the warehouses
     */
    public static function getWarehousesByEmployee($id_employee)
    {
    }
    /**
     * For a given product, returns the warehouses it is stored in
     *
     * @param int $id_product Product Id
     * @param int $id_product_attribute Optional, Product Attribute Id - 0 by default (no attribues)
     * @return array Warehouses Ids and names
     */
    public static function getWarehousesByProductId($id_product, $id_product_attribute = 0)
    {
    }
    /**
     * For a given $id_warehouse, returns its name
     *
     * @param int $id_warehouse Warehouse Id
     * @return string Name
     */
    public static function getWarehouseNameById($id_warehouse)
    {
    }
    /**
     * For a given pack, returns the warehouse it can be shipped from
     *
     * @param int $id_product
     * @return array|bool id_warehouse or false
     */
    public static function getPackWarehouses($id_product, $id_shop = \null)
    {
    }
    public function resetStockAvailable()
    {
    }
    /*********************************\
     *
     * Webservices Specific Methods
     *
     *********************************/
    /**
     * Webservice : gets the value of the warehouse
     * @return int
     */
    public function getWsStockValue()
    {
    }
    /**
     * Webservice : gets the ids stock associated to this warehouse
     * @return array
     */
    public function getWsStocks()
    {
    }
    /**
     * Webservice : gets the ids shops associated to this warehouse
     * @return array
     */
    public function getWsShops()
    {
    }
    /**
     * Webservice : gets the ids carriers associated to this warehouse
     * @return array
     */
    public function getWsCarriers()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @since 1.5.0 It now defines stock movements when the advanced stock management system is available
 */
class StockMvt extends \ObjectModel
{
    public $id;
    /**
     * @var string The creation date of the movement
     */
    public $date_add;
    /**
     * @var int The employee id, responsible of the movement
     */
    public $id_employee;
    /**
     * @since 1.5.0
     * @var string The first name of the employee responsible of the movement
     */
    public $employee_firstname;
    /**
     * @since 1.5.0
     * @var string The last name of the employee responsible of the movement
     */
    public $employee_lastname;
    /**
     * @since 1.5.0
     * @var int The stock id on wtich the movement is applied
     */
    public $id_stock;
    /**
     * @since 1.5.0
     * @var int the quantity of product with is moved
     */
    public $physical_quantity;
    /**
     * @var int id of the movement reason assoiated to the movement
     */
    public $id_stock_mvt_reason;
    /**
     * @var int Used when the movement is due to a customer order
     */
    public $id_order = \null;
    /**
     * @since 1.5.0
     * @var int detrmine if the movement is a positive or negative operation
     */
    public $sign;
    /**
     * @since 1.5.0
     * @var int Used when the movement is due to a supplier order
     */
    public $id_supply_order = \null;
    /**
     * @since 1.5.0
     * @var float Last value of the weighted-average method
     */
    public $last_wa = \null;
    /**
     * @since 1.5.0
     * @var float Current value of the weighted-average method
     */
    public $current_wa = \null;
    /**
     * @since 1.5.0
     * @var float The unit price without tax of the product associated to the movement
     */
    public $price_te;
    /**
     * @since 1.5.0
     * @var int Refers to an other id_stock_mvt : used for LIFO/FIFO implementation in StockManager
     */
    public $referer;
    /**
     * @deprecated since 1.5.0
     * @deprecated stock movement will not be updated anymore
     */
    public $date_upd;
    /**
     * @deprecated since 1.5.0
     * @see physical_quantity
     * @var int
     */
    public $quantity;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'stock_mvt', 'primary' => 'id_stock_mvt', 'fields' => array('id_employee' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'employee_firstname' => array('type' => self::TYPE_STRING, 'validate' => 'isName'), 'employee_lastname' => array('type' => self::TYPE_STRING, 'validate' => 'isName'), 'id_stock' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'physical_quantity' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt', 'required' => \true), 'id_stock_mvt_reason' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_order' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_supply_order' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'sign' => array('type' => self::TYPE_INT, 'validate' => 'isInt', 'required' => \true), 'last_wa' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'current_wa' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice'), 'price_te' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice', 'required' => \true), 'referer' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate', 'required' => \true)));
    protected $webserviceParameters = array('objectsNodeName' => 'stock_movements', 'objectNodeName' => 'stock_movement', 'fields' => array('id_employee' => array('xlink_resource' => 'employees'), 'id_stock' => array('xlink_resource' => 'stock'), 'id_stock_mvt_reason' => array('xlink_resource' => 'stock_movement_reasons'), 'id_order' => array('xlink_resource' => 'orders'), 'id_supply_order' => array('xlink_resource' => 'supply_order')));
    /**
     * @deprecated since 1.5.0
     *
     * This method no longer exists.
     * There is no equivalent or replacement, considering that this should be handled by inventories.
     */
    public static function addMissingMvt($id_employee)
    {
    }
    /**
     * Gets the negative (decrements the stock) stock mvts that correspond to the given order, for :
     * the given product, in the given quantity.
     *
     * @since 1.5.0
     * @param int $id_order
     * @param int $id_product
     * @param int $id_product_attribute Use 0 if the product does not have attributes
     * @param int $quantity
     * @param int $id_warehouse Optional
     * @return Array mvts
     */
    public static function getNegativeStockMvts($id_order, $id_product, $id_product_attribute, $quantity, $id_warehouse = \null)
    {
    }
    /**
     * For a given product, gets the last positive stock mvt
     *
     * @since 1.5.0
     * @param int $id_product
     * @param int $id_product_attribute Use 0 if the product does not have attributes
     * @return bool|array
     */
    public static function getLastPositiveStockMvt($id_product, $id_product_attribute)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class RangeWeight extends \ObjectModel
{
    public $id_carrier;
    public $delimiter1;
    public $delimiter2;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'range_weight', 'primary' => 'id_range_weight', 'fields' => array('id_carrier' => array('type' => self::TYPE_INT, 'validate' => 'isInt', 'required' => \true), 'delimiter1' => array('type' => self::TYPE_FLOAT, 'validate' => 'isUnsignedFloat', 'required' => \true), 'delimiter2' => array('type' => self::TYPE_FLOAT, 'validate' => 'isUnsignedFloat', 'required' => \true)));
    protected $webserviceParameters = array('objectNodeName' => 'weight_range', 'objectsNodeName' => 'weight_ranges', 'fields' => array('id_carrier' => array('xlink_resource' => 'carriers')));
    /**
     * Override add to create delivery value for all zones
     * @see classes/ObjectModelCore::add()
     *
     * @param bool $null_values
     * @param bool $autodate
     * @return bool Insertion result
     */
    public function add($autodate = \true, $null_values = \false)
    {
    }
    /**
     * Get all available price ranges
     *
     * @return array Ranges
     */
    public static function getRanges($id_carrier)
    {
    }
    public static function rangeExist($id_carrier, $delimiter1, $delimiter2, $id_reference = \null)
    {
    }
    public static function isOverlapping($id_carrier, $delimiter1, $delimiter2, $id_rang = \null)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class RangePrice extends \ObjectModel
{
    public $id_carrier;
    public $delimiter1;
    public $delimiter2;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'range_price', 'primary' => 'id_range_price', 'fields' => array('id_carrier' => array('type' => self::TYPE_INT, 'validate' => 'isInt', 'required' => \true), 'delimiter1' => array('type' => self::TYPE_FLOAT, 'validate' => 'isUnsignedFloat', 'required' => \true), 'delimiter2' => array('type' => self::TYPE_FLOAT, 'validate' => 'isUnsignedFloat', 'required' => \true)));
    protected $webserviceParameters = array('objectsNodeName' => 'price_ranges', 'objectNodeName' => 'price_range', 'fields' => array('id_carrier' => array('xlink_resource' => 'carriers')));
    /**
     * Override add to create delivery value for all zones
     * @see classes/ObjectModelCore::add()
     *
     * @param bool $null_values
     * @param bool $autodate
     * @return bool Insertion result
     */
    public function add($autodate = \true, $null_values = \false)
    {
    }
    /**
     * Get all available price ranges
     *
     * @return array Ranges
     */
    public static function getRanges($id_carrier)
    {
    }
    public static function rangeExist($id_carrier, $delimiter1, $delimiter2, $id_reference = \null)
    {
    }
    public static function isOverlapping($id_carrier, $delimiter1, $delimiter2, $id_rang = \null)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Alias
 */
class Alias extends \ObjectModel
{
    public $alias;
    public $search;
    public $active = \true;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'alias', 'primary' => 'id_alias', 'fields' => array('search' => array('type' => self::TYPE_STRING, 'validate' => 'isValidSearch', 'required' => \true, 'size' => 255), 'alias' => array('type' => self::TYPE_STRING, 'validate' => 'isValidSearch', 'required' => \true, 'size' => 255), 'active' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool')));
    /**
     * AliasCore constructor.
     *
     * @param int|null    $id     Alias ID
     * @param string|null $alias  Alias
     * @param string|null $search Search string
     * @param int|null    $idLang Language ID
     */
    public function __construct($id = \null, $alias = \null, $search = \null, $idLang = \null)
    {
    }
    /**
     * @see ObjectModel::add();
     */
    public function add($autoDate = \true, $nullValues = \false)
    {
    }
    /**
     * @see ObjectModel::delete();
     */
    public function delete()
    {
    }
    /**
     * Get all found aliases from DB with search query
     *
     * @return string Comma separated aliases
     */
    public function getAliases()
    {
    }
    /**
     * This method is allow to know if a feature is used or active
     * @since 1.5.0.1
     *
     * @return bool
     */
    public static function isFeatureActive()
    {
    }
    /**
     * This method is allow to know if a alias exist for AdminImportController
     *
     * @param int $idAlias Alias ID
     *
     * @return bool
     * @since 1.5.6.0
     */
    public static function aliasExists($idAlias)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Attribute
 */
class ProductAttribute extends \ObjectModel
{
    /** @var int Group id which attribute belongs */
    public $id_attribute_group;
    /** @var string Name */
    public $name;
    /** @var string $color */
    public $color;
    /** @var int $position */
    public $position;
    /** @todo Find type */
    public $default;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'attribute', 'primary' => 'id_attribute', 'multilang' => \true, 'fields' => array(
        'id_attribute_group' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true),
        'color' => array('type' => self::TYPE_STRING, 'validate' => 'isColor'),
        'position' => array('type' => self::TYPE_INT, 'validate' => 'isInt'),
        /* Lang fields */
        'name' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'required' => \true, 'size' => 128),
    ));
    /** @var string $image_dir */
    protected $image_dir = \_PS_COL_IMG_DIR_;
    /** @var array $webserviceParameters Web service parameters */
    protected $webserviceParameters = array('objectsNodeName' => 'product_option_values', 'objectNodeName' => 'product_option_value', 'fields' => array('id_attribute_group' => array('xlink_resource' => 'product_options')));
    /**
     * AttributeCore constructor.
     *
     * @param int|null $id     Attribute ID
     * @param int|null $idLang Language ID
     * @param int|null $idShop Shop ID
     */
    public function __construct($id = \null, $idLang = \null, $idShop = \null)
    {
    }
    /**
     * @see ObjectModel::delete()
     */
    public function delete()
    {
    }
    /**
     * @see ObjectModel::update()
     */
    public function update($nullValues = \false)
    {
    }
    /**
     * Adds current Attribute as a new Object to the database
     *
     * @param bool $autoDate   Automatically set `date_upd` and `date_add` column
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Whether the Attribute has been successfully added
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function add($autoDate = \true, $nullValues = \false)
    {
    }
    /**
     * Get all attributes for a given language
     *
     * @param int  $idLang  Language ID
     * @param bool $notNull Get only not null fields if true
     *
     * @return array Attributes
     */
    public static function getAttributes($idLang, $notNull = \false)
    {
    }
    /**
     * Check if the given name is an Attribute within the given AttributeGroup
     *
     * @param int    $idAttributeGroup AttributeGroup
     * @param string $name             Attribute name
     * @param int    $idLang           Language ID
     *
     * @return array|bool
     */
    public static function isAttribute($idAttributeGroup, $name, $idLang)
    {
    }
    /**
     * Get quantity for a given attribute combination
     * Check if quantity is enough to serve the customer
     *
     * @param int  $idProductAttribute Product attribute combination id
     * @param int  $qty                Quantity needed
     * @param Shop $shop               Shop
     *
     * @return bool Quantity is available or not
     */
    public static function checkAttributeQty($idProductAttribute, $qty, \Shop $shop = \null)
    {
    }
    /**
     * Return true if the Attribute is a color
     *
     * @return bool Color is the attribute type
     */
    public function isColorAttribute()
    {
    }
    /**
     * Get minimal quantity for product with attributes quantity
     *
     * @param int $idProductAttribute Product Attribute ID
     *
     * @return mixed Minimal quantity or false if no result
     */
    public static function getAttributeMinimalQty($idProductAttribute)
    {
    }
    /**
     * Move an attribute inside its group
     *
     * @param bool $direction Up (1) or Down (0)
     * @param int  $position  Current position of the attribute
     *
     * @return bool Update result
     */
    public function updatePosition($direction, $position)
    {
    }
    /**
     * Reorder the attribute position within the Attribute group.
     * Call this method after deleting an attribute from a group.
     *
     * @param int  $idAttributeGroup Attribute group ID
     * @param bool $useLastAttribute
     *
     * @return bool Whether the result was successfully updated
     */
    public function cleanPositions($idAttributeGroup, $useLastAttribute = \true)
    {
    }
    /**
     * get highest position
     *
     * Get the highest attribute position from a group attribute
     *
     * @param int $idAttributeGroup AttributeGroup ID
     *
     * @return int $position Position
     * @todo: Shouldn't this be called getHighestPosition instead?
     */
    public static function getHigherPosition($idAttributeGroup)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Media
 */
class Media
{
    public static $jquery_ui_dependencies = array('ui.core' => array('fileName' => 'jquery.ui.core.min.js', 'dependencies' => array(), 'theme' => \true), 'ui.widget' => array('fileName' => 'jquery.ui.widget.min.js', 'dependencies' => array(), 'theme' => \false), 'ui.mouse' => array('fileName' => 'jquery.ui.mouse.min.js', 'dependencies' => array('ui.core', 'ui.widget'), 'theme' => \false), 'ui.position' => array('fileName' => 'jquery.ui.position.min.js', 'dependencies' => array(), 'theme' => \false), 'ui.draggable' => array('fileName' => 'jquery.ui.draggable.min.js', 'dependencies' => array('ui.core', 'ui.widget', 'ui.mouse'), 'theme' => \false), 'ui.droppable' => array('fileName' => 'jquery.ui.droppable.min.js', 'dependencies' => array('ui.core', 'ui.widget', 'ui.mouse', 'ui.draggable'), 'theme' => \false), 'ui.resizable' => array('fileName' => 'jquery.ui.resizable.min.js', 'dependencies' => array('ui.core', 'ui.widget', 'ui.mouse'), 'theme' => \true), 'ui.selectable' => array('fileName' => 'jquery.ui.selectable.min.js', 'dependencies' => array('ui.core', 'ui.widget', 'ui.mouse'), 'theme' => \true), 'ui.sortable' => array('fileName' => 'jquery.ui.sortable.min.js', 'dependencies' => array('ui.core', 'ui.widget', 'ui.mouse'), 'theme' => \true), 'ui.autocomplete' => array('fileName' => 'jquery.ui.autocomplete.min.js', 'dependencies' => array('ui.core', 'ui.widget', 'ui.position', 'ui.menu'), 'theme' => \true), 'ui.button' => array('fileName' => 'jquery.ui.button.min.js', 'dependencies' => array('ui.core', 'ui.widget'), 'theme' => \true), 'ui.dialog' => array('fileName' => 'jquery.ui.dialog.min.js', 'dependencies' => array('ui.core', 'ui.widget', 'ui.position', 'ui.button'), 'theme' => \true), 'ui.menu' => array('fileName' => 'jquery.ui.menu.min.js', 'dependencies' => array('ui.core', 'ui.widget', 'ui.position'), 'theme' => \true), 'ui.slider' => array('fileName' => 'jquery.ui.slider.min.js', 'dependencies' => array('ui.core', 'ui.widget', 'ui.mouse'), 'theme' => \true), 'ui.spinner' => array('fileName' => 'jquery.ui.spinner.min.js', 'dependencies' => array('ui.core', 'ui.widget', 'ui.button'), 'theme' => \true), 'ui.tabs' => array('fileName' => 'jquery.ui.tabs.min.js', 'dependencies' => array('ui.core', 'ui.widget'), 'theme' => \true), 'ui.datepicker' => array('fileName' => 'jquery.ui.datepicker.min.js', 'dependencies' => array('ui.core'), 'theme' => \true), 'ui.progressbar' => array('fileName' => 'jquery.ui.progressbar.min.js', 'dependencies' => array('ui.core', 'ui.widget'), 'theme' => \true), 'ui.tooltip' => array('fileName' => 'jquery.ui.tooltip.min.js', 'dependencies' => array('ui.core', 'ui.widget', 'ui.position', 'effects.core'), 'theme' => \true), 'ui.accordion' => array('fileName' => 'jquery.ui.accordion.min.js', 'dependencies' => array('ui.core', 'ui.widget', 'effects.core'), 'theme' => \true), 'effects.core' => array('fileName' => 'jquery.effects.core.min.js', 'dependencies' => array(), 'theme' => \false), 'effects.blind' => array('fileName' => 'jquery.effects.blind.min.js', 'dependencies' => array('effects.core'), 'theme' => \false), 'effects.bounce' => array('fileName' => 'jquery.effects.bounce.min.js', 'dependencies' => array('effects.core'), 'theme' => \false), 'effects.clip' => array('fileName' => 'jquery.effects.clip.min.js', 'dependencies' => array('effects.core'), 'theme' => \false), 'effects.drop' => array('fileName' => 'jquery.effects.drop.min.js', 'dependencies' => array('effects.core'), 'theme' => \false), 'effects.explode' => array('fileName' => 'jquery.effects.explode.min.js', 'dependencies' => array('effects.core'), 'theme' => \false), 'effects.fade' => array('fileName' => 'jquery.effects.fade.min.js', 'dependencies' => array('effects.core'), 'theme' => \false), 'effects.fold' => array('fileName' => 'jquery.effects.fold.min.js', 'dependencies' => array('effects.core'), 'theme' => \false), 'effects.highlight' => array('fileName' => 'jquery.effects.highlight.min.js', 'dependencies' => array('effects.core'), 'theme' => \false), 'effects.pulsate' => array('fileName' => 'jquery.effects.pulsate.min.js', 'dependencies' => array('effects.core'), 'theme' => \false), 'effects.scale' => array('fileName' => 'jquery.effects.scale.min.js', 'dependencies' => array('effects.core'), 'theme' => \false), 'effects.shake' => array('fileName' => 'jquery.effects.shake.min.js', 'dependencies' => array('effects.core'), 'theme' => \false), 'effects.slide' => array('fileName' => 'jquery.effects.slide.min.js', 'dependencies' => array('effects.core'), 'theme' => \false), 'effects.transfer' => array('fileName' => 'jquery.effects.transfer.min.js', 'dependencies' => array('effects.core'), 'theme' => \false));
    /**
     * @var array list of javascript definitions
     */
    protected static $js_def = array();
    /**
     * @var array list of javascript inline scripts
     */
    protected static $inline_script = array();
    /**
     * @var array list of javascript external scripts
     */
    protected static $inline_script_src = array();
    /**
     * @var string pattern used in replaceByAbsoluteURL
     */
    public static $pattern_callback = '#(url\\((?![\'"]?(?:data:|//|https?:))(?:\'|")?)([^\\)\'"]*)(?=[\'"]?\\))#s';
    /**
     * @var string used for preg_replace_callback parameter (avoid global)
     */
    protected static $current_css_file;
    /**
     * @var string pattern used in packJSinHTML
     */
    public static $pattern_js = '/(<\\s*script(?:\\s+[^>]*(?:javascript|src)[^>]*)?\\s*>)(.*)(<\\s*\\/script\\s*[^>]*>)/Uims';
    protected static $pattern_keepinline = 'data-keepinline';
    /**
     * Minify JS
     *
     * @param string $jsContent
     *
     * @return string
     */
    public static function packJS($jsContent)
    {
    }
    /**
     * Minify CSS
     *
     * @param string $cssContent
     * @param bool   $fileUri
     * @param array  $importUrl
     *
     * @return bool|string
     */
    public static function minifyCSS($cssContent, $fileUri = \false, &$importUrl = array())
    {
    }
    /**
     * Replace URL by absolute URL
     *
     * @param array $matches
     *
     * @return bool|string
     */
    public static function replaceByAbsoluteURL($matches)
    {
    }
    /**
     * addJS return javascript path
     *
     * @param mixed $jsUri
     *
     * @return string
     */
    public static function getJSPath($jsUri)
    {
    }
    /**
     * addCSS return stylesheet path.
     *
     * @param mixed  $cssUri
     * @param string $cssMediaType
     * @param bool   $needRtl
     *
     * @return string
     */
    public static function getCSSPath($cssUri, $cssMediaType = 'all', $needRtl = \true)
    {
    }
    /**
     * Get Media path
     *
     * @param  string $mediaUri
     * @param null    $cssMediaType
     *
     * @return array|bool|mixed|string
     */
    public static function getMediaPath($mediaUri, $cssMediaType = \null)
    {
    }
    /**
     * return jquery path.
     *
     * @param mixed $version
     *
     * @return string
     */
    public static function getJqueryPath($version = \null, $folder = \null, $minifier = \true)
    {
    }
    /**
     * return jqueryUI component path.
     *
     * @param mixed $component
     *
     * @return string
     */
    public static function getJqueryUIPath($component, $theme, $checkDependencies)
    {
    }
    /**
     * return jquery plugin path.
     *
     * @param mixed $name
     * @param string|null  $folder
     *
     * @return bool|string
     */
    public static function getJqueryPluginPath($name, $folder = \null)
    {
    }
    /**
     * return jquery plugin css path if exist.
     *
     * @param mixed       $name
     * @param string|null $folder
     *
     * @return bool|string
     */
    public static function getJqueryPluginCSSPath($name, $folder = \null)
    {
    }
    /**
     * Combine Compress and Cache CSS (ccc) calls
     *
     * @param array $cssFiles
     *
     * @return array processed css_files
     */
    public static function cccCss($cssFiles)
    {
    }
    /**
     * Get backtrack limit
     *
     * @return int|null|string
     */
    public static function getBackTrackLimit()
    {
    }
    /**
     * Combine Compress and Cache (ccc) JS calls
     *
     * @param array $jsFiles
     *
     * @return array processed js_files
     */
    public static function cccJS($jsFiles)
    {
    }
    /**
     * Clear theme cache
     *
     * @return void
     */
    public static function clearCache()
    {
    }
    /**
     * Get JS definitions
     *
     * @return array JS definitions
     */
    public static function getJsDef()
    {
    }
    /**
     * Get JS inline script
     *
     * @return array inline script
     */
    public static function getInlineScript()
    {
    }
    /**
     * Add a new javascript definition at bottom of page
     *
     * @param mixed $jsDef
     *
     * @return void
     */
    public static function addJsDef($jsDef)
    {
    }
    /**
     * Add a new javascript definition from a capture at bottom of page
     *
     * @param mixed $params
     * @param string $content
     * @param Smarty $smarty
     * @param bool $repeat
     *
     * @return void
     */
    public static function addJsDefL($params, $content, $smarty = \null, &$repeat = \false)
    {
    }
    public static function deferInlineScripts($output)
    {
    }
    /**
     * Get all JS scripts and place it to bottom
     * To be used in callback with deferInlineScripts
     *
     * @param array $matches
     *
     * @return bool|string Empty string or original script lines
     */
    public static function deferScript($matches)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class ProductDownload
 */
class ProductDownload extends \ObjectModel
{
    /** @var int Product id which download belongs */
    public $id_product;
    /** @var string DisplayFilename the name which appear */
    public $display_filename;
    /** @var string PhysicallyFilename the name of the file on hard disk */
    public $filename;
    /** @var string DateDeposit when the file is upload */
    public $date_add;
    /** @var string DateExpiration deadline of the file */
    public $date_expiration;
    /** @var string NbDaysAccessible how many days the customer can access to file */
    public $nb_days_accessible;
    /** @var string NbDownloadable how many time the customer can download the file */
    public $nb_downloadable;
    /** @var bool Active if file is accessible or not */
    public $active = 1;
    /** @var bool is_shareable indicates whether the product can be shared */
    public $is_shareable = 0;
    protected static $_productIds = array();
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'product_download', 'primary' => 'id_product_download', 'fields' => array('id_product' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'display_filename' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'size' => 255), 'filename' => array('type' => self::TYPE_STRING, 'validate' => 'isSha1', 'size' => 255), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'), 'date_expiration' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'), 'nb_days_accessible' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt', 'size' => 10), 'nb_downloadable' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt', 'size' => 10), 'active' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'is_shareable' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool')));
    /**
     * Build a virtual product
     *
     * @param int $idProductDownload Existing productDownload id in order to load object (optional)
     */
    public function __construct($idProductDownload = \null)
    {
    }
    /**
     * @see ObjectModel::getFields()
     * @return array
     */
    public function getFields()
    {
    }
    public function add($autoDate = \true, $nullValues = \false)
    {
    }
    public function update($nullValues = \false)
    {
    }
    public function delete($deleteFile = \false)
    {
    }
    /**
     * Delete the file
     *
     * @param int $idProductDownload : if we need to delete a specific product attribute file
     *
     * @return bool
     */
    public function deleteFile($idProductDownload = \null)
    {
    }
    /**
     * Check if file exists
     *
     * @return bool
     */
    public function checkFile()
    {
    }
    /**
     * Check if download repository is writable
     *
     * @return bool
     */
    public static function checkWritableDir()
    {
    }
    /**
     * Return the id_product_download from an id_product
     *
     * @param int $idProduct Product the id
     *
     * @return int Product the id for this virtual product
     */
    public static function getIdFromIdProduct($idProduct, $active = \true)
    {
    }
    /**
     * Return the display filename from a physical filename
     *
     * @param string $filename Filename physically
     * @return int Product the id for this virtual product
     *
     * @since 1.5.0.1
     */
    public static function getIdFromFilename($filename)
    {
    }
    /**
     * Return the filename from a Product ID
     *
     * @param int $idProduct Product ID
     *
     * @return string Filename the filename for this virtual product
     */
    public static function getFilenameFromIdProduct($idProduct)
    {
    }
    /**
     * Return the display filename from a physical filename
     *
     * @param string $filename Filename physically
     * @return string Filename the display filename for this virtual product
     */
    public static function getFilenameFromFilename($filename)
    {
    }
    /**
     * Return text link
     *
     * @param bool $admin specific to backend (optionnal)
     * @param string $hash hash code in table order detail (optionnal)
     *
     * @return string Html all the code for print a link to the file
     */
    public function getTextLink($admin = \true, $hash = \false)
    {
    }
    /**
     * Return html link
     *
     * @param string $class CSS selector
     * @param bool   $admin specific to backend
     * @param bool   $hash  hash code in table order detail
     *
     * @return string Html all the code for print a link to the file
     */
    public function getHtmlLink($class = \false, $admin = \true, $hash = \false)
    {
    }
    /**
     * Return a deadline
     *
     * @return string Datetime in SQL format
     */
    public function getDeadline()
    {
    }
    /**
     * Return a hash for control download access
     *
     * @return string Hash ready to insert in database
     */
    public function getHash()
    {
    }
    /**
     * Return a sha1 filename
     *
     * @return string Sha1 unique filename
     */
    public static function getNewFilename()
    {
    }
    /**
     * This method is allow to know if a feature is used or active
     *
     * @return bool
     *
     * @since 1.5.0.1
     */
    public static function isFeatureActive()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Attachment
 */
class Attachment extends \ObjectModel
{
    public $file;
    public $file_name;
    public $file_size;
    public $name;
    public $mime;
    public $description;
    /** @var int position Position */
    public $position;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'attachment', 'primary' => 'id_attachment', 'multilang' => \true, 'fields' => array(
        'file' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'required' => \true, 'size' => 40),
        'mime' => array('type' => self::TYPE_STRING, 'validate' => 'isCleanHtml', 'required' => \true, 'size' => 128),
        'file_name' => array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'size' => 128),
        'file_size' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'),
        /* Lang fields */
        'name' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'required' => \true, 'size' => 32),
        'description' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isCleanHtml'),
    ));
    /**
     * @see ObjectModel::add()
     */
    public function add($autoDate = \true, $nullValues = \false)
    {
    }
    /**
     * @see ObjectModel::update()
     */
    public function update($nullValues = \false)
    {
    }
    /**
     * @see ObjectModel::delete()
     */
    public function delete()
    {
    }
    /**
     * Delete selection of attachments
     *
     * @param array $attachments Attachments
     *
     * @return bool|int Whether the selection has been successfully deleted
     * @todo: Find out if $return can be initialized with true. (breaking change)
     */
    public function deleteSelection($attachments)
    {
    }
    /**
     * Get attachments
     *
     * @param int  $idLang    Language ID
     * @param int  $idProduct Product ID
     * @param bool $include   Whether the attachments are included or excluded from the Product ID
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource Database query result
     */
    public static function getAttachments($idLang, $idProduct, $include = \true)
    {
    }
    /**
     * Delete Product attachments for the given Product ID
     *
     * @param int $idProduct Product ID
     *
     * @return bool
     */
    public static function deleteProductAttachments($idProduct)
    {
    }
    /**
     * Associate $id_product to the current object.
     *
     * @param int $idProduct id of the product to associate
     *
     * @return bool true if success
     */
    public function attachProduct($idProduct)
    {
    }
    /**
     * Associate an array of id_attachment $array to the product $id_product
     * and remove eventual previous association
     *
     * @param int   $idProduct Product ID
     * @param array $array     Attachment IDs
     *
     * @return bool Whether the attachments have been successfully associated with the Product
     */
    public static function attachToProduct($idProduct, $array)
    {
    }
    /**
     * Get Attachment IDs for the given Product within the given range of attachment IDs
     *
     * @param int   $idLang Language ID
     * @param array $list   List of attachment IDs in which to search
     *
     * @return array|bool List of attachment IDs found. False if nothing found.
     */
    public static function getProductAttached($idLang, $list)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Notification
 */
class Notification
{
    public $types;
    /**
     * NotificationCore constructor.
     */
    public function __construct()
    {
    }
    /**
     * getLastElements return all the notifications (new order, new customer registration, and new customer message)
     * Get all the notifications
     *
     * @return array containing the notifications
     */
    public function getLastElements()
    {
    }
    /**
     * getLastElementsIdsByType return all the element ids to show (order, customer registration, and customer message)
     * Get all the element ids
     *
     * @param string $type          contains the field name of the Employee table
     * @param int    $idLastElement contains the id of the last seen element
     *
     * @return array containing the notifications
     */
    public static function getLastElementsIdsByType($type, $idLastElement)
    {
    }
    /**
     * updateEmployeeLastElement return 0 if the field doesn't exists in Employee table.
     * Updates the last seen element by the employee
     *
     * @param string $type contains the field name of the Employee table
     * @return bool if type exists or not
     */
    public function updateEmployeeLastElement($type)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class JavascriptManager extends \AbstractAssetManager
{
    protected $list;
    protected $valid_position = ['head', 'bottom'];
    protected $valid_attribute = ['async', 'defer'];
    protected function getDefaultList()
    {
    }
    public function register($id, $relativePath, $position = self::DEFAULT_JS_POSITION, $priority = self::DEFAULT_PRIORITY, $inline = \false, $attribute = \null, $server = 'local')
    {
    }
    public function unregisterById($idToRemove)
    {
    }
    protected function add($id, $fullPath, $position, $priority, $inline, $attribute, $server)
    {
    }
    public function getList()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class PrestashopAssetsLibraries
{
    const css = 'registerStylesheet';
    const js = 'registerJavascript';
    /**
     * Get Library files from name
     *
     * @param $name
     * @return bool|mixed
     */
    public static function getAssetsLibraries($name)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class StylesheetManager extends \AbstractAssetManager
{
    protected function getDefaultList()
    {
    }
    public function register($id, $relativePath, $media = self::DEFAULT_MEDIA, $priority = self::DEFAULT_PRIORITY, $inline = \false, $server = 'local')
    {
    }
    public function unregisterById($idToRemove)
    {
    }
    public function getList()
    {
    }
    protected function add($id, $fullPath, $media, $priority, $inline, $server)
    {
    }
}
class CssMinifier
{
    public static function minify(array $files, $destination)
    {
    }
}
class CccReducer
{
    protected $filesystem;
    use \PrestaShop\PrestaShop\Adapter\Assets\AssetUrlGeneratorTrait;
    public function __construct($cacheDir, \PrestaShop\PrestaShop\Core\ConfigurationInterface $configuration, \Symfony\Component\Filesystem\Filesystem $filesystem)
    {
    }
    public function reduceCss($cssFileList)
    {
    }
    public function reduceJs($jsFileList)
    {
    }
}
abstract class AbstractAssetManager
{
    protected $directories;
    protected $configuration;
    protected $list = array();
    const DEFAULT_MEDIA = 'all';
    const DEFAULT_PRIORITY = 50;
    const DEFAULT_JS_POSITION = 'bottom';
    use \PrestaShop\PrestaShop\Adapter\Assets\AssetUrlGeneratorTrait;
    public function __construct(array $directories, \PrestaShop\PrestaShop\Core\ConfigurationInterface $configuration)
    {
    }
    protected abstract function getDefaultList();
    protected abstract function getList();
    protected function getFullPath($relativePath)
    {
    }
}
class JsMinifier
{
    public static function minify(array $files, $destination)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class HelperKpi extends \Helper
{
    public $base_folder = 'helpers/kpi/';
    public $base_tpl = 'kpi.tpl';
    public $id;
    public $icon;
    public $chart;
    public $color;
    public $title;
    public $subtitle;
    public $value;
    public $data;
    public $source;
    public $refresh = \true;
    public $href;
    public $tooltip;
    public function generate()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * Use this helper to generate preferences forms, with values stored in the configuration table
 */
class HelperOptions extends \Helper
{
    public $required = \false;
    public function __construct()
    {
    }
    /**
     * Generate a form for options
     * @param array $option_list
     * @return string html
     */
    public function generateOptions($option_list)
    {
    }
    /**
     * Type = image
     */
    public function displayOptionTypeImage($key, $field, $value)
    {
    }
    /**
     * Type = price
     */
    public function displayOptionTypePrice($key, $field, $value)
    {
    }
    /**
     * Type = disabled
     */
    public function displayOptionTypeDisabled($key, $field, $value)
    {
    }
    public function getOptionValue($key, $field)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class HelperView extends \Helper
{
    public $id;
    public $toolbar = \true;
    public $table;
    public $token;
    /** @var string|null If not null, a title will be added on that list */
    public $title = \null;
    public function __construct()
    {
    }
    public function generateView()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class HelperImageUploader extends \HelperUploader
{
    public function getMaxSize()
    {
    }
    public function getSavePath()
    {
    }
    public function getFilePath($file_name = \null)
    {
    }
    protected function validate(&$file)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class HelperCalendar extends \Helper
{
    const DEFAULT_DATE_FORMAT = 'Y-mm-dd';
    const DEFAULT_COMPARE_OPTION = 1;
    public function __construct()
    {
    }
    public function setActions($value)
    {
    }
    public function getActions()
    {
    }
    public function setCompareActions($value)
    {
    }
    public function getCompareActions()
    {
    }
    public function setCompareDateFrom($value)
    {
    }
    public function getCompareDateFrom()
    {
    }
    public function setCompareDateTo($value)
    {
    }
    public function getCompareDateTo()
    {
    }
    public function setCompareOption($value)
    {
    }
    public function getCompareOption()
    {
    }
    public function setDateFormat($value)
    {
    }
    public function getDateFormat()
    {
    }
    public function setDateFrom($value)
    {
    }
    public function getDateFrom()
    {
    }
    public function setDateTo($value)
    {
    }
    public function getDateTo()
    {
    }
    public function setRTL($value)
    {
    }
    public function addAction($action)
    {
    }
    public function addCompareAction($action)
    {
    }
    public function generate()
    {
    }
    public function isRTL()
    {
    }
}
/**
 * @since 1.5.0
 */
class HelperForm extends \Helper
{
    public $id;
    public $first_call = \true;
    /** @var array of forms fields */
    protected $fields_form = array();
    /** @var array values of form fields */
    public $fields_value = array();
    public $name_controller = '';
    /** @var string if not null, a title will be added on that list */
    public $title = \null;
    /** @var string Used to override default 'submitAdd' parameter in form action attribute */
    public $submit_action;
    public $token;
    public $languages = \null;
    public $default_form_language = \null;
    public $allow_employee_form_lang = \null;
    public $show_cancel_button = \false;
    public $back_url = '#';
    public function __construct()
    {
    }
    public function generateForm($fields_form)
    {
    }
    public function generate()
    {
    }
    /**
     * Return true if there are required fields
     */
    public function getFieldsRequired()
    {
    }
    /**
     * Render an area to determinate shop association
     *
     * @return string
     */
    public function renderAssoShop($disable_shared = \false, $template_directory = \null)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class HelperKpiRow extends \Helper
{
    public $base_folder = 'helpers/kpi/';
    public $base_tpl = 'row.tpl';
    public $kpis = array();
    public $refresh = \true;
    public function generate()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class HelperTreeShopsCore extends \Tree
{
    const DEFAULT_TEMPLATE = 'tree_shops.tpl';
    const DEFAULT_NODE_FOLDER_TEMPLATE = 'tree_node_folder_checkbox_shops.tpl';
    const DEFAULT_NODE_ITEM_TEMPLATE = 'tree_node_item_checkbox_shops.tpl';
    public function __construct($id, $title = \null, $lang = \null)
    {
    }
    public function getData()
    {
    }
    public function setLang($value)
    {
    }
    public function getLang()
    {
    }
    public function getNodeFolderTemplate()
    {
    }
    public function getNodeItemTemplate()
    {
    }
    public function setSelectedShops($value)
    {
    }
    public function getSelectedShops()
    {
    }
    public function getTemplate()
    {
    }
    public function render($data = \null, $use_default_actions = \true, $use_selected_shop = \true)
    {
    }
    public function renderNodes($data = \null)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class Helper
{
    public $currentIndex;
    public $table = 'configuration';
    public $identifier;
    public $token;
    public $toolbar_btn;
    public $ps_help_context;
    public $title;
    public $show_toolbar = \true;
    public $context;
    public $toolbar_scroll = \false;
    public $bootstrap = \false;
    /**
     * @var Module
     */
    public $module;
    /** @var string Helper tpl folder */
    public $base_folder;
    /** @var string Controller tpl folder */
    public $override_folder;
    /**
     * @var Smarty_Internal_Template base template object
     */
    protected $tpl;
    /**
     * @var string base template name
     */
    public $base_tpl = 'content.tpl';
    public $tpl_vars = array();
    public function __construct()
    {
    }
    public function setTpl($tpl)
    {
    }
    /**
     * Create a template from the override file, else from the base file.
     *
     * @param string $tpl_name filename
     * @return Smarty_Internal_Template
     */
    public function createTemplate($tpl_name)
    {
    }
    /**
     * default behaviour for helper is to return a tpl fetched
     *
     * @return string
     */
    public function generate()
    {
    }
    /**
     * @deprecated 1.5.0
     */
    public static function renderAdminCategorieTree($translations, $selected_cat = array(), $input_name = 'categoryBox', $use_radio = \false, $use_search = \false, $disabled_categories = array(), $use_in_popup = \false)
    {
    }
    /**
     *
     * @param array $root array with the name and ID of the tree root category, if null the Shop's root category will be used
     * @param array $selected_cat array of selected categories
     *
     * @usage
     * Format
     * Array( [0] => 1, [1] => 2)
     * OR
     * Array([1] => Array([id_category] => 1, [name] => Home page))
     *
     * @param string $input_name name of input
     * @param bool $use_radio use radio tree or checkbox tree
     * @param bool $use_search display a find category search box
     * @param array $disabled_categories
     *
     * @return string
     */
    public function renderCategoryTree($root = \null, $selected_cat = array(), $input_name = 'categoryBox', $use_radio = \false, $use_search = \false, $disabled_categories = array())
    {
    }
    /**
     * use translations files to replace english expression.
     *
     * @deprecated use Context::getContext()->getTranslator()->trans($id, $parameters, $domain, $locale); instead
     * @param mixed $string term or expression in english
     * @param string $class
     * @param bool $addslashes if set to true, the return value will pass through addslashes(). Otherwise, stripslashes().
     * @param bool $htmlentities if set to true(default), the return value will pass through htmlentities($string, ENT_QUOTES, 'utf-8')
     * @return string the translation if available, or the english default text.
     */
    protected function l($string, $class = 'AdminTab', $addslashes = \false, $htmlentities = \true)
    {
    }
    /**
     * Render a form with potentials required fields
     *
     * @param string $class_name
     * @param string $identifier
     * @param array $table_fields
     * @return string
     */
    public function renderRequiredFields($class_name, $identifier, $table_fields)
    {
    }
    public function renderModulesList($modules_list)
    {
    }
    /**
     * Render shop list
     *
     * @deprecated deprecated since 1.6.1.0 use HelperShop->getRenderedShopList
     *
     * @return string
     */
    public static function renderShopList()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class HelperUploader extends \Uploader
{
    const DEFAULT_TEMPLATE_DIRECTORY = 'helpers/uploader';
    const DEFAULT_TEMPLATE = 'simple.tpl';
    const DEFAULT_AJAX_TEMPLATE = 'ajax.tpl';
    const TYPE_IMAGE = 'image';
    const TYPE_FILE = 'file';
    protected $_template;
    public function setContext($value)
    {
    }
    public function getContext()
    {
    }
    public function setDropZone($value)
    {
    }
    public function getDropZone()
    {
    }
    public function setId($value)
    {
    }
    public function getId()
    {
    }
    public function setFiles($value)
    {
    }
    public function getFiles()
    {
    }
    public function setMaxFiles($value)
    {
    }
    public function getMaxFiles()
    {
    }
    public function setMultiple($value)
    {
    }
    public function setName($value)
    {
    }
    public function getName()
    {
    }
    public function setPostMaxSize($value)
    {
    }
    public function getPostMaxSize()
    {
    }
    public function setTemplate($value)
    {
    }
    public function getTemplate()
    {
    }
    public function setTemplateDirectory($value)
    {
    }
    public function getTemplateDirectory()
    {
    }
    public function getTemplateFile($template)
    {
    }
    public function setTitle($value)
    {
    }
    public function getTitle()
    {
    }
    public function setUrl($value)
    {
    }
    public function getUrl()
    {
    }
    public function setUseAjax($value)
    {
    }
    public function isMultiple()
    {
    }
    public function render()
    {
    }
    public function useAjax()
    {
    }
}
/**
 * @since 1.5.0
 */
class HelperList extends \Helper
{
    // @override no dynamic props
    public $className;
    public $shopLink;
    public $shopLinkType;
    public $imageType;
    public $multiple_fieldsets;
    public $position_group_identifier;
    public $controller_name;
    public $list_id;
    /** @var array Cache for query results */
    protected $_list = array();
    /** @var int Number of results in list */
    public $listTotal = 0;
    /** @var array WHERE clause determined by filter fields */
    protected $_filter;
    /** @var array Number of results in list per page (used in select field) */
    public $_pagination = array(20, 50, 100, 300, 1000);
    /** @var int Default number of results in list per page */
    public $_default_pagination = 50;
    /** @var string ORDER BY clause determined by field/arrows in list header */
    public $orderBy;
    /** @var string Default ORDER BY clause when $orderBy is not defined */
    public $_defaultOrderBy = \false;
    /** @var array : list of vars for button delete*/
    public $tpl_delete_link_vars = array();
    /** @var string Order way (ASC, DESC) determined by arrows in list header */
    public $orderWay;
    public $identifier;
    protected $deleted = 0;
    /** @var array $cache_lang use to cache texts in current language */
    public static $cache_lang = array();
    public $is_cms = \false;
    public $position_identifier;
    public $table_id;
    /**
     * @var array Customize list display
     *
     * align  : determine value alignment
     * prefix : displayed before value
     * suffix : displayed after value
     * image  : object image
     * icon   : icon determined by values
     * active : allow to toggle status
     */
    protected $fields_list;
    /** @var bool Content line is clickable if true */
    public $no_link = \false;
    /** @var Smarty_Internal_Template|string */
    protected $header_tpl = 'list_header.tpl';
    /** @var Smarty_Internal_Template|string */
    protected $content_tpl = 'list_content.tpl';
    /** @var Smarty_Internal_Template|string */
    protected $footer_tpl = 'list_footer.tpl';
    /** @var array list of required actions for each list row */
    public $actions = array();
    /** @var array list of row ids associated with a given action for witch this action have to not be available */
    public $list_skip_actions = array();
    public $bulk_actions = \false;
    public $force_show_bulk_actions = \false;
    public $specificConfirmDelete = \null;
    public $colorOnBackground;
    /** @var bool If true, activates color on hover */
    public $row_hover = \true;
    /** @var string|null If not null, a title will be added on that list */
    public $title = \null;
    /** @var bool ask for simple header : no filters, no paginations and no sorting */
    public $simple_header = \false;
    public $ajax_params = array();
    public $page;
    public function __construct()
    {
    }
    /**
     * Return an html list given the data to fill it up
     *
     * @param array $list entries to display (rows)
     * @param array $fields_display fields (cols)
     * @return string html
     */
    public function generateList($list, $fields_display)
    {
    }
    /**
     * Fetch the template for action enable
     *
     * @param string $token
     * @param string $id
     * @param int $value state enabled or not
     * @param string $active status
     * @param int $id_category
     * @param int $id_product
     * @return string
     */
    public function displayEnableLink($token, $id, $value, $active, $id_category = \null, $id_product = \null, $ajax = \false)
    {
    }
    public function displayListContent()
    {
    }
    /**
     * Display duplicate action link
     */
    public function displayDuplicateLink($token = \null, $id, $name = \null)
    {
    }
    /**
     * Display action show details of a table row
     * This action need an ajax request with a return like this:
     *   {
     *     use_parent_structure: true // If false, data need to be an html
     *     data:
     *       [
     *         {field_name: 'value'}
     *       ],
     *     fields_display: // attribute $fields_list of the admin controller
     *   }
     * or somethins like this:
     *   {
     *     use_parent_structure: false // If false, data need to be an html
     *     data:
     *       '<p>My html content</p>',
     *     fields_display: // attribute $fields_list of the admin controller
     *   }
     */
    public function displayDetailsLink($token = \null, $id, $name = \null)
    {
    }
    /**
     * Display view action link
     */
    public function displayViewLink($token = \null, $id, $name = \null)
    {
    }
    /**
     * Display edit action link
     */
    public function displayEditLink($token = \null, $id, $name = \null)
    {
    }
    /**
     * Display delete action link
     */
    public function displayDeleteLink($token = \null, $id, $name = \null)
    {
    }
    /**
     * Display default action link
     */
    public function displayDefaultLink($token = \null, $id, $name = \null)
    {
    }
    /**
     * Display list header (filtering, pagination and column names)
     */
    public function displayListHeader()
    {
    }
    public function hasBulkActions($has_value = \false)
    {
    }
    /**
     * Close list table and submit button
     */
    public function displayListFooter()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class HelperShop extends \Helper
{
    /**
     * Render shop list
     *
     * @return string
     */
    public function getRenderedShopList()
    {
    }
    public function getCurrentShopName()
    {
    }
    /**
     * @return bool
     */
    protected function noShopSelection()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class HelperTreeCategoriesCore extends \Tree
{
    const DEFAULT_TEMPLATE = 'tree_categories.tpl';
    const DEFAULT_NODE_FOLDER_TEMPLATE = 'tree_node_folder_radio.tpl';
    const DEFAULT_NODE_ITEM_TEMPLATE = 'tree_node_item_radio.tpl';
    public function __construct($id, $title = \null, $root_category = \null, $lang = \null, $use_shop_restriction = \true)
    {
    }
    public function getData()
    {
    }
    public function setChildrenOnly($value)
    {
    }
    public function setFullTree($value)
    {
    }
    public function getFullTree()
    {
    }
    public function setDisabledCategories($value)
    {
    }
    public function getDisabledCategories()
    {
    }
    public function setInputName($value)
    {
    }
    public function getInputName()
    {
    }
    public function setLang($value)
    {
    }
    public function getLang()
    {
    }
    public function getNodeFolderTemplate()
    {
    }
    public function getNodeItemTemplate()
    {
    }
    public function setRootCategory($value)
    {
    }
    public function getRootCategory()
    {
    }
    public function setSelectedCategories($value)
    {
    }
    public function getSelectedCategories()
    {
    }
    public function setShop($value)
    {
    }
    public function getShop()
    {
    }
    public function getTemplate()
    {
    }
    public function setUseCheckBox($value)
    {
    }
    public function setUseSearch($value)
    {
    }
    public function setUseShopRestriction($value)
    {
    }
    public function useCheckBox()
    {
    }
    public function useSearch()
    {
    }
    public function useShopRestriction()
    {
    }
    public function render($data = \null)
    {
    }
    /* Override */
    public function renderNodes($data = \null)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class ConfigurationKPI
 */
class ConfigurationKPI extends \Configuration
{
    public static $definition_backup;
    /**
     * Set KPI definition
     */
    public static function setKpiDefinition()
    {
    }
    /**
     * Unset KPI definition
     */
    public static function unsetKpiDefinition()
    {
    }
    /**
     * Get ID by name
     *
     * @param string   $key         Configuration key
     * @param int|null $idShopGroup ShopGroup ID
     * @param int|null $idShop      Shop ID
     *
     * @return int ConfigurationKPI ID
     */
    public static function getIdByName($key, $idShopGroup = \null, $idShop = \null)
    {
    }
    /**
     * Load configuration
     */
    public static function loadConfiguration()
    {
    }
    /**
     * Get value
     *
     * @param string $key         Configuration key
     * @param null   $idLang      Language ID
     * @param null   $idShopGroup ShopGroup ID
     * @param null   $idShop      Shop ID
     * @param bool   $default     Default value
     *
     * @return string
     */
    public static function get($key, $idLang = \null, $idShopGroup = \null, $idShop = \null, $default = \false)
    {
    }
    /**
     * Get global vlaue
     *
     * @param string   $key    Configuration key
     * @param int|null $idLang Language ID
     *
     * @return string Global value
     */
    public static function getGlobalValue($key, $idLang = \null)
    {
    }
    /**
     * Get value independent from language
     *
     * @param string $key         Configuration key
     * @param null   $idShopGroup ShopGroup ID
     * @param null   $idShop      Shop ID
     *
     * @return array Values for key for all available languages
     */
    public static function getInt($key, $idShopGroup = \null, $idShop = \null)
    {
    }
    /**
     * Get multiple keys
     *
     * @param array    $keys        Configuation keys
     * @param int|null $idLang      Language ID
     * @param int|null $idShopGroup ShopGroup ID
     * @param int|null $idShop      Shop ID
     *
     * @return array Configuration values
     */
    public static function getMultiple($keys, $idLang = \null, $idShopGroup = \null, $idShop = \null)
    {
    }
    /**
     * Has key
     *
     * @param string   $key
     * @param int|null $idLang      Language ID
     * @param int|null $idShopGroup ShopGroup ID
     * @param int|null $idShop      Shop ID
     *
     * @return bool
     */
    public static function hasKey($key, $idLang = \null, $idShopGroup = \null, $idShop = \null)
    {
    }
    /**
     * Set key
     *
     * @param string $key         Configuration key
     * @param mixed  $values      Values
     * @param null   $idShopGroup ShopGroup ID
     * @param null   $idShop      Shop ID
     */
    public static function set($key, $values, $idShopGroup = \null, $idShop = \null)
    {
    }
    /**
     * Update global value
     *
     * @param string $key    Configuration key
     * @param mixed  $values Values
     * @param bool   $html   Do the values contain HTML?
     *
     * @return bool Indicates whether the key was successfully updated
     */
    public static function updateGlobalValue($key, $values, $html = \false)
    {
    }
    /**
     * Update value
     *
     * @param string $key         Configuration key
     * @param mixed  $values      Values
     * @param bool   $html        Do the values contain HTML?
     * @param null   $idShopGroup ShopGroup ID
     * @param null   $idShop      Shop ID
     *
     * @return bool Indicates whether the key was successfully updated
     */
    public static function updateValue($key, $values, $html = \false, $idShopGroup = \null, $idShop = \null)
    {
    }
    /**
     * @param string $key
     *
     * @return bool
     */
    public static function deleteByName($key)
    {
    }
    /**
     * @param string $key
     *
     * @return bool
     */
    public static function deleteFromContext($key)
    {
    }
    /**
     * @param string $key
     * @param int    $idLang
     * @param int    $context
     *
     * @return bool
     */
    public static function hasContext($key, $idLang, $context)
    {
    }
    /**
     * @param string $key
     *
     * @return bool
     */
    public static function isOverridenByCurrentContext($key)
    {
    }
    /**
     * @param string $key
     *
     * @return bool
     */
    public static function isLangKey($key)
    {
    }
    /**
     * @param int $idShopGroup
     * @param int $idShop
     *
     * @return string
     */
    protected static function sqlRestriction($idShopGroup, $idShop)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @since 1.5.0
 */
class PrestaShopModuleException extends \PrestaShopException
{
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @since 1.5.0
 */
class PrestaShopPaymentException extends \PrestaShopException
{
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @since 1.5.0
 */
class PrestaShopDatabaseException extends \PrestaShopException
{
    public function __toString()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @since 1.5.0
 */
class PrestaShopException extends \Exception
{
    /**
     * This method acts like an error handler, if dev mode is on, display the error else use a better silent way
     */
    public function displayMessage()
    {
    }
    /**
     * Display lines around current line
     *
     * @param string $file
     * @param int $line
     * @param string $id
     */
    protected function displayFileDebug($file, $line, $id = \null)
    {
    }
    /**
     * Display arguments list of traced function
     *
     * @param array $args List of arguments
     * @param string $id ID of argument
     */
    protected function displayArgsDebug($args, $id)
    {
    }
    /**
     * Log the error on the disk
     */
    protected function logError()
    {
    }
    /**
     * @deprecated 1.5.5
     */
    protected function getExentedMessage($html = \true)
    {
    }
    /**
     * Return the content of the Exception
     * @return string content of the exception
     */
    protected function getExtendedMessage($html = \true)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * Class PaymentFree
 * Simple class to allow free order
 */
class PaymentFree extends \PaymentModule
{
    public $active = 1;
    public $name = 'free_order';
    public $displayName = 'Free order';
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Risk
 *
 * @since 1.5.0
 */
class Risk extends \ObjectModel
{
    public $id;
    public $id_risk;
    public $name;
    public $color;
    public $percent;
    public static $definition = array('table' => 'risk', 'primary' => 'id_risk', 'multilang' => \true, 'fields' => array('name' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isString', 'required' => \true, 'size' => 20), 'color' => array('type' => self::TYPE_STRING, 'validate' => 'isColor', 'size' => 32), 'percent' => array('type' => self::TYPE_INT, 'validate' => 'isPercentage')));
    /**
     * Get fields
     *
     * @return mixed
     */
    public function getFields()
    {
    }
    /**
     * Get Risks
     *
     * @param int|null $idLang Language ID
     *
     * @return PrestaShopCollection
     */
    public static function getRisks($idLang = \null)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * Simple class to output CSV data
 * Uses CollectionCore
 * @since 1.5
 */
class CSV
{
    public $filename;
    public $collection;
    public $delimiter;
    /**
     * Loads objects, filename and optionnaly a delimiter.
     *
     * @param array|Iterator $collection Collection of objects / arrays (of non-objects)
     * @param string         $filename   used later to save the file
     * @param string         $delimiter  delimiter used
     */
    public function __construct($collection, $filename, $delimiter = ';')
    {
    }
    /**
     * Main function
     * Adds headers
     * Outputs
     */
    public function export()
    {
    }
    /**
     * Wraps data and echoes
     * Uses defined delimiter
     *
     * @param array $data
     */
    public function output($data)
    {
    }
    /**
     * Escapes data
     * @param string $data
     * @return string $data
     */
    public static function wrap($data)
    {
    }
    /**
     * Adds headers
     */
    public function headers()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Message
 */
class Message extends \ObjectModel
{
    public $id;
    /** @var string message content */
    public $message;
    /** @var int Cart ID (if applicable) */
    public $id_cart;
    /** @var int Order ID (if applicable) */
    public $id_order;
    /** @var int Customer ID (if applicable) */
    public $id_customer;
    /** @var int Employee ID (if applicable) */
    public $id_employee;
    /** @var bool Message is not displayed to the customer */
    public $private;
    /** @var string Object creation date */
    public $date_add;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'message', 'primary' => 'id_message', 'fields' => array('message' => array('type' => self::TYPE_STRING, 'validate' => 'isCleanHtml', 'required' => \true, 'size' => 1600), 'id_cart' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_order' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_customer' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_employee' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'private' => array('type' => self::TYPE_BOOL, 'validate' => 'isBool'), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate')));
    protected $webserviceParameters = array('fields' => array('id_cart' => array('xlink_resource' => 'carts'), 'id_order' => array('xlink_resource' => 'orders'), 'id_customer' => array('xlink_resource' => 'customers'), 'id_employee' => array('xlink_resource' => 'employees')));
    /**
     * Return the last message from cart
     *
     * @param int $idCart Cart ID
     *
     * @return array Message
     */
    public static function getMessageByCartId($idCart)
    {
    }
    /**
     * Return messages from Order ID
     *
     * @param int  $idOrder Order ID
     * @param bool $private return WITH private messages
     *
     * @return array Messages
     */
    public static function getMessagesByOrderId($idOrder, $private = \false, \Context $context = \null)
    {
    }
    /**
     * Return messages from Cart ID
     *
     * @param int  $id_order Order ID
     * @param bool $private  return WITH private messages
     *
     * @return array Messages
     */
    public static function getMessagesByCartId($idCart, $private = \false, \Context $context = \null)
    {
    }
    /**
     * Registered a message 'readed'
     *
     * @param int $idMessage  Message ID
     * @param int $id_emplyee Employee ID
     *
     * @return bool
     */
    public static function markAsReaded($idMessage, $idEmployee)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
class SpecificPrice extends \ObjectModel
{
    public $id_product;
    public $id_specific_price_rule = 0;
    public $id_cart = 0;
    public $id_product_attribute;
    public $id_shop;
    public $id_shop_group;
    public $id_currency;
    public $id_country;
    public $id_group;
    public $id_customer;
    public $price;
    public $from_quantity;
    public $reduction;
    public $reduction_tax = 1;
    public $reduction_type;
    public $from;
    public $to;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'specific_price', 'primary' => 'id_specific_price', 'fields' => array('id_shop_group' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_shop' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_cart' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_product' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_product_attribute' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_currency' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_specific_price_rule' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId'), 'id_country' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_group' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'id_customer' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => \true), 'price' => array('type' => self::TYPE_FLOAT, 'validate' => 'isNegativePrice', 'required' => \true), 'from_quantity' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt', 'required' => \true), 'reduction' => array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice', 'required' => \true), 'reduction_tax' => array('type' => self::TYPE_INT, 'validate' => 'isBool', 'required' => \true), 'reduction_type' => array('type' => self::TYPE_STRING, 'validate' => 'isReductionType', 'required' => \true), 'from' => array('type' => self::TYPE_DATE, 'validate' => 'isDateFormat', 'required' => \true), 'to' => array('type' => self::TYPE_DATE, 'validate' => 'isDateFormat', 'required' => \true)));
    protected $webserviceParameters = array('objectsNodeName' => 'specific_prices', 'objectNodeName' => 'specific_price', 'fields' => array('id_shop_group' => array('xlink_resource' => 'shop_groups'), 'id_shop' => array('xlink_resource' => 'shops', 'required' => \true), 'id_cart' => array('xlink_resource' => 'carts', 'required' => \true), 'id_product' => array('xlink_resource' => 'products', 'required' => \true), 'id_product_attribute' => array('xlink_resource' => 'product_attributes'), 'id_currency' => array('xlink_resource' => 'currencies', 'required' => \true), 'id_country' => array('xlink_resource' => 'countries', 'required' => \true), 'id_group' => array('xlink_resource' => 'groups', 'required' => \true), 'id_customer' => array('xlink_resource' => 'customers', 'required' => \true)));
    /**
     * Local cache for getSpecificPrice function results
     *
     * @var array
     */
    protected static $_specificPriceCache = array();
    /**
     * Local cache which stores if a product could have an associated specific price
     *
     * @var array
     */
    protected static $_couldHaveSpecificPriceCache = array();
    /**
     * Store if the specific_price table contains any global rules in the productId columns
     * i.e. if there is a product_id == 0 somewhere in the specific_price table
     *
     * @var boolean
     */
    protected static $_hasGlobalProductRules = \null;
    /**
     * Local cache for the filterOutField function. It stores the different existing values in the specific_price table
     * for a given column name
     *
     * @var array
     */
    protected static $_filterOutCache = array();
    /**
     * Local cache for getPriority function
     *
     * @var array
     */
    protected static $_cache_priorities = array();
    /**
     * Local cache which stores if a given column name could have a value != 0 in the specific_price table
     * i.e. if columnName != 0 somewhere in the specific_price table
     *
     * @var array
     */
    protected static $_no_specific_values = array();
    /**
     * Flush local cache
     */
    protected function flushCache()
    {
    }
    public function add($autodate = \true, $nullValues = \false)
    {
    }
    public function update($null_values = \false)
    {
    }
    public function delete()
    {
    }
    public static function getByProductId($id_product, $id_product_attribute = \false, $id_cart = \false)
    {
    }
    public static function deleteByIdCart($id_cart, $id_product = \false, $id_product_attribute = \false)
    {
    }
    public static function getIdsByProductId($id_product, $id_product_attribute = \false, $id_cart = 0)
    {
    }
    /**
     * score generation for quantity discount
     */
    protected static function _getScoreQuery($id_product, $id_shop, $id_currency, $id_country, $id_group, $id_customer)
    {
    }
    public static function getPriority($id_product)
    {
    }
    /**
     * Remove or add a field value to a query if values are present in the database (cache friendly)
     *
     * @param string $field_name
     * @param int $field_value
     * @param int $threshold
     * @return string
     * @throws PrestaShopDatabaseException
     */
    protected static function filterOutField($field_name, $field_value, $threshold = 1000)
    {
    }
    /**
     * Remove or add useless fields value depending on the values in the database (cache friendly)
     *
     * @param int|null $id_product
     * @param int|null $id_product_attribute
     * @param int|null $id_cart
     * @param string|null $beginning
     * @param string|null $ending
     * @return string
     */
    protected static function computeExtraConditions($id_product, $id_product_attribute, $id_customer, $id_cart, $beginning = \null, $ending = \null)
    {
    }
    protected static function formatIntInQuery($first_value, $second_value)
    {
    }
    /**
     * Check if the given product could have a specific price
     *
     * @param $idProduct
     *
     * @return bool
     */
    protected static final function couldHaveSpecificPrice($idProduct)
    {
    }
    /**
     * Compute the cache key by setting to 0 the fields which doesn't have any specific values in the DB
     *
     * @param int $id_product
     * @param int $id_shop
     * @param int $id_currency
     * @param int $id_country
     * @param int $id_group
     * @param int $quantity
     * @param int $id_product_attribute
     * @param int $id_customer
     * @param int $id_cart
     * @param int $real_quantity
     *
     * @return string
     */
    protected static final function computeKey($id_product, $id_shop, $id_currency, $id_country, $id_group, $quantity, $id_product_attribute, $id_customer, $id_cart, $real_quantity)
    {
    }
    /**
     * Returns the specificPrice information related to a given productId and context
     *
     * @param int  $id_product
     * @param int  $id_shop
     * @param int  $id_currency
     * @param int  $id_country
     * @param int  $id_group
     * @param int  $quantity
     * @param int  $id_product_attribute
     * @param int  $id_customer
     * @param int  $id_cart
     * @param int  $real_quantity
     *
     * @return array
     */
    public static function getSpecificPrice($id_product, $id_shop, $id_currency, $id_country, $id_group, $quantity, $id_product_attribute = \null, $id_customer = 0, $id_cart = 0, $real_quantity = 0)
    {
    }
    public static function setPriorities($priorities)
    {
    }
    public static function deletePriorities()
    {
    }
    public static function setSpecificPriority($id_product, $priorities)
    {
    }
    public static function getQuantityDiscounts($id_product, $id_shop, $id_currency, $id_country, $id_group, $id_product_attribute = \null, $all_combinations = \false, $id_customer = 0)
    {
    }
    public static function getQuantityDiscount($id_product, $id_shop, $id_currency, $id_country, $id_group, $quantity, $id_product_attribute = \null, $id_customer = 0)
    {
    }
    public static function getProductIdByDate($id_shop, $id_currency, $id_country, $id_group, $beginning, $ending, $id_customer = 0, $with_combination_id = \false)
    {
    }
    public static function deleteByProductId($id_product)
    {
    }
    public function duplicate($id_product = \false)
    {
    }
    /**
     * This method is allow to know if a feature is used or active
     * @since 1.5.0.1
     * @return bool
     */
    public static function isFeatureActive()
    {
    }
    public static function exists($id_product, $id_product_attribute, $id_shop, $id_group, $id_country, $id_currency, $id_customer, $from_quantity, $from, $to, $rule = \false)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Image
 */
class Image extends \ObjectModel
{
    public $id;
    /** @var int Image ID */
    public $id_image;
    /** @var int Product ID */
    public $id_product;
    /** @var int Position used to order images of the same product */
    public $position;
    /** @var bool Image is cover */
    public $cover;
    /** @var string Legend */
    public $legend;
    /** @var string image extension */
    public $image_format = 'jpg';
    /** @var string path to index.php file to be copied to new image folders */
    public $source_index;
    /** @var string image folder */
    protected $folder;
    /** @var string image path without extension */
    protected $existing_path;
    /** @var int access rights of created folders (octal) */
    protected static $access_rights = 0775;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'image', 'primary' => 'id_image', 'multilang' => \true, 'fields' => array('id_product' => array('type' => self::TYPE_INT, 'shop' => 'both', 'validate' => 'isUnsignedId', 'required' => \true), 'position' => array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'), 'cover' => array('type' => self::TYPE_BOOL, 'allow_null' => \true, 'validate' => 'isBool', 'shop' => \true), 'legend' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isGenericName', 'size' => 128)));
    protected static $_cacheGetSize = array();
    /**
     * ImageCore constructor.
     *
     * @param null $id
     * @param null $idLang
     */
    public function __construct($id = \null, $idLang = \null)
    {
    }
    /**
     * Adds current Image as a new Object to the database
     *
     * @param bool $autoDate   Automatically set `date_upd` and `date_add` columns
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Indicates whether the Image has been successfully added
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function add($autoDate = \true, $nullValues = \false)
    {
    }
    /**
     * Updates the current Image in the database
     *
     * @param bool $nullValues Whether we want to use NULL values instead of empty quotes values
     *
     * @return bool Indicates whether the Image has been successfully updated
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function update($nullValues = \false)
    {
    }
    /**
     * Deletes current Image from the database
     *
     * @return bool `true` if delete was successful
     * @throws PrestaShopException
     */
    public function delete()
    {
    }
    /**
     * Return first image (by position) associated with a product attribute
     *
     * @param int $idShop             Shop ID
     * @param int $idLang             Language ID
     * @param int $idProduct          Product ID
     * @param int $idProductAttribute Product Attribute ID
     *
     * @return array
     */
    public static function getBestImageAttribute($idShop, $idLang, $idProduct, $idProductAttribute)
    {
    }
    /**
     * Return available images for a product
     *
     * @param int $idLang             Language ID
     * @param int $idProduct          Product ID
     * @param int $idProductAttribute Product Attribute ID
     *
     * @return array Images
     */
    public static function getImages($idLang, $idProduct, $idProductAttribute = \null)
    {
    }
    /**
     * Check if a product has an image available
     *
     * @param int $idLang             Language ID
     * @param int $idProduct          Product ID
     * @param int $idProductAttribute Product Attribute ID
     *
     * @return bool
     */
    public static function hasImages($idLang, $idProduct, $idProductAttribute = \null)
    {
    }
    /**
     * Return Images
     *
     * @return array Images
     */
    public static function getAllImages()
    {
    }
    /**
     * Return number of images for a product
     *
     * @param int $idProduct Product ID
     *
     * @return int number of images
     */
    public static function getImagesTotal($idProduct)
    {
    }
    /**
     * Return highest position of images for a product
     *
     * @param int $idProduct Product ID
     *
     * @return int highest position of images
     */
    public static function getHighestPosition($idProduct)
    {
    }
    /**
     * Delete product cover
     *
     * @param int $idProduct Product ID
     *
     * @return bool result
     */
    public static function deleteCover($idProduct)
    {
    }
    /**
     *Get product cover
     *
     * @param int $idProduct Product ID
     *
     * @return bool result
     */
    public static function getCover($idProduct)
    {
    }
    /**
     *Get global product cover
     *
     * @param int $idProduct Product ID
     *
     * @return bool result
     */
    public static function getGlobalCover($idProduct)
    {
    }
    /**
     * Copy images from a product to another
     *
     * @param int  $idProductOld Source product ID
     * @param bool $idProductNew Destination product ID
     */
    public static function duplicateProductImages($idProductOld, $idProductNew, $combinationImages)
    {
    }
    /**
     * @param array $combinationImages
     * @param int   $savedId
     * @param int   $idImage
     */
    protected static function replaceAttributeImageAssociationId(&$combinationImages, $savedId, $idImage)
    {
    }
    /**
     * Duplicate product attribute image associations
     *
     * @param array $combinationImages
     *
     * @return bool
     *
     */
    public static function duplicateAttributeImageAssociations($combinationImages)
    {
    }
    /**
     * Change an image position and update relative positions
     *
     * @param int $way      position is moved up if 0, moved down if 1
     * @param int $position new position of the moved image
     *
     * @return int success
     */
    public function updatePosition($way, $position)
    {
    }
    /**
     * @param string $type
     *
     * @return mixed
     */
    public static function getSize($type)
    {
    }
    /**
     * @param array $params
     *
     * @return mixed
     */
    public static function getWidth($params)
    {
    }
    /**
     * @param array $params
     *
     * @return mixed
     */
    public static function getHeight($params)
    {
    }
    /**
     * Clear all images in tmp dir
     */
    public static function clearTmpDir()
    {
    }
    /**
     * Delete Image - Product attribute associations for this image
     */
    public function deleteProductAttributeImage()
    {
    }
    /**
     * Delete the product image from disk and remove the containing folder if empty
     * Handles both legacy and new image filesystems
     */
    public function deleteImage($forceDelete = \false)
    {
    }
    /**
     * Recursively deletes all product images in the given folder tree and removes empty folders.
     *
     * @param string $path   folder containing the product images to delete
     * @param string $format image format
     *
     * @return bool success
     */
    public static function deleteAllImages($path, $format = 'jpg')
    {
    }
    /**
     * Returns image path in the old or in the new filesystem
     *
     * @ returns string image path
     */
    public function getExistingImgPath()
    {
    }
    /**
     * Returns the path to the folder containing the image in the new filesystem
     *
     * @return string path to folder
     */
    public function getImgFolder()
    {
    }
    /**
     * Create parent folders for the image in the new filesystem
     *
     * @return bool success
     */
    public function createImgFolder()
    {
    }
    /**
     * Returns the path to the image without file extension
     *
     * @return string path
     */
    public function getImgPath()
    {
    }
    /**
     * Returns the path to the folder containing the image in the new filesystem
     *
     * @param mixed $idImage
     *
     * @return string path to folder
     */
    public static function getImgFolderStatic($idImage)
    {
    }
    /**
     * Move all legacy product image files from the image folder root to their subfolder in the new filesystem.
     * If max_execution_time is provided, stops before timeout and returns string "timeout".
     * If any image cannot be moved, stops and returns "false"
     *
     * @param int $maxExecutionTime
     *
     * @return mixed success or timeout
     */
    public static function moveToNewFileSystem($maxExecutionTime = 0)
    {
    }
    /**
     * Try to create and delete some folders to check if moving images to new file system will be possible
     *
     * @return bool success
     */
    public static function testFileSystem()
    {
    }
    /**
     * Returns the path where a product image should be created (without file format)
     *
     * @return string path
     */
    public function getPathForCreation()
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class TranslatedConfiguration
 */
class TranslatedConfiguration extends \Configuration
{
    protected $webserviceParameters = array('objectNodeName' => 'translated_configuration', 'objectsNodeName' => 'translated_configurations', 'fields' => array('value' => array(), 'date_add' => array(), 'date_upd' => array()));
    public static $definition = array('table' => 'configuration', 'primary' => 'id_configuration', 'multilang' => \true, 'fields' => array('name' => array('type' => self::TYPE_STRING, 'validate' => 'isConfigName', 'required' => \true, 'size' => 32), 'id_shop_group' => array('type' => self::TYPE_NOTHING, 'validate' => 'isUnsignedId'), 'id_shop' => array('type' => self::TYPE_NOTHING, 'validate' => 'isUnsignedId'), 'value' => array('type' => self::TYPE_STRING, 'lang' => \true), 'date_add' => array('type' => self::TYPE_DATE, 'validate' => 'isDate'), 'date_upd' => array('type' => self::TYPE_DATE, 'validate' => 'isDate')));
    /**
     * TranslatedConfigurationCore constructor.
     *
     * @param null $id
     * @param null $idLang
     */
    public function __construct($id = \null, $idLang = \null)
    {
    }
    /**
     * @param bool $autoDate
     * @param bool $nullValues
     *
     * @return bool
     */
    public function add($autoDate = \true, $nullValues = \false)
    {
    }
    /**
     * @param bool $nullValues
     *
     * @return bool
     */
    public function update($nullValues = \false)
    {
    }
    /**
     * @param string $sqlJoin
     * @param string $sqlFilter
     * @param string $sqlSort
     * @param string $sqlLimit
     *
     * @return array|false|mysqli_result|null|PDOStatement|resource
     */
    public function getWebserviceObjectList($sqlJoin, $sqlFilter, $sqlSort, $sqlLimit)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * class Gender
 *
 * @since 1.5.0
 */
class Gender extends \ObjectModel
{
    public $id;
    public $id_gender;
    public $name;
    public $type;
    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array('table' => 'gender', 'primary' => 'id_gender', 'multilang' => \true, 'fields' => array(
        'type' => array('type' => self::TYPE_INT, 'required' => \true),
        /* Lang fields */
        'name' => array('type' => self::TYPE_STRING, 'lang' => \true, 'validate' => 'isString', 'required' => \true, 'size' => 20),
    ));
    /**
     * GenderCore constructor.
     *
     * @param int|null $id
     * @param int|null $idLang
     * @param int|null $idShop
     */
    public function __construct($id = \null, $idLang = \null, $idShop = \null)
    {
    }
    /**
     * Get all Genders
     *
     * @param int|null $idLang Language ID
     *
     * @return PrestaShopCollection
     */
    public static function getGenders($idLang = \null)
    {
    }
    /**
     * Get Gender image
     *
     * @return string File path
     */
    public function getImage()
    {
    }
}
abstract class PaymentModule extends \Module
{
    /** @var int Current order's id */
    public $currentOrder;
    public $currencies = \true;
    public $currencies_mode = 'checkbox';
    const DEBUG_MODE = \false;
    public function install()
    {
    }
    public function uninstall()
    {
    }
    /**
     * Add checkbox currency restrictions for a new module
     * @param array $shops
     *
     * @return bool
     */
    public function addCheckboxCurrencyRestrictionsForModule(array $shops = array())
    {
    }
    /**
     * Add radio currency restrictions for a new module
     * @param array $shops
     *
     * @return bool
     */
    public function addRadioCurrencyRestrictionsForModule(array $shops = array())
    {
    }
    /**
     * Add checkbox country restrictions for a new module
     * @param array $shops
     *
     * @return bool
     */
    public function addCheckboxCountryRestrictionsForModule(array $shops = array())
    {
    }
    /**
     * Add checkbox carrier restrictions for a new module
     * @param array $shops
     *
     * @return bool
     */
    public function addCheckboxCarrierRestrictionsForModule(array $shops = array())
    {
    }
    /**
     * Validate an order in database
     * Function called from a payment module
     *
     * @param int     $id_cart
     * @param int     $id_order_state
     * @param float   $amount_paid       Amount really paid by customer (in the default currency)
     * @param string  $payment_method    Payment method (eg. 'Credit card')
     * @param null    $message           Message to attach to order
     * @param array   $extra_vars
     * @param null    $currency_special
     * @param bool    $dont_touch_amount
     * @param bool    $secure_key
     * @param Shop    $shop
     *
     * @return bool
     * @throws PrestaShopException
     */
    public function validateOrder($id_cart, $id_order_state, $amount_paid, $payment_method = 'Unknown', $message = \null, $extra_vars = array(), $currency_special = \null, $dont_touch_amount = \false, $secure_key = \false, \Shop $shop = \null)
    {
    }
    /**
     * @deprecated 1.6.0.7
     * @param mixed $content
     *
     * @return mixed
     */
    public function formatProductAndVoucherForEmail($content)
    {
    }
    /**
     * @param Object Address $the_address that needs to be txt formated
     *
     * @return String the txt formated address block
     */
    protected function _getTxtFormatedAddress($the_address)
    {
    }
    /**
     * @param Object Address $the_address that needs to be txt formated
     *
     * @return String the txt formated address block
     */
    protected function _getFormatedAddress(\Address $the_address, $line_sep, $fields_style = array())
    {
    }
    /**
     * @param int $current_id_currency optional but on 1.5 it will be REQUIRED
     *
     * @return Currency
     */
    public function getCurrency($current_id_currency = \null)
    {
    }
    /**
     * Allows specified payment modules to be used by a specific currency
     *
     * @since 1.4.5
     * @param int $id_currency
     * @param array $id_module_list
     * @return bool
     */
    public static function addCurrencyPermissions($id_currency, array $id_module_list = array())
    {
    }
    /**
     * List all installed and active payment modules
     * @see Module::getPaymentModules() if you need a list of module related to the user context
     *
     * @since 1.4.5
     * @return array module informations
     */
    public static function getInstalledPaymentModules()
    {
    }
    public static function preCall($module_name)
    {
    }
    /**
     * Fetch the content of $template_name inside the folder
     * current_theme/mails/current_iso_lang/ if found, otherwise in
     * mails/current_iso_lang
     *
     * @param string  $template_name template name with extension
     * @param int     $mail_type     Mail::TYPE_HTML or Mail::TYPE_TEXT
     * @param array   $var           sent to smarty as 'list'
     *
     * @return string
     */
    protected function getEmailTemplateContent($template_name, $mail_type, $var)
    {
    }
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
/**
 * @deprecated 1.5.0.1
 */
\define('_CUSTOMIZE_FILE_', 0);
/**
 * @deprecated 1.5.0.1
 */
\define('_CUSTOMIZE_TEXTFIELD_', 1);
function ps_module_version_sort($a, $b)
{
}
/**
 * Compare 2 prices to sort products
 *
 * @param float $a
 * @param float $b
 * @return int
 */
/* Externalized because of a bug in PHP 5.1.6 when inside an object */
function cmpPriceAsc($a, $b)
{
}
function cmpPriceDesc($a, $b)
{
}
/**
 * 2007-2017 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author    PrestaShop SA <contact@prestashop.com>
 * @copyright 2007-2017 PrestaShop SA
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 * International Registered Trademark & Property of PrestaShop SA
 */
\define('PS_SEARCH_MAX_WORD_LENGTH', 15);
/* Copied from Drupal search module, except for \x{0}-\x{2f} that has been replaced by \x{0}-\x{2c}\x{2e}-\x{2f} in order to keep the char '-' */
\define('PREG_CLASS_SEARCH_EXCLUDE', '\\x{0}-\\x{2c}\\x{2e}-\\x{2f}\\x{3a}-\\x{40}\\x{5b}-\\x{60}\\x{7b}-\\x{bf}\\x{d7}\\x{f7}\\x{2b0}-' . '\\x{385}\\x{387}\\x{3f6}\\x{482}-\\x{489}\\x{559}-\\x{55f}\\x{589}-\\x{5c7}\\x{5f3}-' . '\\x{61f}\\x{640}\\x{64b}-\\x{65e}\\x{66a}-\\x{66d}\\x{670}\\x{6d4}\\x{6d6}-\\x{6ed}' . '\\x{6fd}\\x{6fe}\\x{700}-\\x{70f}\\x{711}\\x{730}-\\x{74a}\\x{7a6}-\\x{7b0}\\x{901}-' . '\\x{903}\\x{93c}\\x{93e}-\\x{94d}\\x{951}-\\x{954}\\x{962}-\\x{965}\\x{970}\\x{981}-' . '\\x{983}\\x{9bc}\\x{9be}-\\x{9cd}\\x{9d7}\\x{9e2}\\x{9e3}\\x{9f2}-\\x{a03}\\x{a3c}-' . '\\x{a4d}\\x{a70}\\x{a71}\\x{a81}-\\x{a83}\\x{abc}\\x{abe}-\\x{acd}\\x{ae2}\\x{ae3}' . '\\x{af1}-\\x{b03}\\x{b3c}\\x{b3e}-\\x{b57}\\x{b70}\\x{b82}\\x{bbe}-\\x{bd7}\\x{bf0}-' . '\\x{c03}\\x{c3e}-\\x{c56}\\x{c82}\\x{c83}\\x{cbc}\\x{cbe}-\\x{cd6}\\x{d02}\\x{d03}' . '\\x{d3e}-\\x{d57}\\x{d82}\\x{d83}\\x{dca}-\\x{df4}\\x{e31}\\x{e34}-\\x{e3f}\\x{e46}-' . '\\x{e4f}\\x{e5a}\\x{e5b}\\x{eb1}\\x{eb4}-\\x{ebc}\\x{ec6}-\\x{ecd}\\x{f01}-\\x{f1f}' . '\\x{f2a}-\\x{f3f}\\x{f71}-\\x{f87}\\x{f90}-\\x{fd1}\\x{102c}-\\x{1039}\\x{104a}-' . '\\x{104f}\\x{1056}-\\x{1059}\\x{10fb}\\x{10fc}\\x{135f}-\\x{137c}\\x{1390}-\\x{1399}' . '\\x{166d}\\x{166e}\\x{1680}\\x{169b}\\x{169c}\\x{16eb}-\\x{16f0}\\x{1712}-\\x{1714}' . '\\x{1732}-\\x{1736}\\x{1752}\\x{1753}\\x{1772}\\x{1773}\\x{17b4}-\\x{17db}\\x{17dd}' . '\\x{17f0}-\\x{180e}\\x{1843}\\x{18a9}\\x{1920}-\\x{1945}\\x{19b0}-\\x{19c0}\\x{19c8}' . '\\x{19c9}\\x{19de}-\\x{19ff}\\x{1a17}-\\x{1a1f}\\x{1d2c}-\\x{1d61}\\x{1d78}\\x{1d9b}-' . '\\x{1dc3}\\x{1fbd}\\x{1fbf}-\\x{1fc1}\\x{1fcd}-\\x{1fcf}\\x{1fdd}-\\x{1fdf}\\x{1fed}-' . '\\x{1fef}\\x{1ffd}-\\x{2070}\\x{2074}-\\x{207e}\\x{2080}-\\x{2101}\\x{2103}-\\x{2106}' . '\\x{2108}\\x{2109}\\x{2114}\\x{2116}-\\x{2118}\\x{211e}-\\x{2123}\\x{2125}\\x{2127}' . '\\x{2129}\\x{212e}\\x{2132}\\x{213a}\\x{213b}\\x{2140}-\\x{2144}\\x{214a}-\\x{2b13}' . '\\x{2ce5}-\\x{2cff}\\x{2d6f}\\x{2e00}-\\x{3005}\\x{3007}-\\x{303b}\\x{303d}-\\x{303f}' . '\\x{3099}-\\x{309e}\\x{30a0}\\x{30fb}\\x{30fd}\\x{30fe}\\x{3190}-\\x{319f}\\x{31c0}-' . '\\x{31cf}\\x{3200}-\\x{33ff}\\x{4dc0}-\\x{4dff}\\x{a015}\\x{a490}-\\x{a716}\\x{a802}' . '\\x{e000}-\\x{f8ff}\\x{fb29}\\x{fd3e}-\\x{fd3f}\\x{fdfc}-\\x{fdfd}' . '\\x{fd3f}\\x{fdfc}-\\x{fe6b}\\x{feff}-\\x{ff0f}\\x{ff1a}-\\x{ff20}\\x{ff3b}-\\x{ff40}' . '\\x{ff5b}-\\x{ff65}\\x{ff70}\\x{ff9e}\\x{ff9f}\\x{ffe0}-\\x{fffd}');
\define('PREG_CLASS_NUMBERS', '\\x{30}-\\x{39}\\x{b2}\\x{b3}\\x{b9}\\x{bc}-\\x{be}\\x{660}-\\x{669}\\x{6f0}-\\x{6f9}' . '\\x{966}-\\x{96f}\\x{9e6}-\\x{9ef}\\x{9f4}-\\x{9f9}\\x{a66}-\\x{a6f}\\x{ae6}-\\x{aef}' . '\\x{b66}-\\x{b6f}\\x{be7}-\\x{bf2}\\x{c66}-\\x{c6f}\\x{ce6}-\\x{cef}\\x{d66}-\\x{d6f}' . '\\x{e50}-\\x{e59}\\x{ed0}-\\x{ed9}\\x{f20}-\\x{f33}\\x{1040}-\\x{1049}\\x{1369}-' . '\\x{137c}\\x{16ee}-\\x{16f0}\\x{17e0}-\\x{17e9}\\x{17f0}-\\x{17f9}\\x{1810}-\\x{1819}' . '\\x{1946}-\\x{194f}\\x{2070}\\x{2074}-\\x{2079}\\x{2080}-\\x{2089}\\x{2153}-\\x{2183}' . '\\x{2460}-\\x{249b}\\x{24ea}-\\x{24ff}\\x{2776}-\\x{2793}\\x{3007}\\x{3021}-\\x{3029}' . '\\x{3038}-\\x{303a}\\x{3192}-\\x{3195}\\x{3220}-\\x{3229}\\x{3251}-\\x{325f}\\x{3280}-' . '\\x{3289}\\x{32b1}-\\x{32bf}\\x{ff10}-\\x{ff19}');
\define('PREG_CLASS_PUNCTUATION', '\\x{21}-\\x{23}\\x{25}-\\x{2a}\\x{2c}-\\x{2f}\\x{3a}\\x{3b}\\x{3f}\\x{40}\\x{5b}-\\x{5d}' . '\\x{5f}\\x{7b}\\x{7d}\\x{a1}\\x{ab}\\x{b7}\\x{bb}\\x{bf}\\x{37e}\\x{387}\\x{55a}-\\x{55f}' . '\\x{589}\\x{58a}\\x{5be}\\x{5c0}\\x{5c3}\\x{5f3}\\x{5f4}\\x{60c}\\x{60d}\\x{61b}\\x{61f}' . '\\x{66a}-\\x{66d}\\x{6d4}\\x{700}-\\x{70d}\\x{964}\\x{965}\\x{970}\\x{df4}\\x{e4f}' . '\\x{e5a}\\x{e5b}\\x{f04}-\\x{f12}\\x{f3a}-\\x{f3d}\\x{f85}\\x{104a}-\\x{104f}\\x{10fb}' . '\\x{1361}-\\x{1368}\\x{166d}\\x{166e}\\x{169b}\\x{169c}\\x{16eb}-\\x{16ed}\\x{1735}' . '\\x{1736}\\x{17d4}-\\x{17d6}\\x{17d8}-\\x{17da}\\x{1800}-\\x{180a}\\x{1944}\\x{1945}' . '\\x{2010}-\\x{2027}\\x{2030}-\\x{2043}\\x{2045}-\\x{2051}\\x{2053}\\x{2054}\\x{2057}' . '\\x{207d}\\x{207e}\\x{208d}\\x{208e}\\x{2329}\\x{232a}\\x{23b4}-\\x{23b6}\\x{2768}-' . '\\x{2775}\\x{27e6}-\\x{27eb}\\x{2983}-\\x{2998}\\x{29d8}-\\x{29db}\\x{29fc}\\x{29fd}' . '\\x{3001}-\\x{3003}\\x{3008}-\\x{3011}\\x{3014}-\\x{301f}\\x{3030}\\x{303d}\\x{30a0}' . '\\x{30fb}\\x{fd3e}\\x{fd3f}\\x{fe30}-\\x{fe52}\\x{fe54}-\\x{fe61}\\x{fe63}\\x{fe68}' . '\\x{fe6a}\\x{fe6b}\\x{ff01}-\\x{ff03}\\x{ff05}-\\x{ff0a}\\x{ff0c}-\\x{ff0f}\\x{ff1a}' . '\\x{ff1b}\\x{ff1f}\\x{ff20}\\x{ff3b}-\\x{ff3d}\\x{ff3f}\\x{ff5b}\\x{ff5d}\\x{ff5f}-' . '\\x{ff65}');
/**
 * Matches all CJK characters that are candidates for auto-splitting
 * (Chinese, Japanese, Korean).
 * Contains kana and BMP ideographs.
 */
\define('PREG_CLASS_CJK', '\\x{3041}-\\x{30ff}\\x{31f0}-\\x{31ff}\\x{3400}-\\x{4db5}\\x{4e00}-\\x{9fbb}\\x{f900}-\\x{fad9}');